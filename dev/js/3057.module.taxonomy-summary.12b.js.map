{"version":3,"file":"js/3057.module.taxonomy-summary.12b.js","mappings":"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","sources":["webpack://interpro7-client/./src/wrappers/ResizeObserverComponent/ResizeObserver.js","webpack://interpro7-client/./src/wrappers/ResizeObserverComponent/index.js","webpack://interpro7-client/./src/components/Accession/index.tsx","webpack://interpro7-client/./src/components/Accession/style.css?1419","webpack://interpro7-client/./src/components/SimpleCommonComponents/FullScreenButton/index.tsx","webpack://interpro7-client/./src/utils/fullscreen/index.js","webpack://interpro7-client/./src/components/Taxonomy/TaxIdOrName/index.js","webpack://interpro7-client/./src/components/Taxonomy/Lineage/index.js","webpack://interpro7-client/./src/components/Taxonomy/Children/index.js","webpack://interpro7-client/./src/components/Taxonomy/Children/style.css?7f8a","webpack://interpro7-client/./src/components/Taxonomy/Summary/index.tsx","webpack://interpro7-client/./src/components/Tree/style.css?9c1b","webpack://interpro7-client/./src/components/Tree/index.tsx"],"sourcesContent":["// @flow\nimport { schedule, sleep } from 'timing-functions';\n\n/*:: type ResizeObserverEntry = {\n  target: HTMLElement,\n  contentRect: {[key: string]: number},\n}; */\n\nexport default (() => {\n  // Use native if possible\n  if ('ResizeObserver' in window) return window.ResizeObserver;\n  // or fallback, with incomplete polyfill, that should be enough for what we do\n  return class ResizeObserver {\n    /*:: _node: ?HTMLElement; */\n    /*:: _onResizeEvent: Array<ResizeObserverEntry> => any; */\n\n    constructor(onResizeEvent /*: Array<ResizeObserverEntry> => any */) {\n      if (typeof onResizeEvent !== 'function') {\n        throw new Error('missing resize handler');\n      }\n      this._onResizeEvent = onResizeEvent;\n    }\n\n    _handleResize = async () => {\n      await schedule();\n      if (!this._node) return;\n      this._onResizeEvent([\n        {\n          target: this._node,\n          // $FlowFixMe class-object-subtyping\n          contentRect: this._node.getBoundingClientRect(),\n        },\n      ]);\n    };\n\n    observe(node /*: HTMLElement */) {\n      if (!node instanceof HTMLElement) {\n        throw new Error('ResizeObserver only works on HTML elements');\n      }\n      if (this._node) {\n        throw new Error('ResizeObserver fallback only supports one node');\n      }\n      this._node = node;\n      window.addEventListener('resize', this._handleResize);\n      this._handleResize();\n      // just in case it happened too soon, just redo it after a bit\n      // eslint-disable-next-line no-magic-numbers\n      sleep(1000).then(this._handleResize);\n    }\n\n    unobserve(node /*: HTMLElement */) {\n      if (this._node && this._node !== node) {\n        throw new Error('Trying to unobserve the wrong node');\n      }\n      this._node = null;\n      window.removeEventListener('resize', this._handleResize);\n    }\n  };\n})();\n","// @flow\nimport React, { PureComponent } from 'react';\nimport T from 'prop-types';\n/*:: import type { Node } from 'react'; */\n\nimport ResizeObserver from './ResizeObserver';\n\n/*:: type Measurement =\n  'bottom' | 'height' | 'left' | 'right' | 'top' | 'width' | 'x' | 'y';\n*/\n\n/*:: type State = {\n  [Measurement]: number,\n}; */\n\n/*:: type Props = {\n  element: ?string,\n  children: State => Node,\n  measurements: Measurement | Array<Measurement>,\n  updateCallback?: ?function,\n}; */\n\nclass ResizeObserverComponent extends PureComponent /*:: <Props, State> */ {\n  /*::\n    _ref: { current: null | React$ElementRef<string | Class<React$Component<*, *>>> };\n    _resizeObserver: any;\n  */\n\n  static propTypes = {\n    element: T.string,\n    children: T.func.isRequired,\n    measurements: T.oneOfType([T.arrayOf(T.string).isRequired, T.string]),\n    updateCallback: T.func,\n  };\n\n  constructor(props /*: Props */) {\n    super(props);\n\n    this.state = {};\n    this._resizeObserver = new ResizeObserver(\n      // $FlowFixMe method-unbinding\n      this._handleResizeEvent.bind(this),\n    );\n\n    this._ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this._resizeObserver.observe(this._ref.current);\n  }\n\n  componentDidUpdate() {\n    if (this.props.updateCallback) this.props.updateCallback();\n  }\n\n  componentWillUnmount() {\n    this._resizeObserver.unobserve(this._ref.current);\n  }\n\n  _handleResizeEvent(resizeObserverEntries) {\n    let finalContentRect;\n    for (const { target, contentRect } of resizeObserverEntries) {\n      if (target !== this._ref.current) continue; // shouldn't happen, but still\n      finalContentRect = contentRect;\n    }\n    if (finalContentRect) {\n      const state = {};\n      let { measurements } = this.props;\n      if (!Array.isArray(measurements)) {\n        measurements = [measurements];\n      }\n      for (const measurement of measurements) {\n        state[measurement] = finalContentRect[measurement];\n      }\n      this.setState(state);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      element,\n      measurements: __,\n      updateCallback: _,\n      ...props\n    } = this.props;\n    const Element = element || 'span';\n    return (\n      // $FlowIgnore\n      <Element {...props} ref={this._ref}>\n        {children(this.state)}\n      </Element>\n    );\n  }\n}\n\nexport default ResizeObserverComponent;\n","import React from 'react';\n\nimport cssBinder from 'styles/cssBinder';\nimport local from './style.css';\n\nconst f = cssBinder(local);\n\ntype Props = {\n  accession: string | number;\n  withTitle?: boolean;\n  title?: string;\n};\n\nconst Accession = ({ withTitle, accession, title }: Props) => {\n  return (\n    <div>\n      {title !== '' && withTitle ? <span> {title || 'Accession'}:</span> : null}\n      {title === 'Job ID' ? (\n        <span className={f('tag-sqc')}> {accession}</span>\n      ) : (\n        accession\n      )}\n    </div>\n  );\n};\n\nexport default Accession;\n","// extracted by mini-css-extract-plugin\nexport default {\"tag-sqc\":\"Accession_style__tag-sqc___bf\"};","import React, { useState, useEffect } from 'react';\n\nimport { noop } from 'lodash-es';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Button from 'components/SimpleCommonComponents/Button';\n\nimport { requestFullScreen, exitFullScreen } from 'utils/fullscreen';\nimport cssBinder from 'styles/cssBinder';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(fonts);\n\ntype Props = {\n  /**\n   * Hook that is call when the full screen action gets trigger\n   * @returns void\n   */\n  onFullScreenHook?: () => void;\n  /**\n   * Hook that is call when exiting the full screen action\n   * @returns void\n   */\n  onExitFullScreenHook?: () => void;\n  /**\n   * Either the id, or directly the DOM element to be send to full screen\n   */\n  element?: string | HTMLElement | null;\n  /**\n   * Content of the tooltip that appears when hovering this button\n   */\n  tooltip: string;\n  /**\n   * Extra CSS classes to add\n   */\n  className?: string;\n  /**\n   * Should we change the icon for one from https://www.ebi.ac.uk/style-lab/general/fonts/v1.3/\n   */\n  dataIcon?: string;\n  /**\n   * To disable the component\n   */\n  disabled?: boolean;\n};\nconst FullScreenButton = ({\n  element,\n  tooltip,\n  className,\n  dataIcon,\n  disabled = false,\n  onFullScreenHook = noop,\n  onExitFullScreenHook = noop,\n}: Props) => {\n  const [elementInDOM, setElementInDom] = useState<\n    HTMLElement | null | undefined\n  >(null);\n  const [isFull, setFull] = useState(false);\n  const onFullscreen = () => {\n    if (document.fullscreenElement === null) {\n      setFull(false);\n      onExitFullScreenHook();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', onFullscreen);\n    return () => document.removeEventListener('fullscreenchange', onFullscreen);\n  }, []);\n  useEffect(() => {\n    setElementInDom(\n      typeof element === 'string' ? document.getElementById(element) : element,\n    );\n  }, [element]);\n\n  if (!elementInDOM) return null;\n  const _handleFullScreen = () => {\n    if (isFull) {\n      exitFullScreen();\n      onExitFullScreenHook();\n    } else {\n      requestFullScreen(elementInDOM).then(() => onFullScreenHook());\n    }\n    setFull(!isFull);\n  };\n  const _className =\n    className || css('margin-bottom-none', 'icon', 'icon-common');\n  const icon =\n    dataIcon || (isFull ? 'icon-fullscreen-collapse' : 'icon-fullscreen');\n  return (\n    <Tooltip title={tooltip}>\n      <Button\n        type=\"inline\"\n        onClick={_handleFullScreen}\n        icon={icon}\n        title={tooltip}\n        className={_className}\n        disabled={disabled}\n      />\n    </Tooltip>\n  );\n};\n\nexport default FullScreenButton;\n","export const requestFullScreen = (element) => {\n  if ('requestFullscreen' in element) {\n    return element.requestFullscreen();\n  } else if ('webkitRequestFullscreen' in element) {\n    return element.webkitRequestFullscreen();\n  } else if ('mozRequestFullScreen' in element) {\n    return element.mozRequestFullScreen();\n  } else if ('msRequestFullscreen' in element) {\n    return element.msRequestFullscreen();\n  }\n};\n\nexport const exitFullScreen = () => {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  } else if ('mozExitFullScreen' in document) {\n    return document.mozExitFullScreen();\n  } else if ('msExitFullscreen' in document) {\n    return document.msExitFullscreen();\n  }\n};\n\nexport const onFullScreenChange = (element, callback) => {\n  if ('onfullscreenchange' in element) {\n    element.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in element) {\n    element.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in element) {\n    element.onmozfullscreenchange = callback;\n  } else if ('onfullscreenchange' in document) {\n    document.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in document) {\n    document.onmozfullscreenchange = callback;\n  } else if ('onMSFullscreenChange' in document) {\n    document.onMSFullscreenChange = callback;\n  }\n};\n","// @flow\nimport React, { PureComponent } from 'react';\nimport T from 'prop-types';\n\nimport Link from 'components/generic/Link';\n\n/*:: type Props = {\n  accession: string | number,\n  data?: {\n    payload: ?{\n      metadata : ?{\n        name: ?{\n          name: ?string,\n        },\n      },\n    },\n  },\n  element?: any,\n  name: {\n    short: string\n  }\n}; */\n\nclass TaxIdOrName extends PureComponent /*:: <Props> */ {\n  static propTypes = {\n    accession: T.oneOfType([T.string, T.number]),\n    data: T.object,\n    element: T.any,\n    name: T.shape({\n      short: T.string,\n    }),\n  };\n\n  render() {\n    const { accession, data, name, element: Element } = this.props;\n    const displayedText =\n      (data &&\n        data.payload &&\n        data.payload.metadata &&\n        data.payload.metadata.name &&\n        data.payload.metadata.name.name) ||\n      (name && name.short) ||\n      accession;\n    if (Element) {\n      return <Element>{displayedText}</Element>;\n    }\n    return (\n      <Link\n        to={{\n          description: {\n            main: { key: 'taxonomy' },\n            taxonomy: { db: 'uniprot', accession: accession.toString() },\n          },\n        }}\n      >\n        {displayedText}\n      </Link>\n    );\n  }\n}\n\nexport default TaxIdOrName;\n","// @flow\nimport React, { PureComponent } from 'react';\nimport T from 'prop-types';\n\nimport TaxIdOrName from 'components/Taxonomy/TaxIdOrName';\n\nimport { foundationPartial } from 'styles/foundation';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst f = foundationPartial(fonts);\n\n/*:: type Props = {\n  lineage: string,\n  names: Object,\n  className?: ?string,\n}*/\n\nclass Lineage extends PureComponent /*:: <Props> */ {\n  static propTypes = {\n    lineage: T.string.isRequired,\n    names: T.object,\n    className: T.string,\n  };\n\n  render() {\n    const lineage = this.props.lineage.trim().split(' ');\n    const { names, className } = this.props;\n    return (\n      <div className={className}>\n        {lineage.map(taxId => (\n          <span\n            key={taxId}\n            className={f('icon', 'icon-common', 'primary')}\n            data-icon=\"&#xf105;\"\n          >\n            {' '}\n            <TaxIdOrName accession={taxId} name={names[taxId]} />{' '}\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Lineage;\n","// @flow\nimport React, { PureComponent } from 'react';\nimport T from 'prop-types';\n\nimport TaxIdOrName from 'components/Taxonomy/TaxIdOrName';\n\nimport { foundationPartial } from 'styles/foundation';\n\nimport local from './style.css';\nimport loadable from 'higherOrder/loadable';\nimport config from 'config';\n\n// $FlowFixMe\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\n\nconst f = foundationPartial(local);\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\nconst schemaProcessData = (\n  { taxId, name } /*: {taxId: string, name: string} */,\n) => ({\n  '@id': '@contains', // maybe 'is member of' http://semanticscience.org/resource/SIO_000095\n  name: 'contains',\n  value: {\n    '@type': ['Taxonomy', 'StructuredValue', 'BioChemEntity'],\n    name,\n    identifier: taxId,\n    url:\n      config.root.website.protocol +\n      config.root.website.href +\n      descriptionToPath({\n        main: { key: 'taxonomy' },\n        taxonomy: { db: 'uniprot', accession: taxId },\n      }),\n  },\n});\n/*:: type Props = {\n  taxChildren: Array<string>,\n  names: Object\n}*/\nclass Children extends PureComponent /*:: <Props> */ {\n  static propTypes = {\n    taxChildren: T.array.isRequired,\n    names: T.object,\n  };\n\n  render() {\n    const { taxChildren, names } = this.props;\n    return (\n      <div className={f('list-children')}>\n        {taxChildren.length ? (\n          taxChildren.map((taxId) => (\n            <div key={taxId}>\n              <TaxIdOrName accession={taxId} name={names[taxId]} />\n              <SchemaOrgData\n                data={{ taxId, name: names[taxId] }}\n                processData={schemaProcessData}\n              />\n            </div>\n          ))\n        ) : (\n          <span>None</span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Children;\n","// extracted by mini-css-extract-plugin\nexport default {\"list-children\":\"Children_style__list-children___ad\"};","import React, { PureComponent } from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadable from 'higherOrder/loadable';\nimport loadData from 'higherOrder/loadData/ts';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { goToCustomLocation } from 'actions/creators';\n\nimport MemberDBSelector from 'components/MemberDBSelector';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Accession from 'components/Accession';\nimport Lineage from 'components/Taxonomy/Lineage';\nimport Children from 'components/Taxonomy/Children';\nimport Tree from 'components/Tree';\nimport BaseLink from 'components/ExtLink/BaseLink';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport memberSelectorStyle from 'components/Table/TotalNb/style.css';\nimport summary from 'styles/summary.css';\nimport ipro from 'styles/interpro-vf.css';\n\nconst css = cssBinder(memberSelectorStyle, summary, ipro);\n\nexport const parentRelationship = ({\n  taxId,\n  name = null,\n}: {\n  taxId: string;\n  name: string | null;\n}) => ({\n  '@id': '@additionalProperty',\n  '@type': 'PropertyValue',\n  additionalType: 'http://semanticscience.org/resource/SIO_000095',\n  name: 'is member of',\n  value: {\n    '@type': 'StructuredValue',\n    additionalType: ['bio:Taxon', 'bio:BioChemEntity'],\n    identifier: taxId,\n    name,\n  },\n});\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n\ntype Props = {\n  goToCustomLocation: typeof goToCustomLocation;\n  customLocation: InterProLocation;\n};\ntype Payload = { metadata: TaxonomyMetadata } & WithNames & WithTaxonomyFilters;\n\ninterface LoadedProps extends Props, LoadDataProps<Payload, 'Names'> {}\n\ntype State = { data?: TaxNode | null; focused?: string };\n\nexport class SummaryTaxonomy extends PureComponent<LoadedProps, State> {\n  loadingVis = false;\n  state: State = {};\n\n  componentDidMount() {\n    if (this.props.dataNames?.payload) {\n      this.loadingVis = true;\n      this._populateData(this.props.dataNames.payload);\n      this.loadingVis = false;\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadedProps) {\n    if (\n      prevProps.dataNames !== this.props.dataNames &&\n      this.props.dataNames?.payload\n    ) {\n      this.loadingVis = true;\n      this._populateData(this.props.dataNames.payload);\n      this.loadingVis = false;\n    }\n  }\n\n  _handleFocus = (accession: string) => {\n    if (!this.loadingVis)\n      this.props.goToCustomLocation({\n        description: {\n          main: { key: 'taxonomy' },\n          taxonomy: { db: 'uniprot', accession },\n        },\n      });\n  };\n\n  _populateData = ({ metadata: data, names, children }: Payload) => {\n    const lineage = data.lineage.trim().split(/\\s+/);\n    let root: TaxNode | null = null;\n    let currentNode: TaxNode | null = null;\n    for (const node of lineage) {\n      const newNode: TaxNode = {\n        name: names[node].short,\n        id: node,\n      };\n      if (currentNode) {\n        currentNode.children = [newNode];\n      } else {\n        root = newNode;\n      }\n      currentNode = newNode;\n    }\n    if (currentNode) {\n      currentNode.name =\n        (data.name as NameObject)?.short ||\n        (data.name as NameObject)?.name ||\n        data.accession;\n      currentNode.hitcount = data?.counters?.proteins as number;\n\n      if (data.children) {\n        currentNode.children = data.children.map((id) => ({\n          name: names[id].short,\n          id,\n          hitcount: children?.[id]?.proteins,\n        }));\n      }\n      this.setState({ data: root, focused: `${data.accession}` });\n    }\n  };\n\n  _handleChange = (event: React.FormEvent) => {\n    const value = (event.target as HTMLSelectElement).value;\n    const {\n      customLocation: { description },\n    } = this.props;\n    this.props.goToCustomLocation({\n      search: {\n        entry_db: value,\n      },\n      description,\n    });\n  };\n\n  _isSelected = (currentDB: DBInfo) => {\n    const {\n      customLocation: {\n        search: { entry_db: db },\n      },\n    } = this.props;\n    return (\n      ((db as string) || 'all').toLowerCase() ===\n      currentDB.canonical.toLowerCase()\n    );\n  };\n\n  render() {\n    if (\n      this.props.dataNames?.loading ||\n      !this.props.dataNames?.payload?.metadata\n    )\n      return <Loading />;\n    const { metadata, names } = this.props.dataNames.payload;\n    const {\n      customLocation: {\n        search: { entry_db: db },\n      },\n    } = this.props;\n\n    return (\n      <div className={css('vf-stack', 'vf-stack--400')}>\n        <section className={css('vf-grid', 'summary-grid')}>\n          <div className={css('vf-stack')}>\n            <table className={css('vf-table', 'left-headers')}>\n              <tbody>\n                <tr>\n                  <td style={{ maxWidth: '50%' }}>Taxon ID</td>\n                  <td>\n                    <Accession\n                      accession={metadata.accession}\n                      title=\"Taxon ID\"\n                    />\n                  </td>\n                </tr>\n                {metadata.rank && (\n                  <tr>\n                    <td>Rank</td>\n                    <td className={css('first-letter-cap')}>{metadata.rank}</td>\n                  </tr>\n                )}\n\n                {metadata.parent && (\n                  <SchemaOrgData\n                    data={{\n                      taxId: metadata.parent,\n                      name:\n                        names[metadata.parent] && names[metadata.parent].name,\n                    }}\n                    processData={parentRelationship}\n                  />\n                )}\n\n                <tr>\n                  <td>Lineage</td>\n                  <td\n                    className={css('ico-primary')}\n                    data-testid=\"taxonomy-lineage\"\n                  >\n                    <Lineage lineage={metadata.lineage} names={names} />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Children</td>\n                  <td data-testid=\"taxonomy-children\">\n                    <Children\n                      taxChildren={metadata.children || []}\n                      names={names}\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div className={css('vf-stack')}>\n            <section>\n              <h5>External Links</h5>\n              <ul className={css('no-bullet')}>\n                <li>\n                  <BaseLink\n                    id={metadata.accession}\n                    target=\"_blank\"\n                    pattern=\"https://www.uniprot.org/taxonomy/{id}\"\n                    className={css('ext')}\n                  >\n                    UniProt\n                  </BaseLink>\n                </li>\n              </ul>\n            </section>\n          </div>\n        </section>\n        <div>\n          {\n            <MemberDBSelector\n              contentType=\"taxonomy\"\n              filterType=\"entry\"\n              onChange={this._handleChange}\n              isSelected={this._isSelected}\n              hideCounters={true}\n            >\n              {(open: boolean) => (\n                <span\n                  className={css(\n                    'header-total-results',\n                    'margin-bottom-medium',\n                    {\n                      selector: typeof open === 'boolean',\n                      open,\n                    },\n                  )}\n                >\n                  Entry Database: {db || 'All'}\n                </span>\n              )}\n            </MemberDBSelector>\n          }\n          <Tree\n            data={this.state.data}\n            focused={this.state.focused}\n            changeFocus={this._handleFocus}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getUrl = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search,\n  ({ protocol, hostname, port, root }, description, search) => {\n    const { entry_db: db, ..._search } = search;\n    const hasFilters = Object.values(description).some(\n      (endpoint) => !!(endpoint as EndpointPartialLocation).isFilter,\n    );\n    if (hasFilters || !db || db === 'all') _search.with_names = true;\n    else _search.filter_by_entry_db = db;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(description),\n      query: _search,\n    });\n  },\n);\n\nexport default loadData<{ metadata: TaxonomyMetadata } & WithNames, 'Names'>({\n  getUrl,\n  propNamespace: 'Names',\n  mapDispatchToProps: { goToCustomLocation },\n} as LoadDataParameters)(SummaryTaxonomy);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttons\":\"Tree_style__buttons___d8\",\"fullscreen\":\"Tree_style__fullscreen___d7\",\"container\":\"Tree_style__container___a1\",\"node\":\"Tree_style__node___d8\",\"in-path\":\"Tree_style__in-path___db\",\"tree\":\"Tree_style__tree___d8\"};","import React, { PureComponent, RefObject } from 'react';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport TaxonomyVisualisation from 'taxonomy-visualisation';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport FullScreenButton from 'components/SimpleCommonComponents/FullScreenButton';\n\nimport ResizeObserverComponent from 'wrappers/ResizeObserverComponent';\n\nimport fisheyeOff from 'EBI-Icon-fonts/source/common/font-awesome/solid/dot-circle.svg';\nimport fisheyeOn from 'EBI-Icon-fonts/source/common/font-awesome/solid/bullseye.svg';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport styles from './style.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(styles, fonts);\n\ntype Props = {\n  data?: TaxNode | null;\n  focused?: string;\n  changeFocus?: (accession: string) => void;\n  labelClick?: (accession: string) => void;\n  hideToggle?: boolean;\n  initialFisheye?: boolean;\n  search: string;\n};\ntype State = {\n  fisheye: boolean;\n  isFullScreen: boolean;\n  searchTerm: string;\n};\n\nconst DEFAULT_WIDTH = 600;\n\nexport class Tree extends PureComponent<Props, State> {\n  _loadingVis = false;\n  _ref: RefObject<SVGSVGElement>;\n  _vis: TaxonomyVisualisation | null = null;\n\n  static defaultProps = {\n    initialFisheye: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const fisheye = !!props.initialFisheye;\n    const search = props.search;\n\n    this._ref = React.createRef();\n\n    this.state = { fisheye, searchTerm: search, isFullScreen: false };\n  }\n\n  static getDerivedStateFromProps({ search }: Props, { searchTerm }: State) {\n    if (search !== searchTerm) return { searchTerm: search };\n    return null;\n  }\n\n  componentDidMount() {\n    this._vis = new TaxonomyVisualisation(undefined, {\n      initialMaxNodes: +Infinity,\n      fisheye: this.state.fisheye,\n      fixedNodeSize: 5,\n      classnames: {\n        inPath: styles['in-path'],\n        node: styles.node,\n      },\n      enableZooming: true,\n      useCtrlToZoom: true,\n      searchTerm: this.props.search,\n      highlightColor: '#094EEE',\n      // shouldCorrectNodesOutside: true,\n    });\n\n    this._vis.addEventListener('focus', this._handleFocus);\n    this._vis.addEventListener('click', this._handleLabelClick);\n    this._vis.tree = this._ref.current;\n    this._loadingVis = true;\n    this._populateData(this.props.data, this.props.focused);\n    this._loadingVis = false;\n  }\n\n  componentDidUpdate({ data, focused }: Props) {\n    if (data !== this.props.data) {\n      this._loadingVis = true;\n      this._populateData(this.props.data, this.props.focused);\n      this._loadingVis = false;\n    }\n    if (this._vis) {\n      if (focused !== this.props.focused) {\n        this._vis.focusNodeWithID(this.props.focused);\n      }\n      this._vis.searchTerm = this.state.searchTerm;\n      this._vis.fisheye = this.state.fisheye;\n    }\n  }\n\n  componentWillUnmount() {\n    this._vis?.cleanup();\n  }\n\n  _handleClick = () => this.setState(({ fisheye }) => ({ fisheye: !fisheye }));\n\n  _recenter = () => {\n    this._vis?.resetZoom();\n  };\n\n  _handleFocus = (evt: Event) => {\n    const {\n      detail: { id },\n    } = evt as CustomEvent;\n    if (!this._loadingVis && this.props.changeFocus) this.props.changeFocus(id);\n  };\n  _handleLabelClick = (evt: Event) => {\n    const {\n      detail: { id },\n    } = evt as CustomEvent;\n    if (!this._loadingVis && this.props.labelClick) this.props.labelClick(id);\n    else this._handleFocus(evt);\n  };\n\n  _populateData = (data: TaxNode | null | undefined, focused?: string) => {\n    if (this._vis) {\n      this._vis.data = data;\n      this._vis.focusNodeWithID(focused);\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <div className={styles.buttons}>\n          <span className={styles.fullscreen}>\n            <FullScreenButton\n              element=\"treeDiv\"\n              tooltip=\"View the taxonomy tree in full screen mode\"\n              onFullScreenHook={() =>\n                requestAnimationFrame(() =>\n                  this.setState({ isFullScreen: true }),\n                )\n              }\n              onExitFullScreenHook={() =>\n                this.setState({ isFullScreen: false })\n              }\n            />\n          </span>\n          {this.props.hideToggle ? null : (\n            <span>\n              <Tooltip title=\"toggle fisheye view\">\n                <button onClick={this._handleClick}>\n                  <img\n                    src={this.state.fisheye ? fisheyeOff : fisheyeOn}\n                    alt=\"toggle-fisheye\"\n                  />\n                </button>\n              </Tooltip>\n            </span>\n          )}\n          <span>\n            <Tooltip title=\"Recenter\">\n              <button\n                onClick={this._recenter}\n                className={css('icon', 'icon-common', 'font-l')}\n                data-icon=\"&#xf05b;\"\n              />\n            </Tooltip>\n          </span>\n        </div>\n\n        <ResizeObserverComponent measurements={['width']} element=\"div\">\n          {({ width }: { width: number }) => (\n            <div className={styles.tree} data-testid=\"data-tree\" id=\"treeDiv\">\n              <svg\n                className={styles.container}\n                ref={this._ref}\n                style={{ flex: '1' }}\n                width={\n                  this.state.isFullScreen\n                    ? window.screen.width\n                    : 100 * Math.floor((width || DEFAULT_WIDTH) / 100)\n                }\n              />\n            </div>\n          )}\n        </ResizeObserverComponent>\n      </>\n    );\n  }\n}\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.search.search as string,\n  (search) => ({ search }),\n);\n\nexport default connect(mapStateToProps)(Tree);\n"],"names":["window","ResizeObserver","constructor","onResizeEvent","_this","_handleResize","_asyncToGenerator","schedule","_node","_onResizeEvent","target","contentRect","getBoundingClientRect","Error","this","observe","node","HTMLElement","addEventListener","sleep","then","unobserve","removeEventListener","ResizeObserverComponent","PureComponent","props","super","state","_resizeObserver","_handleResizeEvent","bind","_ref","React","componentDidMount","current","componentDidUpdate","updateCallback","componentWillUnmount","resizeObserverEntries","finalContentRect","measurements","measurement","Array","isArray","setState","render","_this$props","children","element","_objectWithoutPropertiesLoose","_excluded","Element","_extends","ref","propTypes","T","isRequired","f","cssBinder","withTitle","accession","title","className","css","fonts","tooltip","dataIcon","disabled","onFullScreenHook","noop","onExitFullScreenHook","elementInDOM","setElementInDom","useState","isFull","setFull","onFullscreen","document","fullscreenElement","useEffect","getElementById","_className","icon","Tooltip","Button","type","onClick","_handleFullScreen","exitFullscreen","webkitExitFullscreen","mozExitFullScreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","requestFullScreen","TaxIdOrName","data","name","displayedText","payload","metadata","short","Link","to","description","main","key","taxonomy","db","toString","foundationPartial","Lineage","lineage","trim","split","names","map","taxId","SchemaOrgData","loadable","loader","loading","schemaProcessData","value","identifier","url","config","root","website","protocol","href","descriptionToPath","Children","taxChildren","length","processData","memberSelectorStyle","summary","ipro","parentRelationship","additionalType","SummaryTaxonomy","loadingVis","_handleFocus","goToCustomLocation","_populateData","_ref2","currentNode","newNode","id","_a","_b","hitcount","_c","counters","proteins","focused","_handleChange","event","customLocation","search","entry_db","_isSelected","currentDB","toLowerCase","canonical","dataNames","prevProps","Loading","style","maxWidth","Accession","rank","parent","BaseLink","pattern","MemberDBSelector","contentType","filterType","onChange","isSelected","hideCounters","open","selector","Tree","changeFocus","getUrl","createSelector","settings","api","_ref3","hostname","port","_search","__rest","Object","values","some","endpoint","isFilter","with_names","filter_by_entry_db","format","pathname","query","loadData","propNamespace","mapDispatchToProps","styles","_loadingVis","_vis","_handleClick","fisheye","_recenter","resetZoom","evt","detail","_handleLabelClick","labelClick","focusNodeWithID","initialFisheye","searchTerm","isFullScreen","getDerivedStateFromProps","TaxonomyVisualisation","undefined","initialMaxNodes","fixedNodeSize","classnames","inPath","enableZooming","useCtrlToZoom","highlightColor","tree","_ref4","cleanup","buttons","fullscreen","FullScreenButton","requestAnimationFrame","hideToggle","src","fisheyeOff","fisheyeOn","alt","_ref5","width","container","flex","screen","Math","floor","defaultProps","mapStateToProps","connect"],"sourceRoot":""}