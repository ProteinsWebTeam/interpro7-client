{"version":3,"file":"js/8961.module.similar-proteins-subpage.7e3.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/SimpleCommonComponents/DynamicTooltip/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/IDAProtVista/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/Options/AllIDADownload/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/Options/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/Options/style.css?0ad3","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/TextIDA/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/TextIDA/style.css?a199","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/index.tsx","webpack://interpro7-client/./src/components/Entry/DomainArchitectures/style.css?2c35","webpack://interpro7-client/./src/components/ToggleSwitch/index.tsx","webpack://interpro7-client/./src/components/ToggleSwitch/style.css?e633","webpack://interpro7-client/./src/subPages/SimilarProteins/Table/AllProteinDownload/index.tsx","webpack://interpro7-client/./src/subPages/SimilarProteins/Table/index.tsx","webpack://interpro7-client/./src/subPages/SimilarProteins/Table/AllProteinDownload/style.css","webpack://interpro7-client/./src/subPages/SimilarProteins/Header/index.tsx","webpack://interpro7-client/./src/subPages/SimilarProteins/index.tsx","webpack://interpro7-client/./src/subPages/SimilarProteins/style.css?478e"],"sourcesContent":["import React, { useState, useEffect, PropsWithChildren } from 'react';\n\nimport loadData from 'higherOrder/loadData/ts';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport TooltipForTrack from '../Tooltip/ForTrack';\nimport EntryPopup from '../Tooltip/EntryPopup';\n\ntype ProviderProps = {\n  accession: string;\n  type: string;\n  source: string;\n  onLoad: (x: () => React.JSX.Element) => void;\n  databases: Record<string, { name: string }>;\n  locations: Array<ProtVistaLocation>;\n  shouldLoad: boolean;\n};\n\ninterface LoadedProps\n  extends ProviderProps,\n    LoadDataProps<{ metadata: EntryMetadata }> {}\n\nconst _DataProvider = ({ data, onLoad, databases, locations }: LoadedProps) => {\n  useEffect(() => {\n    if (data && !data.loading && data.payload && data.payload.metadata) {\n      const {\n        accession,\n        name: { name },\n        source_database: db,\n      } = data.payload.metadata;\n\n      onLoad(() => (\n        <EntryPopup\n          locations={locations}\n          accession={accession}\n          dbName={databases[db].name}\n          name={name}\n        />\n      ));\n    }\n  });\n  return null;\n};\n\nconst getUrlFor = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (_: GlobalState, props: ProviderProps) => props,\n\n  ({ protocol, hostname, port, root }, props) => {\n    if (!props.shouldLoad) return null;\n    const description: InterProPartialDescription = {\n      main: { key: props.type as Endpoint },\n      [props.type as Endpoint]: {\n        accession: props.accession,\n        db: props.source,\n      },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(description),\n    });\n  },\n);\n\nconst DataProvider = loadData<{ metadata: Metadata }>(\n  getUrlFor as LoadDataParameters,\n)(_DataProvider);\n\ntype Props = PropsWithChildren<{\n  accession: string;\n  type: string;\n  source: string;\n  databases: Record<string, { name: string }>;\n  locations: Array<ProtVistaLocation>;\n}>;\nconst DynamicTooltip = ({\n  type,\n  source,\n  accession,\n  children,\n  databases,\n  locations,\n}: Props) => {\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [message, setMessage] = useState(() => <b>{accession}</b>);\n  const [currentLocation, setCurrentLocation] =\n    useState<Array<ProtVistaLocation>>(locations);\n\n  return (\n    <>\n      <TooltipForTrack\n        message={message}\n        onMouseOverFeature={(locations: Array<ProtVistaLocation>) => {\n          setShouldLoad(true);\n          setCurrentLocation(locations);\n        }}\n      >\n        {children}\n      </TooltipForTrack>\n      <DataProvider\n        accession={accession}\n        type={type}\n        source={source}\n        onLoad={setMessage}\n        databases={databases}\n        locations={currentLocation}\n        shouldLoad={shouldLoad}\n      />\n    </>\n  );\n};\n\nexport default DynamicTooltip;\n","import React from 'react';\n\nimport Link from 'components/generic/Link';\nimport NumberComponent from 'components/NumberComponent';\nimport DynamicTooltip from 'components/SimpleCommonComponents/DynamicTooltip';\nimport { getTrackColor, EntryColorMode } from 'utils/entry-color';\nimport NightingaleInterProTrack from 'components/Nightingale/InterProTrack';\n\nimport cssBinder from 'styles/cssBinder';\nimport protvista from 'components/ProteinViewer/style.css';\n\nconst css = cssBinder(protvista);\n\nconst MAX_PERC_WIDTH = 80; // Just to reseve a bit for the labels\nconst HEIGHT_OF_TRACKS = 22;\n\ntype Props = {\n  matches: Array<{\n    accession: string;\n    locations: ProtVistaLocation[];\n    name: string;\n  }>;\n  highlight?: Array<string>;\n  databases: DBsInfo;\n  length: number;\n  maxLength: number;\n};\n\nconst IDAProtVista = ({\n  matches,\n  length,\n  maxLength,\n  databases,\n  highlight = [],\n}: Props) => {\n  const width = `${(MAX_PERC_WIDTH * length) / maxLength}%`;\n  return (\n    <div className={css('ida-protvista')}>\n      {matches.map((d, i) => (\n        <div key={`${d.accession}-${i}`} className={css('track-row')}>\n          <div\n            className={css('track-component', {\n              highlight: highlight.indexOf(d.accession) >= 0,\n            })}\n            style={{\n              width,\n            }}\n          >\n            <DynamicTooltip\n              type=\"entry\"\n              source={\n                d.accession.toLowerCase().startsWith('ipr')\n                  ? 'interpro'\n                  : 'pfam'\n              }\n              accession={`${d.accession}`}\n              databases={databases}\n              locations={d.locations}\n            >\n              <NightingaleInterProTrack\n                length={length}\n                display-start={1}\n                display-end={length}\n                data={[d]}\n                shape=\"roundRectangle\"\n                margin-color=\"#fafafa\"\n                expanded\n                use-ctrl-to-zoom\n                height={HEIGHT_OF_TRACKS}\n                color={getTrackColor(\n                  { accession: d.accession },\n                  EntryColorMode.ACCESSION,\n                )}\n              />\n            </DynamicTooltip>\n          </div>\n          <div className={css('track-accession')}>\n            <Link\n              to={{\n                description: {\n                  main: { key: 'entry' },\n                  entry: {\n                    db: d.accession.toLowerCase().startsWith('ipr')\n                      ? 'InterPro'\n                      : 'pfam',\n                    accession: d.accession,\n                  },\n                },\n              }}\n            >\n              {d.name}\n            </Link>\n          </div>\n        </div>\n      ))}\n      <div className={css('track-row')}>\n        <div\n          className={css('track-length')}\n          style={{\n            width,\n          }}\n        >\n          <div className={css('note')} />\n          <div className={css('length')}>\n            <NumberComponent noTitle>{length}</NumberComponent>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IDAProtVista;\n","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport File from 'components/File';\nimport { SupportedExtensions } from 'components/File/FileButton';\n\ntype Props = {\n  entryLocation?: EndpointLocation;\n  search?: Record<string, string>;\n  count: number;\n  fileType: SupportedExtensions;\n};\n\nconst AllIDADownload = ({ entryLocation, search, fileType, count }: Props) => (\n  <File\n    fileType={fileType}\n    name={`ida-search-results.${fileType}`}\n    count={count}\n    customLocationDescription={{\n      main: { key: 'entry' },\n      entry: {\n        ...(entryLocation || {}),\n        detail: undefined,\n      },\n    }}\n    search={entryLocation?.accession ? { ida: '' } : search}\n    endpoint=\"ida\"\n  />\n);\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) =>\n    state.customLocation.description.entry as EndpointLocation,\n  (state: GlobalState) => state.customLocation.search as Record<string, string>,\n  (entryLocation, search) => ({\n    entryLocation,\n    search,\n  }),\n);\n\nexport default connect(mapStateToProps)(AllIDADownload);\n","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { format } from 'url';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { changeSettingsRaw } from 'actions/creators';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport ToggleSwitch from 'components/ToggleSwitch';\nimport Exporter from 'components/Table/Exporter';\n\nimport ExternalExportButton from 'components/Table/Exporter/ExternalExportButton';\nimport AllIDADownload from './AllIDADownload';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport exporterStyle from 'components/Table/Exporter/style.css';\nimport local from './style.css';\nimport { toPublicAPI } from 'utils/url';\n\nconst css = cssBinder(local, exporterStyle);\n\ntype PropsIDAOptions = {\n  changeSettingsRaw: typeof changeSettingsRaw;\n  idaAccessionDB: string;\n  showDBSelector?: boolean;\n  showExporter?: boolean;\n  api?: ParsedURLServer;\n  entryLocation?: EndpointLocation;\n  search?: InterProLocationSearch;\n  count?: number;\n};\nconst IDAOptions = ({\n  changeSettingsRaw,\n  idaAccessionDB,\n  api,\n  count = 0,\n  showDBSelector = true,\n  showExporter = true,\n  search,\n  entryLocation,\n}: PropsIDAOptions) => {\n  const toggleDomainEntry = () => {\n    changeSettingsRaw(\n      'ui',\n      'idaAccessionDB',\n      idaAccessionDB === 'pfam' ? 'interpro' : 'pfam',\n    );\n  };\n\n  return (\n    <nav className={css('options-panel')}>\n      {showDBSelector && (\n        <div className={css('accession-selector-panel')}>\n          <label>\n            Database:{' '}\n            <Tooltip title=\"Switch between domain architectures based on Pfam and InterPro entries\">\n              <ToggleSwitch\n                switchCond={idaAccessionDB === 'pfam'}\n                name={'accessionDB'}\n                id={'accessionDB-input'}\n                SRLabel={'Use accessions from'}\n                onValue={'Pfam'}\n                offValue={'InterPro'}\n                handleChange={toggleDomainEntry}\n                addAccessionStyle={true}\n              />\n            </Tooltip>\n          </label>\n        </div>\n      )}\n      {showExporter && (\n        <Exporter includeSettings={false}>\n          <div className={css('menu-grid')}>\n            <AllIDADownload count={count} fileType=\"json\" />\n            <AllIDADownload count={count} fileType=\"tsv\" />\n            {api && (\n              <ExternalExportButton\n                type={'api'}\n                url={toPublicAPI(getAPIURL(api, entryLocation, search))}\n              />\n            )}\n          </div>\n        </Exporter>\n      )}\n    </nav>\n  );\n};\n\nconst getAPIURL = (\n  { protocol, hostname, port, root }: ParsedURLServer,\n  entryLocation?: EndpointLocation,\n  search?: InterProLocationSearch,\n) => {\n  const description: InterProPartialDescription = {\n    main: { key: 'entry' },\n    entry: {\n      ...(entryLocation || {}),\n      detail: undefined,\n    },\n  };\n  return format({\n    protocol,\n    hostname,\n    port,\n    pathname: root + descriptionToPath(description),\n    query: entryLocation?.accession ? { ida: '' } : search,\n  });\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) =>\n    state.customLocation.description.entry as EndpointLocation,\n  (state: GlobalState) => state.customLocation.search,\n  (state: GlobalState) => state.settings.ui,\n  (api, entryLocation, search, { idaAccessionDB }) => ({\n    api,\n    entryLocation,\n    search,\n    idaAccessionDB,\n  }),\n);\n\nexport default connect(mapStateToProps, { changeSettingsRaw })(IDAOptions);\n","// extracted by mini-css-extract-plugin\nexport default {\"options-panel\":\"Options_style__options-panel___b5\",\"accession-selector-panel\":\"Options_style__accession-selector-panel___bb\"};","import React from 'react';\nimport Link from 'components/generic/Link';\n\nimport cssBinder from 'styles/cssBinder';\nimport local from './style.css';\n\nconst css = cssBinder(local);\n\nconst TextIDA = ({ accessions }: { accessions: Array<string> }) => (\n  <div style={{ display: 'flex' }}>\n    <div>\n      {accessions.map((accession, i) => (\n        <React.Fragment key={i}>\n          {i !== 0 && ' - '}\n          <span className={css('ida-text-domain')}>\n            <Link\n              to={{\n                description: {\n                  main: { key: 'entry' },\n                  entry: {\n                    db: accession.toLowerCase().startsWith('ipr')\n                      ? 'InterPro'\n                      : 'pfam',\n                    accession,\n                  },\n                },\n              }}\n            >\n              {' '}\n              {accession}\n            </Link>\n          </span>\n        </React.Fragment>\n      ))}\n    </div>\n  </div>\n);\n\nexport default TextIDA;\n","// extracted by mini-css-extract-plugin\nexport default {\"ida-text-domain\":\"TextIDA_style__ida-text-domain___ce\"};","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport Link from 'components/generic/Link';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\nimport Footer from 'components/Table/Footer';\nimport { edgeCases } from 'utils/server-message';\nimport EdgeCase from 'components/EdgeCase';\n\nimport IDAOptions from './Options';\nimport IDAProtVista from './IDAProtVista';\nimport TextIDA from './TextIDA';\nimport loadData from 'higherOrder/loadData/ts';\nimport loadable from 'higherOrder/loadable';\nimport { getUrlForMeta } from 'higherOrder/loadData/defaults';\n\nimport { toPlural } from 'utils/pages/toPlural';\n\nimport cssBinder from 'styles/cssBinder';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport pageStyle from './style.css';\nimport protvista from 'components/ProteinViewer/style.css';\n\nconst css = cssBinder(pageStyle, protvista, fonts);\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n\nconst FAKE_PROTEIN_LENGTH = 1000;\nconst GAP_BETWEEN_DOMAINS = 5;\n\nconst schemaProcessData = (data: { ida_id: string; ida: string }) => ({\n  '@id': '@additionalProperty',\n  '@type': 'PropertyValue',\n  name: 'isContainedIn',\n  value: [\n    {\n      '@type': 'CreativeWork',\n      additionalType: 'DomainArchitecture',\n      identifier: data.ida_id,\n      name: data.ida,\n    },\n  ],\n});\n\ntype Representative =\n  | {\n      domains: Array<{\n        name: string;\n        coordinates: {\n          fragments: {\n            start: number;\n            end: number;\n          }[];\n        }[];\n      }>;\n      length: number;\n    }\n  | undefined;\n\ntype ProcessedDomain = {\n  accession: string;\n  name: string;\n  unintegrated: boolean;\n  locations: Array<ProtVistaLocation>;\n};\nexport const ida2json = (\n  ida: string,\n  representative: Representative,\n  entry?: string,\n): {\n  length: number;\n  domains: Array<ProcessedDomain>;\n  accessions: Array<string>;\n} => {\n  const idaParts = ida.split('-');\n  const n = idaParts.length;\n  const feature = (FAKE_PROTEIN_LENGTH - GAP_BETWEEN_DOMAINS * (n + 1)) / n;\n  const repDomains = representative ? [...representative.domains] : [];\n  const domains = idaParts.map((p, i) => {\n    const [pf, ipr] = p.split(':');\n    let [namePf, nameIpr] = p.split(':');\n    let locations = [\n      {\n        fragments: [\n          {\n            start: GAP_BETWEEN_DOMAINS + i * (GAP_BETWEEN_DOMAINS + feature),\n            end: (i + 1) * (GAP_BETWEEN_DOMAINS + feature),\n          },\n        ],\n      },\n    ];\n    if (representative) {\n      const [pfLocation, iprLocation] = repDomains.splice(0, ipr ? 2 : 1);\n      if (pfLocation?.name) namePf = pfLocation.name;\n      if (iprLocation?.name) nameIpr = iprLocation.name;\n      locations =\n        entry === 'pfam'\n          ? pfLocation?.coordinates\n          : iprLocation?.coordinates || pfLocation?.coordinates;\n    }\n    return {\n      accession: entry === 'pfam' ? pf : ipr || pf,\n      name: entry === 'pfam' ? namePf : nameIpr || namePf,\n      unintegrated: !ipr,\n      locations,\n    } as ProcessedDomain;\n  });\n  const grouped = domains.reduce(\n    (obj, domain) => {\n      if (obj[domain.accession])\n        obj[domain.accession].locations.push(domain.locations[0]);\n      else\n        obj[domain.accession] = { ...domain, locations: [...domain.locations] };\n      return obj;\n    },\n    {} as Record<string, ProcessedDomain>,\n  );\n  const obj = {\n    length: representative?.length || FAKE_PROTEIN_LENGTH,\n    domains: Object.values(grouped),\n    accessions: domains.map((d) => d.accession),\n  };\n  return obj;\n};\n\nconst getMaxLength = (\n  idaResults: Array<{ representative?: { length: number } }>,\n) => {\n  const max = Math.max(\n    ...idaResults.map((result) => result?.representative?.length || 0),\n  );\n  return max === 0 ? FAKE_PROTEIN_LENGTH : 100 * Math.ceil(max / 100);\n};\n\ntype Props = {\n  mainAccession?: string;\n  search?: Record<string, string>;\n  highlight?: Array<string>;\n  idaAccessionDB?: string;\n  database: string;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<RootAPIPayload, 'DB'>,\n    LoadDataProps<IDAPayload> {}\n\nexport const DomainArchitecturesWithData = ({\n  data,\n  mainAccession,\n  search,\n  dataDB,\n  highlight = [],\n  idaAccessionDB,\n  database,\n}: LoadedProps) => {\n  const { loading, payload, status } = data || {};\n  if (loading || dataDB?.loading) return <Loading />;\n  const edgeCaseText = edgeCases.get(status || 0);\n  if (edgeCaseText)\n    return <EdgeCase text={edgeCaseText} status={status || 0} />;\n\n  if (!payload?.results) return null;\n  const toHighlight =\n    highlight.length === 0 && mainAccession ? [mainAccession] : highlight;\n\n  let messageContent;\n  if (payload.count === 0) {\n    messageContent = (\n      <Callout type=\"warning\">\n        No domain architectures found. Domain architectures are determined for\n        Pfam entries, and InterPro entries that integrate Pfam entries.\n      </Callout>\n    );\n  } else {\n    messageContent = <h4>{payload.count} domain architectures</h4>;\n  }\n  const maxLength = getMaxLength(payload.results || []);\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      {messageContent}\n      <IDAOptions showDBSelector={!database} count={payload.count} />\n      {(payload.results || []).map((obj) => {\n        const currentDB = (database || idaAccessionDB || '').toLowerCase();\n        const idaObj = ida2json(obj.ida, obj.representative, currentDB);\n        const representativeAcc = obj?.representative?.accession;\n        return (\n          <div key={obj.ida_id} className={css('margin-bottom-large')}>\n            <SchemaOrgData data={obj} processData={schemaProcessData} />\n            <div>\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'protein' },\n                    protein: { db: 'UniProt' },\n                    entry: {\n                      db: database || idaAccessionDB,\n                      accession: mainAccession,\n                    },\n                  },\n                  search: { ida: obj.ida_id },\n                }}\n              >\n                There {obj.unique_proteins > 1 ? 'are' : 'is'}{' '}\n                {obj.unique_proteins} {toPlural('protein', obj.unique_proteins)}{' '}\n              </Link>\n              with this architecture\n              {representativeAcc && (\n                <>\n                  {' '}\n                  (represented by{' '}\n                  <Link\n                    to={{\n                      description: {\n                        main: { key: 'protein' },\n                        protein: {\n                          db: 'uniprot',\n                          accession: representativeAcc,\n                        },\n                      },\n                    }}\n                  >\n                    {representativeAcc}\n                  </Link>\n                  )\n                </>\n              )}\n              :\n            </div>\n            <TextIDA accessions={idaObj.accessions} />\n            <IDAProtVista\n              matches={idaObj.domains}\n              length={idaObj.length}\n              maxLength={maxLength}\n              databases={dataDB?.payload?.databases || {}}\n              highlight={toHighlight}\n            />\n          </div>\n        );\n      })}\n      <Footer\n        withPageSizeSelector={true}\n        actualSize={payload.count}\n        pagination={search || {}}\n        nextAPICall={payload.next}\n        previousAPICall={payload.previous}\n        notFound={false}\n      />\n    </div>\n  );\n};\n\nconst getUrlFor = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search,\n  ({ protocol, hostname, port, root }, description, search) => {\n    // omit from search\n    const { type, search: _, ..._search } = search;\n    // add to search\n    _search.ida = '';\n    // build URL\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname:\n        root +\n        descriptionToPath(description).replace('domain_architecture', ''),\n      query: _search,\n    });\n  },\n);\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) =>\n    state.customLocation.description.main.key &&\n    state.customLocation.description[\n      state.customLocation.description.main.key as Endpoint\n    ].accession,\n  (state: GlobalState) => state.customLocation.search,\n  (state: GlobalState) => state.settings.ui,\n  (mainAccession, search, { idaAccessionDB }) => ({\n    mainAccession,\n    search,\n    idaAccessionDB,\n  }),\n);\n\nexport default loadData<RootAPIPayload, 'DB'>({\n  getUrl: getUrlForMeta,\n  propNamespace: 'DB',\n})(\n  loadData({\n    getUrl: getUrlFor,\n    mapStateToProps,\n  } as LoadDataParameters)(DomainArchitecturesWithData),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"svgContainer\":\"DomainArchitectures_style__svgContainer___a2\",\"svg\":\"DomainArchitectures_style__svg___ae\",\"guidelines\":\"DomainArchitectures_style__guidelines___f5\",\"highlight\":\"DomainArchitectures_style__highlight___ee\",\"ida-protvista\":\"DomainArchitectures_style__ida-protvista___e2\",\"track-component\":\"DomainArchitectures_style__track-component___f7\",\"track-placehoder\":\"DomainArchitectures_style__track-placehoder___f2\",\"track-accession\":\"DomainArchitectures_style__track-accession___bc\"};","import React, { useState, useEffect } from 'react';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport local from './style.css';\n\nconst css = cssBinder(fonts, local);\n\ntype Props = {\n  name?: string;\n  id: string;\n  size?: 'large' | 'small' | 'tiny';\n  switchCond: boolean;\n  disabled?: boolean;\n  label?: string;\n  SRLabel?: string;\n  onValue?: string;\n  offValue?: string;\n  handleChange?: (evt?: React.ChangeEvent) => void;\n  addAccessionStyle?: boolean;\n  width?: string;\n};\n\nconst ToggleSwitch = ({\n  name = 'switch',\n  id,\n  size = 'large',\n  switchCond,\n  disabled = false,\n  label,\n  SRLabel,\n  onValue = 'On',\n  offValue = 'Off',\n  handleChange,\n  addAccessionStyle = false,\n  width,\n}: Props) => {\n  const [isOn, setIsOn] = useState(switchCond);\n  useEffect(() => {\n    setIsOn(switchCond);\n  }, [switchCond]);\n  const onInputChange = (evt?: React.ChangeEvent) => {\n    if (handleChange) {\n      handleChange(evt);\n    } else {\n      setIsOn(!isOn);\n    }\n  };\n  const paddleStyle = width ? { width } : {};\n  return (\n    <div className={css('new-switch', size)}>\n      <label htmlFor={id}>\n        <input\n          type=\"checkbox\"\n          checked={isOn}\n          className={css('switch-input')}\n          name={name}\n          id={id}\n          onChange={onInputChange}\n          disabled={disabled}\n        />\n        {label}\n        <label\n          className={css(\n            'switch-paddle',\n            addAccessionStyle ? 'accession-selector' : '',\n            disabled ? 'disabled' : '',\n          )}\n          style={{ ...paddleStyle }}\n          htmlFor={id}\n        >\n          {SRLabel ? (\n            <span className={css('show-for-sr')}>{SRLabel}:</span>\n          ) : null}\n          <span className={css('switch-active')} aria-hidden=\"true\">\n            {onValue}\n          </span>\n          <span className={css('switch-inactive')} aria-hidden=\"true\">\n            {offValue}\n          </span>\n        </label>\n      </label>\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n","// extracted by mini-css-extract-plugin\nexport default {\"new-switch\":\"ToggleSwitch_style__new-switch___f6\",\"switch-input\":\"ToggleSwitch_style__switch-input___b8\",\"switch-paddle\":\"ToggleSwitch_style__switch-paddle___c6\",\"switch-active\":\"ToggleSwitch_style__switch-active___d8\",\"switch-inactive\":\"ToggleSwitch_style__switch-inactive___d2\",\"tiny\":\"ToggleSwitch_style__tiny___a1\",\"small\":\"ToggleSwitch_style__small___d3\",\"large\":\"ToggleSwitch_style__large___e1\",\"disabled\":\"ToggleSwitch_style__disabled___fa\",\"accession-selector\":\"ToggleSwitch_style__accession-selector___cc\"};","import React from 'react';\nimport File from 'components/File';\nimport { SupportedExtensions } from 'components/File/FileButton';\n\ntype Props = {\n  description: InterProDescription;\n  count: number;\n  ida: string;\n  fileType: SupportedExtensions;\n  db: string;\n};\n\nconst AllProteinDownload = ({\n  description,\n  count,\n  ida,\n  fileType,\n  db,\n}: Props) => (\n  <File\n    fileType={fileType}\n    name={`protein-similar-to-${\n      description[description.main.key as Endpoint].accession\n    }.${fileType}`}\n    count={count}\n    customLocationDescription={{\n      main: { key: 'protein' },\n      protein: { db: db },\n    }}\n    search={{ ida }}\n    endpoint=\"protein\"\n  />\n);\n\nexport default AllProteinDownload;\n","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\n// $FlowFixMe\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport loadable from 'higherOrder/loadable';\nimport loadData from 'higherOrder/loadData/ts';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Link from 'components/generic/Link';\nimport Table, { Column, PageSizeSelector, Exporter } from 'components/Table';\n\nimport AllProteinDownload from './AllProteinDownload';\nimport ExternalExportButton from 'components/Table/Exporter/ExternalExportButton';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport allProteinsButtons from './AllProteinDownload/style.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport fileStyle from 'components/File/FileButton/style.css';\nimport exporterStyle from 'components/Table/Exporter/style.css';\nimport ipro from 'styles/interpro-vf.css';\n\nconst css = cssBinder(\n  ipro,\n  fonts,\n  allProteinsButtons,\n  exporterStyle,\n  fileStyle,\n);\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n\nconst schemaProcessData = (\n  data: Array<{ metadata: { source_database: string; accession: string } }>,\n) => {\n  return {\n    '@id': '@additionalProperty',\n    '@type': 'PropertyValue',\n    name: 'SimilarProteins',\n    value: data.map(\n      (p) =>\n        `https://www.ebi.ac.uk/interpro/protein/${p.metadata.source_database}/${p.metadata.accession}/`,\n    ),\n  };\n};\n\nconst getAPIURLForSimilarProteins = (\n  { protocol, hostname, port, root }: ParsedURLServer,\n  ida: string,\n  db: string,\n) =>\n  format({\n    protocol,\n    hostname,\n    port,\n    pathname:\n      root +\n      descriptionToPath({\n        main: { key: 'protein' },\n        protein: { db: db },\n      }),\n    query: { ida },\n  });\n\ntype Props = {\n  db: string;\n  ida: string;\n  search?: Record<string, string>;\n  description?: InterProDescription;\n  api?: ParsedURLServer;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<PayloadList<ProteinMetadata>, 'IDA'> {}\n\nconst SimilarProteinTable = ({\n  dataIDA,\n  isStaleIDA,\n  db,\n  ida,\n  description,\n  search,\n  api,\n}: LoadedProps) => {\n  const { loading, payload, url } = dataIDA || {};\n  if (loading || !payload) return <Loading />;\n  if (!description || !api) return null;\n  return (\n    <>\n      <SchemaOrgData data={payload.results} processData={schemaProcessData} />\n      <Table\n        dataTable={payload.results}\n        actualSize={payload.count}\n        query={search}\n        isStale={isStaleIDA}\n        currentAPICall={url}\n        nextAPICall={payload.next}\n        previousAPICall={payload.previous}\n        notFound={payload.results.length === 0}\n      >\n        <PageSizeSelector />\n        <Exporter>\n          <div className={css('menu-grid')}>\n            <AllProteinDownload\n              description={description}\n              ida={ida}\n              db={db}\n              count={payload.count}\n              fileType=\"fasta\"\n            />\n            <AllProteinDownload\n              description={description}\n              ida={ida}\n              db={db}\n              count={payload.count}\n              fileType=\"json\"\n            />\n            <AllProteinDownload\n              description={description}\n              ida={ida}\n              db={db}\n              count={payload.count}\n              fileType=\"tsv\"\n            />\n            <ExternalExportButton\n              type={'api'}\n              url={getAPIURLForSimilarProteins(api, ida, db)}\n            />\n            <ExternalExportButton\n              search={search}\n              type={'scriptgen'}\n              subpath={descriptionToPath(description)}\n            />\n          </div>\n        </Exporter>\n\n        <Column\n          dataKey=\"accession\"\n          renderer={(\n            acc: string,\n            { source_database: sourceDatabase }: ProteinMetadata,\n          ) => (\n            <>\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'protein' },\n                    protein: { db: sourceDatabase, accession: acc },\n                  } as InterProPartialDescription,\n                }}\n              >\n                {acc}\n              </Link>{' '}\n              {sourceDatabase === 'reviewed' && (\n                <Tooltip title=\"Reviewed by UniProtKB curators\">\n                  <span\n                    className={css('icon', 'icon-common')}\n                    data-icon=\"&#xf2f0;\"\n                    aria-label=\"reviewed\"\n                  />\n                </Tooltip>\n              )}\n            </>\n          )}\n        >\n          Accession\n        </Column>\n        <Column\n          dataKey=\"name\"\n          renderer={(name: string, { accession }: ProteinMetadata) => (\n            <Link\n              to={{\n                description: {\n                  main: { key: 'protein' },\n                  protein: { db: 'uniprot', accession },\n                } as InterProPartialDescription,\n              }}\n            >\n              {name}\n            </Link>\n          )}\n        >\n          Name\n        </Column>\n        <Column\n          dataKey=\"source_organism\"\n          renderer={(sourceOrganism: SourceOrganism) =>\n            sourceOrganism.taxId ? (\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'taxonomy' },\n                    taxonomy: {\n                      db: 'uniprot',\n                      accession: `${sourceOrganism.taxId}`,\n                    } as InterProPartialDescription,\n                  },\n                }}\n              >\n                {sourceOrganism.fullName}\n              </Link>\n            ) : (\n              String(sourceOrganism)\n            )\n          }\n        >\n          Organism\n        </Column>\n        <Column dataKey=\"length\">Length</Column>\n        <Column dataKey=\"gene\">Gene</Column>\n        <Column\n          dataKey=\"in_alphafold\"\n          renderer={(inAlphafold: boolean, { accession }: ProteinMetadata) =>\n            inAlphafold ? (\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'protein' },\n                    protein: { db: 'uniprot', accession, detail: 'alphafold' },\n                  } as InterProPartialDescription,\n                }}\n              >\n                AlphaFold\n              </Link>\n            ) : null\n          }\n        >\n          Predicted structure\n        </Column>\n      </Table>\n    </>\n  );\n};\n\nconst mapStateToPropsForIDA = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.search,\n  (_: GlobalState, props: Props) => props.ida,\n  (_: GlobalState, props: Props) => props.db,\n  ({ protocol, hostname, port, root }, search, ida, db) => {\n    // omit elements from search\n    const { type, search: _, ...restOfSearch } = search;\n\n    // modify search\n    restOfSearch.ida = ida;\n\n    const description: InterProPartialDescription = {\n      main: { key: 'protein' },\n      protein: { db: db },\n    };\n    // build URL\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(description),\n      query: restOfSearch,\n    });\n  },\n);\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.search,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.settings.api,\n  (search, description, api) => ({ search, description, api }),\n);\n\nexport default loadData<PayloadList<ProteinMetadata>, 'IDA'>({\n  getUrl: mapStateToPropsForIDA,\n  propNamespace: 'IDA',\n  mapStateToProps,\n} as LoadDataParameters)(SimilarProteinTable);\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport loadData from 'higherOrder/loadData/ts';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport { ida2json } from 'components/Entry/DomainArchitectures';\nimport IDAProtVista from 'components/Entry/DomainArchitectures/IDAProtVista';\nimport IDAOptions from 'components/Entry/DomainArchitectures/Options';\nimport TextIDA from 'components/Entry/DomainArchitectures/TextIDA';\n\nconst FAKE_PROTEIN_LENGTH = 1000;\n\ntype DomainsPayload = PayloadList<{\n  metadata: EntryMetadata;\n  proteins: Array<EntryProteinMatch>;\n  extra_fields?: { short_name?: string };\n}>;\n\nconst formatDomainsPayload = (payload: DomainsPayload, ida: string) => {\n  const namesMap: Record<string, string> = {};\n  payload.results.forEach((result) => {\n    if (result.metadata.source_database.toLowerCase() === 'interpro') {\n      const acc = result.metadata.accession;\n      namesMap[acc.toLowerCase()] = result?.extra_fields?.short_name || acc;\n    }\n  });\n\n  const domainsMap: Record<string, ProtVistaLocation[]> = {};\n  payload.results.forEach((result) => {\n    if (result.metadata.source_database.toLowerCase() === 'pfam') {\n      const acc = result.metadata.accession;\n      namesMap[acc.toLowerCase()] = result?.extra_fields?.short_name || acc;\n\n      domainsMap[acc.toLowerCase()] = [\n        ...result.proteins[0].entry_protein_locations,\n      ];\n\n      if (result.metadata.integrated) {\n        domainsMap[result.metadata.integrated.toLowerCase()] = [\n          ...result.proteins[0].entry_protein_locations,\n        ];\n      }\n    }\n  });\n  const domains: Array<{\n    entry: string;\n    name: string;\n    coordinates: ProtVistaLocation[];\n  }> = [];\n  ida.split(/[:-]/).forEach((domain) => {\n    domains.push({\n      entry: domain.toUpperCase(),\n      coordinates: domainsMap[domain.toLowerCase()].splice(0, 1),\n      name: namesMap[domain.toLowerCase()] || domain,\n    });\n  });\n  return {\n    accession: payload.results?.[0]?.proteins?.[0]?.accession,\n    length: payload.results?.[0]?.proteins?.[0]?.protein_length,\n    domains,\n  };\n};\n\ntype Props = {\n  accession: string;\n  idaAccessionDB?: string;\n  databases: DBsInfo;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<{ ida: string }>,\n    LoadDataProps<DomainsPayload, 'Domain'> {}\n\nconst SimilarProteinsHeaderWithData = ({\n  accession,\n  data,\n  dataDomain,\n  databases,\n  idaAccessionDB,\n}: LoadedProps) => {\n  const { payload, loading } = data || {};\n  const { payload: payloadDomain, loading: loadingDomain } = dataDomain || {};\n\n  if (loading || loadingDomain) return <Loading />;\n  if (!payload || !payloadDomain) return null;\n  const representative = formatDomainsPayload(payloadDomain, payload.ida);\n  if (!representative) return null;\n  const idaObj = ida2json(payload.ida, representative, idaAccessionDB);\n  return (\n    <div>\n      <header>\n        All proteins featured on this page exhibit the same domain architecture\n        as the protein identified by the accession <b>{accession}</b>.\n        <IDAOptions showExporter={false} />\n      </header>\n      <TextIDA accessions={idaObj.accessions} />\n      <IDAProtVista\n        matches={idaObj.domains}\n        length={idaObj?.length || FAKE_PROTEIN_LENGTH}\n        maxLength={idaObj?.length || FAKE_PROTEIN_LENGTH}\n        databases={databases}\n      />\n      <br />\n    </div>\n  );\n};\n\nconst getUrlForIDA = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search,\n  ({ protocol, hostname, port, root }, description, search) => {\n    // omit from search\n    const { type, search: _, ..._search } = search;\n    // add to search\n    _search.ida = '';\n    // build URL\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname:\n        root + descriptionToPath(description).replace('/similar_proteins', ''),\n      query: _search,\n    });\n  },\n);\nconst getUrlForDomains = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search,\n  ({ protocol, hostname, port, root }, description) => {\n    const newDescription: InterProPartialDescription = {\n      main: { key: 'entry' },\n      entry: { db: 'all' },\n      protein: {\n        accession: description.protein.accession,\n        db: 'uniprot',\n        isFilter: true,\n      },\n    };\n\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDescription),\n      query: {\n        extra_fields: 'short_name',\n        page_size: 100,\n      },\n    });\n  },\n);\n\nconst mapStateToPropsAccessionDB = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  ({ idaAccessionDB }) => ({\n    idaAccessionDB,\n  }),\n);\n\nexport default loadData<DomainsPayload, 'Domain'>({\n  getUrl: getUrlForDomains,\n  propNamespace: 'Domain',\n} as LoadDataParameters)(\n  loadData({\n    getUrl: getUrlForIDA,\n    mapStateToProps: mapStateToPropsAccessionDB,\n  } as LoadDataParameters)(React.memo(SimilarProteinsHeaderWithData)),\n);\n","import React, { useState } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport ToggleSwitch from 'components/ToggleSwitch';\n\nimport SimilarProteinsTable from './Table';\nimport SimilarProteinsHeader from './Header';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport localStyle from './style.css';\n\nconst css = cssBinder(localStyle);\n\ntype Props = {\n  data: RequestedData<{ metadata: ProteinMetadata }>;\n  dataBase: RequestedData<RootAPIPayload>;\n  proteinAccession?: string | null;\n};\n\nconst SimilarProteins = ({\n  data: { loading, payload },\n  dataBase,\n  proteinAccession,\n}: Props) => {\n  const { ida_accession: ida } = payload?.metadata || {};\n  const [similarProtDb, setSimilarProtDb] = useState('uniprot');\n  if (loading) return <Loading />;\n\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      <SimilarProteinsHeader\n        accession={proteinAccession || ''}\n        databases={(dataBase.payload && dataBase.payload.databases) || {}}\n      />\n\n      <div className={css('similar-proteins-selector-panel')}>\n        <p>The table below lists similar proteins from</p>\n        <Tooltip title=\"Switch to view similar proteins from UniProt or Reviewed databases\">\n          <ToggleSwitch\n            switchCond={similarProtDb === 'uniprot'}\n            name={'proteinDB'}\n            id={'proteinDB-input'}\n            SRLabel={'View proteins from'}\n            onValue={'UniProtKB'}\n            offValue={'Reviewed (Swiss-Prot)'}\n            handleChange={() =>\n              setSimilarProtDb(\n                similarProtDb === 'uniprot' ? 'reviewed' : 'uniprot',\n              )\n            }\n            addAccessionStyle={true}\n            width=\"14rem\"\n          />\n        </Tooltip>\n      </div>\n\n      <SimilarProteinsTable ida={ida || ''} db={similarProtDb} />\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (proteinAccession) => ({ proteinAccession }),\n);\n\nexport default connect(mapStateToProps)(SimilarProteins);\n","// extracted by mini-css-extract-plugin\nexport default {\"accession-selector-panel\":\"SimilarProteins_style__accession-selector-panel___f0\",\"similar-proteins-selector-panel\":\"SimilarProteins_style__similar-proteins-selector-panel___f4\"};"],"names":["getUrlFor","createSelector","state","settings","api","_","props","_ref2","protocol","hostname","port","root","shouldLoad","description","main","key","type","accession","db","source","format","pathname","descriptionToPath","DataProvider","loadData","_ref","data","onLoad","databases","locations","useEffect","loading","payload","metadata","name","source_database","React","EntryPopup","dbName","_ref3","children","setShouldLoad","useState","message","setMessage","currentLocation","setCurrentLocation","TooltipForTrack","onMouseOverFeature","css","cssBinder","protvista","matches","length","maxLength","highlight","width","className","map","d","i","indexOf","style","DynamicTooltip","toLowerCase","startsWith","NightingaleInterProTrack","shape","expanded","height","color","getTrackColor","EntryColorMode","ACCESSION","Link","to","entry","NumberComponent","noTitle","mapStateToProps","customLocation","search","entryLocation","connect","fileType","count","File","customLocationDescription","Object","assign","detail","undefined","ida","endpoint","exporterStyle","getAPIURL","query","ui","idaAccessionDB","changeSettingsRaw","showDBSelector","showExporter","Tooltip","title","ToggleSwitch","switchCond","id","SRLabel","onValue","offValue","handleChange","toggleDomainEntry","addAccessionStyle","Exporter","includeSettings","AllIDADownload","ExternalExportButton","url","toPublicAPI","accessions","display","fonts","SchemaOrgData","loadable","loader","FAKE_PROTEIN_LENGTH","schemaProcessData","value","additionalType","identifier","ida_id","ida2json","representative","idaParts","split","n","feature","repDomains","domains","p","pf","ipr","namePf","nameIpr","fragments","start","end","pfLocation","iprLocation","splice","coordinates","unintegrated","grouped","reduce","obj","domain","push","values","DomainArchitecturesWithData","mainAccession","dataDB","database","status","Loading","edgeCaseText","edgeCases","get","EdgeCase","text","results","messageContent","toHighlight","Callout","idaResults","max","Math","result","_a","ceil","IDAOptions","currentDB","idaObj","representativeAcc","processData","protein","unique_proteins","toPlural","TextIDA","IDAProtVista","_b","Footer","withPageSizeSelector","actualSize","pagination","nextAPICall","next","previousAPICall","previous","notFound","_search","__rest","replace","getUrl","getUrlForMeta","propNamespace","size","disabled","label","isOn","setIsOn","paddleStyle","htmlFor","checked","onChange","evt","ipro","fileStyle","getAPIURLForSimilarProteins","mapStateToPropsForIDA","_ref6","restOfSearch","dataIDA","isStaleIDA","Table","dataTable","isStale","currentAPICall","PageSizeSelector","AllProteinDownload","subpath","Column","dataKey","renderer","acc","sourceDatabase","_ref4","sourceOrganism","taxId","taxonomy","fullName","String","inAlphafold","_ref5","SimilarProteinsHeaderWithData","dataDomain","payloadDomain","loadingDomain","formatDomainsPayload","namesMap","forEach","extra_fields","short_name","domainsMap","proteins","entry_protein_locations","integrated","toUpperCase","_d","_c","_h","_g","_f","_e","protein_length","getUrlForIDA","getUrlForDomains","newDescription","isFilter","page_size","mapStateToPropsAccessionDB","proteinAccession","dataBase","ida_accession","similarProtDb","setSimilarProtDb","SimilarProteinsHeader","SimilarProteinsTable"],"sourceRoot":""}