{"version":3,"file":"js/7717.module.jobs-page.bc7.js","mappings":"0TAiBMA,GAAMC,EAAAA,EAAAA,KAENC,GAAeC,EAAAA,EAAAA,GAAS,CAC5BC,OAAQA,IACN,sFACFC,SAAS,IAGLC,GAAkBH,EAAAA,EAAAA,GAAS,CAC/BC,OAAQA,IACN,uFAGFC,SAAS,IAGLE,GAAeJ,EAAAA,EAAAA,GAAS,CAC5BC,OAAQA,IACN,yDACFC,SAAS,IAGLG,GAAkBL,EAAAA,EAAAA,GAAS,CAC/BC,OAAQA,IACN,mEAGFC,SAAS,IAGLI,GAAeN,EAAAA,EAAAA,GAAS,CAC5BC,OAAQA,IACN,yDACFC,SAAS,IAGLK,GAAgBP,EAAAA,EAAAA,GAAS,CAC7BC,OAAQA,IAAM,gCACdC,QAASA,IAAM,OAGXM,EAAmBA,IACvBC,EAAAA,cAACC,EAAAA,EAAQ,CACPC,GAAI,CACFC,YAAa,CACXC,KAAM,CAAEC,IAAK,UACbC,OAAQ,CAAEC,KAAM,oBAMlBC,EAAwBC,GAC5BA,EAAeN,YAAYG,OAAOI,IAC9BC,EAA6BF,GACjCA,EAAeN,YAAYG,OAAOM,UAoB9BC,GAAcC,EAAAA,EAAAA,KACjBC,GAAuBA,EAAMC,OAC7BA,IAAI,CAAQA,WAETC,GAA0CC,EAAAA,EAAAA,IAAQL,EAARK,EAtBEC,I,IAAA,KAChDH,GAAIG,EACDC,E,yUAAKC,CAAAF,EAFwC,UAOhD,OAAKH,EAEHhB,EAAAA,cAACsB,EAAAA,EAAMC,OAAAC,OAAA,GACDJ,EAAK,CACTK,iBAAkBd,EAClBe,WAAYhC,EACZiC,SAAUhC,KANIK,EAAAA,cAAC4B,EAAAA,EAAO,KAOtB,IAyBAC,EAAoBpB,GACxBA,EAAeqB,KAEXC,EAAiB,IAAIC,IAAI,CAAC,CAAC,MAAOnC,KAgBlCoC,EAAS,IAAID,IAAI,CACrB,CAAC,eAjC8BZ,GAC/BpB,EAAAA,cAACkC,EAAO,KACNlC,EAAAA,cAACmC,EAAAA,EAAa,KACZnC,EAAAA,cAACsB,EAAAA,EAAMC,OAAAC,OAAA,GACDJ,EAAK,CACTK,iBAAkBjB,EAClBkB,WAAYpC,EACZqC,SAAUV,QA2BhB,CAAC,WAhBeG,GAChBpB,EAAAA,cAACkC,EAAO,KACNlC,EAAAA,cAACmC,EAAAA,EAAa,KACZnC,EAAAA,cAACsB,EAAAA,EAAMC,OAAAC,OAAA,GACDJ,EAAK,CACTK,iBAAkBI,EAClBH,WAAY9B,EACZwC,YAAaL,EACbJ,SAAU/B,UAWZsC,EAAUG,IAAoC,IAAnC,SAAEC,GAA6BD,EAC9C,OACErC,EAAAA,cAAA,OAAKuC,UAAWnD,EAAI,WAAY,kBAC9BY,EAAAA,cAACF,EAAa,CACZ0C,KAAM,CACJC,KAAM,qBACNtC,YACE,2DACFuC,SAAUC,OAAOD,UAEnBE,YAAaC,EAAAA,KAEf7C,EAAAA,cAAA,OAAKuC,UAAWnD,EAAI,OAAQ,iBAC1BY,EAAAA,cAAA,OAAKuC,UAAWnD,EAAI,aAAc,cAChCY,EAAAA,cAACmC,EAAAA,EAAa,KAAEG,GAAY,MAG5B,EAIJQ,EAAmBrC,GACvBA,EAAeN,YAAYG,OAAOC,KAepC,QAbawC,IACX/C,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACgD,EAAAA,GAAM,KACLhD,EAAAA,cAAA,yBAEFA,EAAAA,cAACsB,EAAAA,EAAM,CACLG,iBAAkBqB,EAClBpB,WAAY3B,EACZqC,YAAaH,I","sources":["webpack://interpro7-client/./src/pages/Jobs/index.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Helmet } from 'react-helmet-async';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Switch from 'components/generic/Switch';\nimport Redirect from 'components/generic/Redirect';\n\nimport ErrorBoundary from 'wrappers/ErrorBoundary';\n\nimport loadable from 'higherOrder/loadable';\nimport { schemaProcessDataWebPage } from 'schema_org/processors';\n\nimport cssBinder from 'styles/cssBinder';\n\nconst css = cssBinder();\n\nconst IPScanStatus = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"ipscan-status\" */ 'components/IPScan/Status'),\n  loading: false,\n});\n\nconst IPScanJobStatus = loadable({\n  loader: () =>\n    import(\n      /* webpackChunkName: \"ipscan-status\" */ 'components/IPScan/Status/SequenceList'\n    ),\n  loading: false,\n});\n\nconst IPScanResult = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"sequence-page\" */ 'pages/Sequence'),\n  loading: false,\n});\n\nconst DownloadSummary = loadable({\n  loader: () =>\n    import(\n      /* webpackChunkName: \"download-summary\" */ 'components/Download/Summary'\n    ),\n  loading: false,\n});\n\nconst DownloadForm = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"download-form\" */ 'components/DownloadForm'),\n  loading: false,\n});\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n\nconst RedirectToIPScan = () => (\n  <Redirect\n    to={{\n      description: {\n        main: { key: 'result' },\n        result: { type: 'InterProScan' },\n      },\n    }}\n  />\n);\n\nconst jobAccessionSelector = (customLocation: InterProLocation) =>\n  customLocation.description.result.job;\nconst sequenceAccessionSelector = (customLocation: InterProLocation) =>\n  customLocation.description.result.accession;\n\nconst _IPScanResultSafeGuardIfNotRehydratedYet = ({\n  jobs,\n  ...props\n}: {\n  jobs: JobsState;\n  [p: string]: unknown;\n}) => {\n  if (!jobs) return <Loading />;\n  return (\n    <Switch\n      {...props}\n      locationSelector={sequenceAccessionSelector}\n      indexRoute={IPScanJobStatus}\n      catchAll={IPScanResult}\n    />\n  );\n};\n\nconst jobSelector = createSelector(\n  (state: GlobalState) => state.jobs,\n  (jobs) => ({ jobs }),\n);\nconst IPScanResultSafeGuardIfNotRehydratedYet = connect(jobSelector)(\n  _IPScanResultSafeGuardIfNotRehydratedYet,\n);\n\nconst InterProScanInnerSwitch = (props: Record<string, unknown>) => (\n  <Wrapper>\n    <ErrorBoundary>\n      <Switch\n        {...props}\n        locationSelector={jobAccessionSelector}\n        indexRoute={IPScanStatus}\n        catchAll={IPScanResultSafeGuardIfNotRehydratedYet}\n      />\n    </ErrorBoundary>\n  </Wrapper>\n);\n\nconst downloadSelector = (customLocation: InterProLocation) =>\n  customLocation.hash;\n\nconst downloadRoutes = new Map([[/^\\//, DownloadForm]]);\n\nconst Download = (props: Record<string, unknown>) => (\n  <Wrapper>\n    <ErrorBoundary>\n      <Switch\n        {...props}\n        locationSelector={downloadSelector}\n        indexRoute={DownloadSummary}\n        childRoutes={downloadRoutes}\n        catchAll={DownloadSummary}\n      />\n    </ErrorBoundary>\n  </Wrapper>\n);\n\nconst routes = new Map([\n  ['InterProScan', InterProScanInnerSwitch],\n  ['download', Download],\n]);\n\nconst Wrapper = ({ children }: PropsWithChildren) => {\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      <SchemaOrgData\n        data={{\n          name: 'InterPro Jobs Page',\n          description:\n            'The webpage were the result of job requests can be found',\n          location: window.location,\n        }}\n        processData={schemaProcessDataWebPage}\n      />\n      <div className={css('tabs', 'tabs-content')}>\n        <div className={css('tabs-panel', 'is-active')}>\n          <ErrorBoundary>{children || ''}</ErrorBoundary>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst jobTypeSelector = (customLocation: InterProLocation) =>\n  customLocation.description.result.type;\n\nconst Jobs = () => (\n  <>\n    <Helmet>\n      <title>Results</title>\n    </Helmet>\n    <Switch\n      locationSelector={jobTypeSelector}\n      indexRoute={RedirectToIPScan}\n      childRoutes={routes}\n    />\n  </>\n);\n\nexport default Jobs;\n"],"names":["css","cssBinder","IPScanStatus","loadable","loader","loading","IPScanJobStatus","IPScanResult","DownloadSummary","DownloadForm","SchemaOrgData","RedirectToIPScan","React","Redirect","to","description","main","key","result","type","jobAccessionSelector","customLocation","job","sequenceAccessionSelector","accession","jobSelector","createSelector","state","jobs","IPScanResultSafeGuardIfNotRehydratedYet","connect","_a","props","__rest","Switch","Object","assign","locationSelector","indexRoute","catchAll","Loading","downloadSelector","hash","downloadRoutes","Map","routes","Wrapper","ErrorBoundary","childRoutes","_ref","children","className","data","name","location","window","processData","schemaProcessDataWebPage","jobTypeSelector","Jobs","Helmet"],"sourceRoot":""}