{"version":3,"file":"js/5085.module.interpro-components.020.js","mappings":"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","sources":["webpack://interpro7-client/./node_modules/interpro-components/src/components/interpro-data-loader.js","webpack://interpro7-client/../src/lib/directive.ts","webpack://interpro7-client/../src/lib/dom.ts","webpack://interpro7-client/../src/lib/part.ts","webpack://interpro7-client/../src/lib/template.ts","webpack://interpro7-client/../src/lib/template-instance.ts","webpack://interpro7-client/../src/lib/template-result.ts","webpack://interpro7-client/../src/lib/parts.ts","webpack://interpro7-client/../src/lib/default-template-processor.ts","webpack://interpro7-client/../src/lib/template-factory.ts","webpack://interpro7-client/../src/lib/render.ts","webpack://interpro7-client/src/lit-html.ts","webpack://interpro7-client/./node_modules/interpro-components/src/components/interpro-type.js","webpack://interpro7-client/./node_modules/interpro-components/src/components/interpro-entry.js","webpack://interpro7-client/./node_modules/interpro-components/src/components/interpro-hierarchy.js","webpack://interpro7-client/./node_modules/interpro-components/src/components/index.js"],"sourcesContent":["const accessionPattern = /^IPR\\d{6}$/;\n\nconst accessionToUrl = (url => accession =>\n  url.replace('{accession}', accession))(\n  'https://wwwdev.ebi.ac.uk/interpro7/api/entry/InterPro/{accession}/',\n);\n\nclass InterproDataLoader extends HTMLElement {\n  static get is() {\n    return 'interpro-data-loader';\n  }\n\n  static get observedAttributes() {\n    return ['accession'];\n  }\n\n  static get dataLoaderElementName() {\n    return 'data-loader';\n  }\n\n  _render() {\n    const id = this.accession;\n    // Clean up the DOM\n    const sources = this.querySelectorAll('source');\n    for (const source of sources) {\n      source.parentElement.removeChild(source);\n    }\n    // If no ID, skip\n    if (!id) return;\n    // We have an ID, add or modify a data-loader element to fetch the data\n    const source = document.createElement('source');\n    source.src = accessionToUrl(id);\n    let dataLoader = this.querySelector(\n      InterproDataLoader.dataLoaderElementName,\n    );\n    // If no data loader yet, create and add it\n    if (!dataLoader) {\n      dataLoader = document.createElement(\n        InterproDataLoader.dataLoaderElementName,\n      );\n      dataLoader.appendChild(source);\n      this.appendChild(dataLoader);\n    } else {\n      dataLoader.appendChild(source);\n    }\n  }\n\n  _planRender() {\n    // If render is already planned, skip\n    if (this._plannedRender) return;\n    this._plannedRender = true;\n    requestAnimationFrame(() => {\n      this._plannedRender = false;\n      this._render();\n    });\n  }\n\n  // Getters/Setters\n  // entryid\n  get accession() {\n    return this._accession;\n  }\n\n  set accession(value) {\n    const _value = (value || '').trim().toUpperCase();\n    if (_value && !accessionPattern.test(_value)) {\n      throw new Error(`${value} is not a valid entry accession`);\n    }\n    this._accession = _value || null;\n    if (this._accession) {\n      this.setAttribute('accession', this.accession);\n      this._planRender();\n    } else {\n      this.removeAttribute('accession');\n    }\n  }\n\n  // Custom element reactions\n  constructor() {\n    super();\n    // set defaults\n    this._accession = null;\n  }\n\n  connectedCallback() {\n    this._planRender();\n  }\n\n  disconnectedCallback() {\n    this._plannedRender = false;\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[attributeName] = newValue;\n  }\n}\n\nexport default InterproDataLoader;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import { html, svg, render } from 'lit-html';\n\nexport const supportedTypes = new Map([\n  [\n    'family',\n    {\n      full: 'Family',\n      small: 'F',\n      // color: '#EC1D25',\n      color: '#ec7865',\n      colors: [\n        '#ec7865',\n        '#fb5d43',\n        'rgb(212, 24, 19)',\n      ] /*color icon - color text -?*/,\n    },\n  ],\n  [\n    'homologous superfamily',\n    {\n      full: 'Homologous Superfamily',\n      small: 'H',\n      // color: '#304CE3',\n      color: '#6caed4',\n      colors: ['#6caed4', '#5093ba', '#304CE3'],\n    },\n  ],\n  [\n    'domain',\n    {\n      full: 'Domain',\n      small: 'D',\n      // color: '#45B41A',\n      color: '#70c770',\n      colors: ['#70c770', 'rgb(80, 187, 48)', 'rgb(54, 163, 15)'],\n    },\n  ],\n  [\n    'repeat',\n    {\n      full: 'Repeat',\n      small: 'R',\n      // color: '#FF830A',\n      color: '#ffa970',\n      colors: ['#ffa970', '#efa55f', '#ff8511'],\n    },\n  ],\n  [\n    'site',\n    {\n      full: 'Site',\n      small: 'S',\n      // color: '#A336C6' '#d09ad0',\n      color: '#ce94ce',\n      colors: ['#ce94ce', '#bb71bb', '#a83cc9'],\n    },\n  ],\n  [\n    'active site',\n    {\n      full: 'Active Site',\n      small: 'S',\n      // color: '#A336C6',\n      color: '#ce94ce',\n      colors: ['#ce94ce', '#bb71bb', '#a83cc9'],\n    },\n  ],\n  [\n    'binding site',\n    {\n      full: 'Binding Site',\n      small: 'S',\n      // color: '#A336C6',\n      color: '#ce94ce',\n      colors: ['#ce94ce', '#bb71bb', '#a83cc9'],\n    },\n  ],\n  [\n    'conserved site',\n    {\n      full: 'Conserved Site',\n      small: 'S',\n      // color: '#A336C6',\n      color: '#ce94ce',\n      colors: ['#ce94ce', '#bb71bb', '#a83cc9'],\n    },\n  ],\n  [\n    'ptm',\n    {\n      full: 'PTM',\n      small: 'S',\n      // color: '#A336C6',\n      color: '#ce94ce',\n      colors: ['#ce94ce', '#bb71bb', '#a83cc9'],\n    },\n  ],\n  [\n    'unknown',\n    {\n      full: 'Unknown',\n      small: 'U',\n      color: '#D3C5BC',\n      colors: ['#737373', '#8c8c8c', '#737373'],\n    },\n  ],\n]);\n\nconst svgTemplate = (fillColor, small) => svg`\n  <rect\n    x=\"0\" y=\"0\"\n    width=\"60\" height=\"60\"          \n    fill=\"${fillColor}\"\n  />\n  <text\n    x=\"50%\" y=\"50%\"\n    text-anchor=\"middle\"\n    dx=\"0\" dy=\"18px\"\n    style=\"\n      fill: white;\n      font-size: 50px;\n      font-weight: 700;\n      font-family: 'Montserrat', 'arial', 'serif';\n    \"\n  >\n    ${small}\n  </text>\n`;\n\nconst typeTemplate = (\n  dimension,\n  expanded,\n  small,\n  full,\n  fillColor,\n  textColor,\n) => html`\n  <style>\n    .svg-container {\n      display: inline-flex;\n      align-items: center;\n    }\n  </style>\n  <span class=\"svg-container\">\n    <svg viewBox=\"0 0 60 60\" width=\"${dimension}\" height=\"${dimension}\">\n      ${svgTemplate(fillColor, small)}\n    </svg>\n    ${expanded\n      ? html`<span style=\"color: ${textColor}; padding-left: 0.5rem;\"\n          >${full}</span\n        >`\n      : ''}\n  </span>\n`;\n\nclass InterproType extends HTMLElement {\n  static get is() {\n    return 'interpro-type';\n  }\n\n  static get observedAttributes() {\n    return ['type', 'dimension', 'expanded'];\n  }\n\n  _handleLoadEvent(event) {\n    try {\n      this.type = event.detail.payload.metadata.type;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  _render() {\n    // If first render\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n    }\n    render(\n      typeTemplate(\n        this._dimension,\n        this.expanded,\n        this._type.small,\n        this._type.full,\n        this._type.colors[0],\n        this._type.colors[1],\n      ),\n      this.shadyRoot || this.shadowRoot,\n    );\n  }\n\n  // Getters/Setters\n  // type\n  get type() {\n    return this._type.type;\n  }\n\n  set type(value) {\n    // parse value\n    const _value = value.trim().toLowerCase();\n    // bail if same parsed value\n    if (_value === this._type.type) return;\n    // store new value\n    const descriptor = supportedTypes.get(_value);\n    if (!descriptor) {\n      console.log(this);\n      throw new Error(`${value} is not a supported type`);\n    }\n    this._type = Object.assign({ type: _value }, descriptor);\n    // mirror attribute\n    this.setAttribute('type', _value);\n    this.setAttribute('aria-label', `InterPro type: ${_value}`);\n    this._render();\n  }\n\n  // expanded\n  get expanded() {\n    return this._expanded;\n  }\n\n  set expanded(value) {\n    // parse value\n    const _value = typeof value !== 'undefined' && value !== null;\n    // bail if same parsed value\n    if (_value === this._expanded) return;\n    // store new value\n    this._expanded = value !== null;\n    // mirror attribute\n    if (this._expanded) {\n      this.setAttribute('expanded', '');\n    } else {\n      this.removeAttribute('expanded');\n    }\n    this._render();\n  }\n\n  // dimension\n  get dimension() {\n    return this._dimension;\n  }\n\n  set dimension(value) {\n    // bail if same parsed value\n    if (value === this._dimension) return;\n    // store new value\n    this._dimension = value;\n    // mirror attribute\n    if (value) this.setAttribute('dimension', value);\n    this._render();\n  }\n\n  // Custom element reactions\n  constructor() {\n    super();\n    // set defaults\n    this._type = supportedTypes.get('unknown');\n    this._expanded = false;\n    this._dimension =\n      this.getAttribute('dimension') ||\n      getComputedStyle(this).lineHeight ||\n      '0';\n    this._handleLoadEvent = this._handleLoadEvent.bind(this);\n    this._render = this._render.bind(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener('load', this._handleLoadEvent);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('load', this._handleLoadEvent);\n  }\n\n  attributeChangedCallback(attributeName, _, newValue) {\n    this[attributeName] = newValue;\n  }\n}\n\nexport default InterproType;\n","class InterproEntry extends HTMLElement {\n  static get is() {\n    return 'interpro-entry';\n  }\n\n  static get observedAttributes() {\n    return [\n      'accession',\n      'name',\n      'type',\n      'level',\n      'selected',\n      'haschildren',\n      'state',\n      'href',\n      'includeexpander',\n    ];\n  }\n\n  _handleLoadEvent(event) {\n    try {\n      this.accession = event.detail.payload.metadata.accession;\n      this.name = event.detail.payload.metadata.name.name;\n      this.type = event.detail.payload.metadata.type;\n      this._planRender();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  _collapseTree() {\n    for (const child of this.children) {\n      child.setAttribute('hidden', '');\n    }\n  }\n\n  _expandTree() {\n    for (const child of this.children) {\n      child.removeAttribute('hidden');\n    }\n  }\n\n  _handleStateChangeEvent(event) {\n    if (event.target.classList.contains('expander')) {\n      for (const child of this.parentElement.children) {\n        child.removeAttribute('hidden');\n      }\n      event.target.classList.remove('expander');\n      return;\n    }\n    switch (this._state) {\n      case 'collapsed':\n        this._expandTree();\n        this.setAttribute('state', 'expanded');\n        break;\n      case 'expanded':\n        this._collapseTree();\n        this.setAttribute('state', 'collapsed');\n        break;\n    }\n  }\n\n  _render() {\n    // If first render\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n    }\n    if (this.querySelectorAll('interpro-entry').length > 0)\n      this.setAttribute('haschildren', '');\n    for (const child of this.children) {\n      child.setAttribute('level', this._level + 1);\n    }\n    const shadowDom = this.shadyRoot || this.shadowRoot;\n    const link =\n      this._href || `https://www.ebi.ac.uk/interpro/entry/${this._accession}`;\n    // const content = this.innerHTML;\n    // this.innerHTML =\"\";\n\n    shadowDom.innerHTML = `\n      <style>\n        .link {\n          text-decoration: none;\n          color: #0070bb;\n        }\n        .link:hover {\n          color: #2199e8;\n        }\n        .entry-rel {\n          position:relative;\n          line-height: 1.6;\n          display: flex;         \n        }\n        .entry-rel small {\n          font-size: 80%;\n          color: #4b555b;\n          }\n        .entry-rel .active {font-weight:bold; color: #4b555b}\n        .entry-rel .active small {font-size:100%; color: #4b555b}\n        interpro-type {margin-right:0.5rem;}\n        .action-holder {      \n          width: 1em; \n          height: 1em; \n          visibility: hidden;\n          color: #999;\n          margin-right:0.5rem;\n          /*color: #222; #055d97*/\n        }\n        .action-holder:hover {\n          color: #058db7;            \n        }\n        .action-holder:after {\n          content: '';\n          font-weight: bold;\n          width: 1em;\n          text-align: center;\n          position: absolute;\n          cursor: pointer;\n          font-size: 130%;\n          top:-0.3em;\n        }\n        .has-children, .expander {\n          visibility: visible;\n          /*width: 1em;*/\n        }\n        .has-children::after {\n          content: '▾';\n        }\n        .expander::after {\n          content: '…';\n        }\n        :host(.tree-hidden) .has-children::after {content: '▸';}\n      </style>\n      <div style=\"display: block; /*Firefox*/\">\n        <div class=\"entry-rel\"  style=\"margin-left: ${this._level}rem;\">\n            <div class=\"action-holder \n                  ${this._haschildren ? 'has-children' : ''}\n                  ${this._includeexpander ? 'expander' : ''}\n                  \" \n             ></div>\n          <interpro-type type=\"${\n            this._type\n          }\" dimension=\"1.2em\"></interpro-type> \n          <span class=\" ${this._selected ? 'active' : 'normal'}\"\n          >\n              <a class=\"${this._selected ? '' : 'link'}\" ${\n      this._selected ? '' : `href=\"${link}\"`\n    }>\n                   ${this._name}\n               </a> <small>(${this._accession.toUpperCase()})</small>\n           </span>\n          \n        </div>\n        <div class=\"children\">\n             <slot></slot>\n        </div>\n      </div>\n      \n    `.trim();\n    this.shadowRoot\n      .querySelector('.action-holder')\n      .addEventListener('click', this._handleStateChangeEvent);\n  }\n\n  _planRender() {\n    // console.log('planning rendering');\n    // If rendering is already planned, skip the rest\n    if (this._plannedRender) return;\n    // Set a flag and _planRender at the next frame\n    this._plannedRender = true;\n    // setTimeout(() => {\n    requestAnimationFrame(() => {\n      // Removes the planned rendering flag\n      this._plannedRender = false;\n      this._render();\n    });\n    // }, 2000);\n  }\n\n  _planUpdate() {\n    this.classList.toggle('tree-hidden');\n  }\n\n  // Getters/Setters\n  // accession\n  get accession() {\n    return this._accession;\n  }\n\n  set accession(value) {\n    this._accession = value;\n  }\n  // name\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    this._name = value;\n  }\n  // type\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    this._type = value;\n  }\n\n  // level\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._level = value * 1;\n  }\n\n  // selected\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(value) {\n    this._selected = value !== null;\n  }\n\n  // haschildren\n  get haschildren() {\n    return this._haschildren;\n  }\n\n  set haschildren(value) {\n    this._haschildren = value !== null;\n  }\n\n  // includeexpander\n  get includeexpander() {\n    return this._includeexpander;\n  }\n\n  set includeexpander(value) {\n    this._includeexpander = value !== null;\n  }\n\n  // state\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  // href\n  get href() {\n    return this._href;\n  }\n\n  set href(value) {\n    this._href = value;\n  }\n\n  // Custom element reactions\n  constructor() {\n    super();\n    // set defaults\n    this._type = 'unknown';\n    this._accession = '';\n    this._name = '';\n    this._level = 0;\n    this._state = 'expanded';\n    this._handleLoadEvent = this._handleLoadEvent.bind(this);\n    this._handleStateChangeEvent = this._handleStateChangeEvent.bind(this);\n    this._render = this._render.bind(this);\n    this._planRender = this._planRender.bind(this);\n    this._planUpdate = this._planUpdate.bind(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener('load', this._handleLoadEvent);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('load', this._handleLoadEvent);\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[attributeName] = newValue;\n    if (attributeName !== 'state') {\n      this._planRender();\n      return;\n    }\n    this._planUpdate();\n  }\n}\n\nexport default InterproEntry;\n","class InterproHierarchy extends HTMLElement {\n  static get is() {\n    return 'interpro-hierarchy';\n  }\n\n  static get observedAttributes() {\n    return ['accession', 'accessions', 'displaymode', 'hideafter', 'hrefroot'];\n  }\n\n  _handleLoadEvent(event) {\n    try {\n      this._hierarchy = event.detail.payload;\n      this._planRender();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  _pruneTreeMarking(node) {\n    const { children, accession } = node;\n    node.pruned = true;\n    let isCurrentNode = false;\n    if (\n      this._accessions.find((e) => e.toLowerCase() === accession.toLowerCase())\n    ) {\n      node.pruned = false;\n      isCurrentNode = true;\n    }\n    if (children) {\n      for (const child of children) {\n        if (!this._pruneTreeMarking(child)) node.pruned = false;\n      }\n      if (\n        isCurrentNode &&\n        !this._displaymode.includes('no-children') &&\n        !node.pruned\n      ) {\n        node.children.forEach((ch) => (ch.pruned = false));\n      }\n    }\n    return node.pruned;\n  }\n\n  _pruneTreePruning(node) {\n    const { accession, name, type } = node;\n    const n = { accession, name, type };\n    if (!node.pruned) {\n      if (node.children) {\n        // node._children = node.children.filter(ch => ch.pruned);\n        n.children = [];\n        for (const child of node.children.filter((ch) => !ch.pruned)) {\n          n.children.push(this._pruneTreePruning(child));\n          // if (survivor) {\n          //   // if (!n['children']) n['children'] = [];\n          //   n['children'].push(survivor);\n          // } else if (!this._displaymode.includes('no-children')) {\n          //   // if (!n['children']) n['children'] = [];\n          //   n['children'].push({\n          //     accession: child.accession,\n          //     name: child.name,\n          //     type: child.type,\n          //   });\n          // }\n        }\n      }\n      return n;\n    }\n    return false;\n  }\n\n  _pruneTree(node) {\n    this._pruneTreeMarking(node);\n    return this._pruneTreePruning(node);\n  }\n\n  _moveAccessionToTop(node) {\n    if (!this._accession) return false;\n    if (node.accession === this._accession) return true;\n    if (!node.children) return false;\n    const branches = node.children.map((child) =>\n      this._moveAccessionToTop(child)\n    );\n    const index = branches.indexOf(true);\n    if (index > 0) {\n      [node.children[0], node.children[index]] = [\n        node.children[index],\n        node.children[0],\n      ];\n    }\n    return false;\n  }\n\n  _json2HTML(hierarchy, hide = false, includeExpander = false) {\n    const selected = hierarchy.accession === this._accession ? 'selected' : '';\n    return `\n      <interpro-entry \n        accession=\"${hierarchy.accession}\" \n        type=\"${hierarchy.type}\" \n        name=\"${hierarchy.name}\" ${selected}\n        ${hide ? 'hidden' : ''}\n        ${includeExpander ? 'includeexpander' : ''}\n        ${\n          this._hrefroot\n            ? `href=\"${this._hrefroot}/${hierarchy.accession}\"`\n            : ''\n        }\n      >\n        ${\n          hierarchy.children\n            ? hierarchy.children\n                .map((child, i) =>\n                  this._json2HTML(\n                    child,\n                    i >= this._hideafter,\n                    i + 1 === this._hideafter &&\n                      hierarchy.children.length > i + 1\n                  )\n                )\n                .join('')\n            : ''\n        } \n      </interpro-entry>\n    `;\n  }\n\n  _render() {\n    // If first render\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n    }\n    this._moveAccessionToTop(this._hierarchy);\n    let h = this._hierarchy;\n    if (this._displaymode.includes('pruned')) {\n      h = Array.isArray(h)\n        ? h.map((n) => this._pruneTree(n))\n        : this._pruneTree(this._hierarchy);\n    }\n    const shadowDom = this.shadyRoot || this.shadowRoot;\n    shadowDom.innerHTML = Array.isArray(h)\n      ? h.map((n) => this._json2HTML(n).trim()).join('')\n      : this._json2HTML(h).trim();\n  }\n\n  _planRender() {\n    // console.log('planning rendering');\n    // If rendering is already planned, skip the rest\n    if (this._plannedRender) return;\n    // Set a flag and _planRender at the next frame\n    this._plannedRender = true;\n    // setTimeout(() => {\n    requestAnimationFrame(() => {\n      // Removes the planned rendering flag\n      this._plannedRender = false;\n      this._render();\n    });\n    // }, 2000);\n  }\n\n  constructor() {\n    super();\n    // set defaults\n    this._displaymode = 'full';\n    this._hideafter = Infinity;\n    this._hrefroot = null;\n    this._handleLoadEvent = this._handleLoadEvent.bind(this);\n    this._json2HTML = this._json2HTML.bind(this);\n    this._render = this._render.bind(this);\n    this._planRender = this._planRender.bind(this);\n    this._pruneTree = this._pruneTree.bind(this);\n    this._accessions = [];\n  }\n\n  get accession() {\n    return this._accession;\n  }\n  set accession(value) {\n    this._accession = value;\n  }\n\n  get accessions() {\n    return this._accessions;\n  }\n  set accessions(value) {\n    this._accessions = Array.isArray(value) ? value : value.split(',');\n  }\n\n  get hrefroot() {\n    return this._hrefroot;\n  }\n  set hrefroot(value) {\n    this._hrefroot = value;\n  }\n\n  get displaymode() {\n    return this._displaymode;\n  }\n  set displaymode(value) {\n    this._displaymode = value;\n  }\n\n  get hideafter() {\n    return this._hideafter;\n  }\n  set hideafter(value) {\n    this._hideafter = value * 1;\n  }\n\n  set hierarchy(value) {\n    this._hierarchy = value;\n    this._planRender();\n  }\n\n  connectedCallback() {\n    const dataLoader = this.querySelector('data-loader');\n    if (dataLoader) {\n      dataLoader.addEventListener('load', this._handleLoadEvent, {\n        once: true,\n      });\n      if (dataLoader.data) {\n        this._hierarchy = dataLoader.data;\n        this._planRender();\n      }\n    }\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[attributeName] = newValue;\n    if (this._hierarchy) {\n      this._planRender();\n    }\n  }\n}\n\nexport default InterproHierarchy;\n","import _InterproDataLoader from './interpro-data-loader';\nimport _InterproType from './interpro-type';\nimport _InterproEntry from './interpro-entry';\nimport _InterproHierarchy from './interpro-hierarchy';\n\nexport const InterproDataLoader = _InterproDataLoader;\nexport const InterproType = _InterproType;\nexport const InterproEntry = _InterproEntry;\nexport const InterproHierarchy = _InterproHierarchy;\n"],"names":["accessionPattern","InterproDataLoader","HTMLElement","is","observedAttributes","dataLoaderElementName","_render","id","this","accession","sources","querySelectorAll","source","parentElement","removeChild","document","createElement","src","replace","dataLoader","querySelector","appendChild","_planRender","_plannedRender","requestAnimationFrame","_accession","value","_value","trim","toUpperCase","test","Error","setAttribute","removeAttribute","constructor","super","connectedCallback","disconnectedCallback","attributeChangedCallback","attributeName","oldValue","newValue","directives","WeakMap","isDirective","o","has","isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","nodesToRemove","stack","walker","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","update","setValue","commit","_clone","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","getHTML","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","getTemplateElement","innerHTML","SVGTemplateResult","svgElement","firstChild","before","reparentNodes","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","v","text","t","committer","directive","NodePart","__pendingValue","appendInto","startNode","endNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","instance","itemPart","itemParts","item","BooleanAttributePart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","_len","arguments","_key","supportedTypes","full","small","color","colors","InterproType","_handleLoadEvent","detail","payload","metadata","err","console","error","render","dimension","expanded","fillColor","textColor","shadowRoot","attachShadow","mode","_dimension","_type","_templateObject2","_taggedTemplateLiteralLoose","svgTemplate","_len2","_key2","svg","_templateObject","_templateObject3","shadyRoot","Object","assign","descriptor","log","_expanded","getComputedStyle","lineHeight","bind","_","InterproEntry","_collapseTree","child","children","_expandTree","_handleStateChangeEvent","target","classList","contains","remove","_state","_level","shadowDom","link","_href","_haschildren","_includeexpander","_selected","_name","_planUpdate","toggle","level","selected","haschildren","includeexpander","state","href","InterproHierarchy","_hierarchy","_pruneTreeMarking","pruned","isCurrentNode","_accessions","find","_displaymode","includes","forEach","ch","_pruneTreePruning","filter","_pruneTree","_moveAccessionToTop","map","_json2HTML","hierarchy","hide","includeExpander","_hrefroot","_hideafter","h","Infinity","accessions","hrefroot","displaymode","hideafter","_InterproDataLoader","_InterproType","_InterproEntry"],"sourceRoot":""}