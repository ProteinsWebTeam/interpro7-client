{"version":3,"file":"js/7591.module.7591.2f4.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/AlphaFold/selectors.ts","webpack://interpro7-client/./src/components/ProteinViewer/utils.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/DomainsOnProteinLoaded/index.tsx","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/mergeExtraFeatures.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/mergeResidues.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/RepeatsDB/index.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/DisProt/index.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/index.tsx","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/ProteinViewerForAlphafold/index.tsx","webpack://interpro7-client/./node_modules/core-js/internals/does-not-exceed-safe-integer.js","webpack://interpro7-client/./node_modules/core-js/internals/flatten-into-array.js","webpack://interpro7-client/./node_modules/core-js/modules/es.array.flat.js","webpack://interpro7-client/./node_modules/core-js/modules/es.array.unscopables.flat.js"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { format } from 'url';\n\nexport const getAlphaFoldPredictionURL = createSelector(\n  (state: GlobalState) => state.settings.alphafold,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  ({ protocol, hostname, port, root, query }, accession) => {\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}api/prediction/${accession}`,\n      query: query,\n    });\n  },\n);\ntype StartsWithData = `data${string}`;\nexport const getConfidenceURLFromPayload = (namespace: string) =>\n  createSelector(\n    (\n      _: GlobalState,\n      props: { [d: StartsWithData]: RequestedData<AlphafoldPayload> },\n    ) => props[`data${namespace}`],\n    (dataPrediction: RequestedData<AlphafoldPayload>) => {\n      const cifURL = dataPrediction?.payload?.[0]?.cifUrl;\n      return cifURL?.length\n        ? cifURL.replace('-model', '-confidence').replace('.cif', '.json')\n        : null;\n    },\n  );\n","import { useMemo } from 'react';\nimport { toPlural } from 'utils/pages/toPlural';\nimport { NOT_MEMBER_DBS } from 'menuConfig';\nimport { getTrackColor, EntryColorMode } from 'utils/entry-color';\n\nexport const selectRepresentativeData = (\n  entries: Record<string, unknown>[],\n  locationKey: string,\n  type: string,\n) => {\n  const flatRepresentativeData = [];\n\n  for (const entry of entries) {\n    const { accession, short_name, name, source_database, integrated, chain } =\n      entry;\n\n    if (\n      entry[locationKey] === null ||\n      (entry.type !== type &&\n        (type === 'domain' ? entry.type !== 'repeat' : true)) // Handles repeat types, which fall under the \"domain\" cateogory\n    ) {\n      continue;\n    }\n    for (const location of entry[locationKey] as Array<ProtVistaLocation>) {\n      for (const fragment of location.fragments) {\n        const { start, end } = fragment;\n        const representative = location.representative;\n        if (location.representative) {\n          flatRepresentativeData.push({\n            accession,\n            chain,\n            short_name,\n            name,\n            source_database,\n            integrated,\n            representative,\n            start,\n            end,\n            color: getTrackColor({ source_database }, EntryColorMode.MEMBER_DB),\n            length: end - start + 1,\n          });\n        }\n      }\n    }\n  }\n\n  return flatRepresentativeData;\n};\n\nexport const useProcessData = <M = Metadata>(\n  results: EndpointWithMatchesPayload<M, MatchI>[] | undefined,\n  endpoint: Endpoint,\n) =>\n  useMemo(() => {\n    return processData(results || [], endpoint);\n  }, [results, endpoint]);\n\nconst processData = <M = Metadata>(\n  dataResults: EndpointWithMatchesPayload<M>[],\n  endpoint: Endpoint,\n) => {\n  const results: Record<string, unknown>[] = [];\n  for (const item of dataResults) {\n    results.splice(\n      0,\n      0,\n      ...item[toPlural(endpoint)].map((match) => ({\n        ...match,\n        ...item.metadata,\n        ...(item.extra_fields || {}),\n      })),\n    );\n  }\n  const interpro = results.filter(\n    (entry) =>\n      (entry as unknown as Metadata).source_database.toLowerCase() ===\n      'interpro',\n  );\n\n  const locationKey =\n    endpoint === 'structure'\n      ? 'entry_structure_locations'\n      : 'entry_protein_locations';\n\n  const representativeData = {\n    domains: selectRepresentativeData(results, locationKey, 'domain'),\n    families: selectRepresentativeData(results, locationKey, 'family'),\n  };\n\n  const representativeDomains = representativeData['domains'];\n  const representativeFamilies = representativeData['families'];\n\n  const interproMap = new Map(\n    interpro.map((ipro) => [\n      `${ipro.accession}-${ipro.chain}-${ipro.protein}`,\n      ipro,\n    ]),\n  );\n  const integrated = results.filter((entry) => entry.integrated);\n  const unintegrated = results.filter(\n    (entry) =>\n      interpro.concat(integrated).indexOf(entry) === -1 &&\n      !NOT_MEMBER_DBS.has(\n        (entry as unknown as Metadata).source_database.toLowerCase(),\n      ),\n  );\n  integrated.forEach((entry) => {\n    const ipro: Record<string, unknown> & {\n      children?: Array<Record<string, unknown>>;\n    } =\n      interproMap.get(`${entry.integrated}-${entry.chain}-${entry.protein}`) ||\n      {};\n    if (!ipro.children) ipro.children = [];\n    if (ipro.children.indexOf(entry) === -1) ipro.children.push(entry);\n  });\n  integrated.sort((a, b) =>\n    a.chain ? (a.chain as string).localeCompare(b.chain as string) : -1,\n  );\n  return {\n    interpro,\n    unintegrated,\n    representativeDomains,\n    representativeFamilies,\n    other: [],\n  };\n};\n","import React, { PropsWithChildren } from 'react';\nimport { addConfidenceTrack } from 'components/Structure/ViewerAndEntries/ProteinViewerForAlphafold';\nimport loadable from 'higherOrder/loadable';\nimport { groupByEntryType } from 'components/Related/DomainsOnProtein';\nimport { ProteinsAPIVariation } from '@nightingale-elements/nightingale-variation/dist/proteinAPI';\nimport {\n  ExtendedFeature,\n  ExtendedFeatureLocation,\n} from 'components/ProteinViewer';\nimport { sleep } from 'timing-functions';\n\nconst ProteinViewer = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"protein-viewer\" */ 'components/ProteinViewer'),\n  loading: null,\n});\n\n// 0A017SEX7 is a good example\nconst UNDERSCORE = /_/g;\n\nconst FIRST_IN_ORDER = [\n  'alphafold_confidence',\n  'secondary_structure',\n  'families',\n  'family',\n  'domains',\n  'domain',\n  'intrinsically_disordered_regions',\n  'conserved_site',\n  'conserved_residues',\n  'spurious_proteins',\n  'pathogenic_and_likely_pathogenic_variants',\n  'repeat',\n  'active_site',\n  'binding_site',\n  'ptm',\n];\n\nconst LASTS_IN_ORDER = [\n  'coiled-coils,_signal_peptides,_transmembrane_regions',\n  'short_linear_motifs',\n  'pfam-n',\n  'funfam',\n  'match_conservation',\n];\n\nexport const byEntryType = (\n  [a, _]: [string, unknown],\n  [b, __]: [string, unknown],\n) => {\n  for (const label of FIRST_IN_ORDER) {\n    if (a.toLowerCase() === label) return -1;\n    if (b.toLowerCase() === label) return 1;\n  }\n  for (const l of LASTS_IN_ORDER) {\n    if (a.toLowerCase() === l) return -1;\n    if (b.toLowerCase() === l) return 1;\n  }\n  return a > b ? 1 : 0;\n};\n\ntype tracksProps = {\n  interpro: Array<{ accession: string; type: string }>;\n  unintegrated: Array<MinimalFeature>;\n  other?: Array<MinimalFeature>;\n  representativeDomains?: Array<MinimalFeature>;\n  representativeFamilies?: Array<MinimalFeature>;\n  disorderedRegions?: Array<MinimalFeature>;\n};\n\nfunction getBoundaries(item: ExtendedFeature | ExtendedFeature[]) {\n  let fragment = undefined;\n  let accession = undefined;\n\n  if (Array.isArray(item)) {\n    fragment = item[0].entry_protein_locations?.[0].fragments?.[0];\n    accession = item[0].accession;\n  } else {\n    fragment = item.entry_protein_locations?.[0].fragments?.[0];\n    accession = item.accession;\n  }\n  if (fragment && accession) {\n    return [accession, fragment.start, fragment.end];\n  }\n  return [0, 0];\n}\n\nexport function sortTracks(\n  a: ExtendedFeature | ExtendedFeature[],\n  b: ExtendedFeature | ExtendedFeature[],\n) {\n  const [aAccession, aStart, aEnd] = getBoundaries(a);\n  const [bAccession, bStart, bEnd] = getBoundaries(b);\n\n  if (aStart > bStart) return 1;\n  if (aStart < bStart) return -1;\n  if (aStart === bStart) {\n    if (aEnd < bEnd) return 1;\n    if (aEnd > bEnd) return -1;\n    if (aEnd === bEnd) {\n      if (aAccession > bAccession) return 1;\n      else return -1;\n    }\n  }\n  return 0;\n}\n\nconst getMemberDBMatches = (\n  interpro: Array<MinimalFeature>,\n): Array<MinimalFeature> => {\n  const dbMatches: Array<MinimalFeature> = [];\n  interpro.forEach((entry) => {\n    if (entry.children) {\n      entry.children.forEach((memberDBMatch) => {\n        dbMatches.push(memberDBMatch);\n      });\n    }\n  });\n  return dbMatches;\n};\n\nexport const makeTracks = ({\n  interpro,\n  unintegrated,\n  other,\n  representativeDomains,\n  representativeFamilies,\n  disorderedRegions,\n}: tracksProps): ProteinViewerDataObject<MinimalFeature> => {\n  /* Logic to highlight matches from member DBs, not InterPro entries\n      1. Remove Intepro entries as the \"parent\" of matches from member DBs.\n      2. Merge unintegrated with result from (1.);\n      3. Sort matches in tracks based on their position but, if integrated,\n      maintaining grouping for the same InterPro entry.\n\n  // 1. and 2.\n  const integratedMatches = getMemberDBMatches(interpro);\n  const allMatches = integratedMatches.concat(unintegrated);\n\n  // this was \n  const groups = groupByEntryType(\n    allMatches as { accession: string; type: string }[],\n  );\n\n  /* 3.\n        Group matches of the same type (e.g domain) by IntePro accession\n        sort matches by position within the same group,\n        sort all the groups based on first fragment of group.\n\n  Object.keys(groups).map((key) => {\n    const uniqueInterproAccessions = [\n      ...new Set(groups[key].map((match: ExtendedFeature) => match.integrated)),\n    ];\n    const allMatchesGroupedByEntry = [];\n\n    for (let i = 0; i < uniqueInterproAccessions.length; i++) {\n      const groupedEntry = groups[key].filter(\n        (match: ExtendedFeature) =>\n          match.integrated == uniqueInterproAccessions[i],\n      );\n      // Sort non-integrated and those appearing just once for an Interpro accession, independently from the grouped ones\n      if (uniqueInterproAccessions[i] === null || groupedEntry.length == 1) {\n        groupedEntry.map((entry) => allMatchesGroupedByEntry.push(entry));\n      } else {\n        allMatchesGroupedByEntry.push(groupedEntry.sort(sortTracks));\n      }\n    }\n    groups[key] = allMatchesGroupedByEntry.sort(sortTracks).flat();\n  });*/\n\n  const groups = groupByEntryType(\n    interpro.concat(unintegrated as { accession: string; type: string }[]),\n  );\n\n  // Merge domain and families into respective representative ones. Merge homologous superfamily into domains.\n  const mergedData: ProteinViewerDataObject<MinimalFeature> = groups;\n\n  // Domain and family as empty objects, to cancat other object later\n  if (!mergedData.domain) {\n    mergedData.domain = [];\n  }\n\n  if (!mergedData.family) {\n    mergedData.family = [];\n  }\n\n  // Add repeats and homologous superfamilies to domain\n  if (mergedData.homologous_superfamily) {\n    mergedData.domain = mergedData.domain.concat(\n      mergedData.homologous_superfamily,\n    );\n    mergedData.homologous_superfamily = [];\n  }\n\n  if (mergedData.repeat) {\n    mergedData.domain = mergedData.domain.concat(mergedData.repeat);\n    mergedData.repeat = [];\n  }\n\n  // Add representative data\n  if (representativeFamilies?.length)\n    mergedData.family = mergedData.family.concat(representativeFamilies);\n\n  if (representativeDomains?.length)\n    mergedData.domain = mergedData.domain.concat(representativeDomains);\n\n  if (disorderedRegions?.length)\n    mergedData.disorderedRegions = disorderedRegions;\n\n  if (other) mergedData.other_features = other;\n\n  Object.values(mergedData).map((group) => group.sort(sortTracks).flat());\n\n  return mergedData;\n};\n\nexport const flattenTracksObject = (\n  tracksObject: ProteinViewerDataObject,\n): ProteinViewerData => {\n  return (\n    Object.entries(tracksObject)\n      .sort(byEntryType)\n      // “Binding_site” -> “Binding site”\n      .map(([key, value]) => [key.replace(UNDERSCORE, ' '), value])\n  );\n};\n\n/* Processing of the payload needs to be slightly different\nto add tracks to the dataMerged object instead of the dataSorted object */\nexport const addVariationTrack = (\n  variationPayload: ProteinsAPIVariation,\n  protein: string,\n  tracks: ProteinViewerDataObject,\n) => {\n  if (variationPayload?.features?.length) {\n    tracks['pathogenic_and_likely_pathogenic_variants'] = [];\n    tracks['pathogenic_and_likely_pathogenic_variants'][0] = {\n      accession: `variation_${protein}`,\n      data: variationPayload,\n      type: 'variation',\n      protein,\n      source_database: 'proteinsAPI',\n    };\n  }\n};\n\nexport const addPTMTrack = (\n  proteomicsPayload: ProteinsAPIProteomics,\n  protein: string,\n  tracks: ProteinViewerDataObject,\n) => {\n  if (proteomicsPayload?.features?.length) {\n    if (!tracks['ptm']) {\n      tracks['ptm'] = [];\n    }\n    tracks['ptm'].push({\n      accession: `ptm_${protein}`,\n      data: proteomicsPayload,\n      type: 'ptm',\n      protein,\n      source_database: 'proteinsAPI',\n    });\n  }\n};\n\ntype Props = PropsWithChildren<{\n  mainData:\n    | {\n        metadata: MinimalProteinMetadata;\n      }\n    | {\n        payload: {\n          metadata: MinimalProteinMetadata;\n        };\n      };\n  dataMerged: ProteinViewerDataObject;\n  dataConfidence?: RequestedData<AlphafoldConfidencePayload>;\n  dataVariation?: RequestedData<ProteinsAPIVariation>;\n  dataProteomics?: RequestedData<ProteinsAPIProteomics>;\n  conservationError?: string | null;\n  showConservationButton?: boolean;\n  handleConservationLoad?: () => void;\n  loading: boolean;\n  title?: string;\n}>;\n\nconst DomainsOnProteinLoaded = ({\n  mainData,\n  dataMerged,\n  dataConfidence,\n  dataVariation,\n  dataProteomics,\n  conservationError,\n  showConservationButton,\n  handleConservationLoad,\n  loading,\n  children,\n  title = 'Entry matches to this protein',\n}: Props) => {\n  const protein =\n    (mainData as ProteinEntryPayload).metadata ||\n    (mainData as { payload: ProteinEntryPayload }).payload.metadata;\n\n  /*\n  Special tracks are now added to the dataMerged object before being sorted based on FIRST_IN_ORDER.\n  Adding the tracks to the dataSorted object, caused the Alphafold track and variants track to be displayed always at the first/last position.\n  */\n  if (dataConfidence)\n    addConfidenceTrack(dataConfidence, protein.accession, dataMerged);\n\n  if (dataVariation?.ok && dataVariation.payload) {\n    const filteredVariationPayload = filterVariation(dataVariation.payload);\n    if (filteredVariationPayload.features.length > 0)\n      addVariationTrack(\n        filteredVariationPayload,\n        protein.accession,\n        dataMerged,\n      );\n  }\n\n  if (dataProteomics?.ok && dataProteomics.payload) {\n    if (dataProteomics.payload.features.length > 0) {\n      addPTMTrack(dataProteomics.payload, protein.accession, dataMerged);\n    }\n  }\n\n  const uniqueResidues: Record<string, ExtendedFeature> = {};\n\n  // Group PIRSR residue by description and position\n  let pirsrFound = false;\n  for (let i = 0; i < dataMerged.residues?.length; i++) {\n    const currentResidue = dataMerged.residues[i] as ExtendedFeature;\n    if (currentResidue.source_database === 'pirsr') {\n      if (!pirsrFound) pirsrFound = true;\n      const residueStart =\n        currentResidue.locations?.[0].fragments?.[0].start || 0;\n      const residueEnd = currentResidue.locations?.[0].fragments?.[0].end || 0;\n      const residueDescription =\n        currentResidue.locations?.[0].description?.replace('.', '');\n\n      const dictKey =\n        residueStart.toString() + residueEnd.toString() + residueDescription;\n\n      if (!uniqueResidues[dictKey]) uniqueResidues[dictKey] = currentResidue;\n    } else {\n      uniqueResidues[currentResidue.accession] = currentResidue;\n    }\n  }\n\n  // Create fake PIRSR object to display group label\n  if (pirsrFound)\n    uniqueResidues['PIRSR'] = {\n      accession: 'PIRSR_GROUP',\n      source_database: 'pirsr',\n      type: 'residue',\n      locations: [\n        {\n          description: 'PIRSR',\n          fragments: [{ residues: '', start: -10, end: 0 }],\n        } as ExtendedFeatureLocation,\n      ],\n    };\n\n  dataMerged.conserved_residues = Object.values(uniqueResidues).sort((a, b) => {\n    // If comparing two entries from different DBs, put the non-pirsr always first (a) OR if source database is pirsr and first element is fake label, put fake label first\n    if (\n      (a.source_database !== 'pirsr' && b.source_database === 'pirsr') ||\n      (a.source_database === b.source_database && a.accession === 'PIRSR_GROUP')\n    )\n      return -1;\n    // If comparing two entries from different DBs, put the non-pirsr always first (b) OR if source database is pirsr and second element is fake label, put fake label first\n    else if (\n      (a.source_database === 'pirsr' && b.source_database !== 'pirsr') ||\n      (a.source_database === b.source_database && b.accession === 'PIRSR_GROUP')\n    )\n      return 1;\n    // All other cases\n    else return a.accession.localeCompare(b.accession);\n  });\n\n  if (dataMerged.domain) dataMerged.domains = dataMerged.domain.slice();\n\n  if (dataMerged.family) dataMerged.families = dataMerged.family.slice();\n\n  const renamedTracks = ['domain', 'family', 'residues'];\n  const sortedData = flattenTracksObject(dataMerged).filter(\n    (track) => !renamedTracks.includes(track[0]),\n  );\n\n  let mainTracks: string[] = [];\n  let hideCategories: Record<string, boolean> = {};\n\n  if (protein.accession.startsWith('iprscan')) {\n    const homologous_superfamily = sortedData.filter(\n      (entry) => entry[0] == 'homologous superfamily',\n    )[0];\n    const representative_domains = sortedData.filter(\n      (entry) => entry[0] == 'representative domains',\n    )[0];\n\n    if (representative_domains) {\n      representative_domains[1].map((domain) => {\n        if (typeof domain === 'object' && domain !== null) {\n          (domain as { representative?: boolean })['representative'] = true;\n        }\n      });\n    }\n\n    sortedData.map((entry) => {\n      if (entry[0] === 'domains') {\n        if (homologous_superfamily) {\n          entry[1] = entry[1].concat(homologous_superfamily[1]);\n        }\n\n        if (representative_domains) {\n          entry[1] = entry[1].concat(representative_domains[1]);\n        }\n      }\n    });\n\n    mainTracks = [\n      'alphafold confidence',\n      'families',\n      'domains',\n      'pathogenic and likely pathogenic variants',\n      'intrinsically disordered regions',\n      'spurious proteins',\n      'conserved residues',\n      'unintegrated',\n      'other features',\n      'other residues',\n    ];\n\n    hideCategories = {\n      'secondary structure': false,\n      families: false,\n      domains: false,\n      repeat: false,\n      'conserved site': false,\n      'active site': false,\n      'binding site': false,\n      ptm: false,\n      'match conservation': false,\n      'coiled-coils, signal peptides, transmembrane regions': false,\n      'short linear motifs': false,\n      'pfam-n': false,\n      funfam: false,\n    };\n\n    sortedData.map((entry) => {\n      (entry[1] as ExtendedFeature[]).sort(sortTracks).flat();\n    });\n  } else {\n    mainTracks = [\n      'alphafold confidence',\n      'families',\n      'domains',\n      'pathogenic and likely pathogenic variants',\n      'intrinsically disordered regions',\n      'spurious proteins',\n      'conserved residues',\n    ];\n\n    hideCategories = {\n      'secondary structure': false,\n      families: true,\n      domains: true,\n      repeat: false,\n      'conserved site': false,\n      'active site': false,\n      'binding site': false,\n      ptm: false,\n      'match conservation': false,\n      'coiled-coils, signal peptides, transmembrane regions': false,\n      'short linear motifs': false,\n      'pfam-n': false,\n      funfam: false,\n    };\n  }\n\n  return (\n    <ProteinViewer\n      protein={protein}\n      data={sortedData}\n      title={title}\n      show\n      ervationButton={showConservationButton}\n      handleConservationLoad={handleConservationLoad}\n      conservationError={conservationError}\n      loading={loading}\n      mainTracks={mainTracks}\n      hideCategories={hideCategories}\n    >\n      {children}\n    </ProteinViewer>\n  );\n};\n\nexport default DomainsOnProteinLoaded;\nfunction filterVariation(payload: ProteinsAPIVariation): ProteinsAPIVariation {\n  const types = ['pathogenic', 'likely pathogenic'];\n  const features = payload.features.filter(\n    (f) =>\n      (f?.clinicalSignificances || []).filter((cs) =>\n        types.includes((cs?.type || '').toLowerCase()),\n      ).length > 0,\n    // Next line is the filter I think UniProt uses, which yields different results than the one above\n    // (f) => (f?.association || []).filter((a) => a.disease).length > 0,\n  );\n  return {\n    ...payload,\n    features,\n  };\n}\n","import { ExtendedFeature } from 'components/ProteinViewer';\nconst mobiConsensus = 'Consensus Disorder Prediction';\nconst splitMobiFeatures = (feature: ExtendedFeature) => {\n  const newFeatures: Record<string, ExtendedFeature> = {};\n  for (const loc of feature.locations || []) {\n    const key =\n      ((loc.fragments[0] as Record<string, number | string>)\n        ?.seq_feature as string) ||\n      loc.seq_feature ||\n      mobiConsensus;\n    if (newFeatures[key]) {\n      newFeatures[key].locations?.push(loc);\n    } else {\n      newFeatures[key] = {\n        ...feature,\n        accession: `Mobidblt-${key}`,\n        locations: [loc],\n      };\n    }\n  }\n\n  return Object.values(newFeatures);\n};\n\nconst mergeExtraFeatures = (\n  data: ProteinViewerDataObject,\n  extraFeatures: Record<string, ExtendedFeature>\n) => {\n  if ('mobidb-lite' in extraFeatures) {\n    data.other_features = data.other_features.concat(\n      splitMobiFeatures(extraFeatures['mobidb-lite'])\n    );\n  }\n  data.other_features = data.other_features\n    .concat(\n      Object.values(extraFeatures).filter(\n        ({ source_database: db }) => db !== 'mobidblt'\n      )\n    )\n    .sort((a, b) => {\n      const { accession: accA, source_database: dbA } = a as Record<\n        string,\n        string\n      >;\n      const { accession: accB, source_database: dbB } = b as Record<\n        string,\n        string\n      >;\n      if (dbA === dbB) {\n        if (accA.includes(mobiConsensus)) return -1;\n        if (accB.includes(mobiConsensus)) return 1;\n        return 0;\n      }\n      return dbA.localeCompare(dbB);\n    });\n  return data;\n};\nexport default mergeExtraFeatures;\n","import { ExtendedFeature } from 'src/components/ProteinViewer';\n\nconst PIRSR_ACCESSION_LENGTH = 11;\nconst PIRSF_PREFIX_LENGTH = 5;\n\ntype FeatureWithResidues = MinimalFeature & {\n  residues?: Array<ResidueMetadata>;\n};\ntype ResidueEntry = ResidueMetadata & {\n  linked?: boolean;\n  type?: string;\n};\n\n/**\n * PIRSR residues associated with the same family can come from several models\n * which accession correspond to the family followed by the model. e.g. PIRSR000001-1 and PIRSR000001-2\n * This function groups those two model into a single residue with multiple locations.\n * @param {object} residues list of residues\n * @returns {object} list of residues with the PIRSR ones grouped\n */\nconst mergePIRSFRResidues = (residues: Record<string, ResidueMetadata>) => {\n  const newResidues: Record<string, ResidueMetadata> = {};\n  Object.keys(residues).forEach((acc) => {\n    if (acc.startsWith('PIRSR')) {\n      const newAcc = acc.substring(0, PIRSR_ACCESSION_LENGTH);\n\n      if (!newResidues[newAcc]) {\n        newResidues[newAcc] = {\n          ...residues[acc],\n          accession: newAcc,\n          locations: [] as Array<ProtVistaLocation>,\n        };\n      }\n      residues[acc].locations?.forEach(\n        (location) => (location.accession = acc),\n      );\n      newResidues[newAcc].locations?.push(...(residues[acc].locations || []));\n    } else {\n      newResidues[acc] = { ...residues[acc] };\n    }\n  });\n  return newResidues;\n};\n\nconst mergeResidues = (\n  data: ProteinViewerDataObject<MinimalFeature>,\n  residuesPayload: ResiduesPayload,\n) => {\n  const residuesWithEntryDetails: Array<FeatureWithResidues> = [];\n  const residues: Record<string, ResidueEntry> =\n    mergePIRSFRResidues(residuesPayload);\n\n  const { representative_domains: _, ...otherGroups } = data;\n  Object.values(otherGroups).forEach(\n    (\n      group /*: Array<{accession:string, residues: Array<Object>, children: any}> */,\n    ) =>\n      group.forEach((entry) => {\n        const resAccession = entry.accession.startsWith('PIRSF')\n          ? `PIRSR${entry.accession.substring(\n              PIRSF_PREFIX_LENGTH,\n              PIRSR_ACCESSION_LENGTH,\n            )}`\n          : entry.accession;\n        if (residues[resAccession]) {\n          const matchedEntry: FeatureWithResidues = { ...entry };\n          matchedEntry.accession = `residue:${entry.accession}`;\n          matchedEntry.residues = [residues[resAccession]];\n          residuesWithEntryDetails.push(matchedEntry);\n          residues[resAccession].linked = true;\n        }\n\n        if (entry.children && entry.children.length)\n          entry.children.forEach((child) => {\n            const childResAccession = child.accession.startsWith('PIRSF')\n              ? `PIRSR${child.accession.substring(\n                  PIRSF_PREFIX_LENGTH,\n                  PIRSR_ACCESSION_LENGTH,\n                )}`\n              : child.accession;\n            if (residues[childResAccession]) {\n              const matchedEntry: FeatureWithResidues = { ...child };\n              matchedEntry.accession = `residue:${child.accession}`;\n              matchedEntry.residues = [residues[childResAccession]];\n              residuesWithEntryDetails.push(matchedEntry);\n              residues[childResAccession].linked = true;\n            }\n          });\n      }),\n  );\n\n  const unlinkedResidues: ResidueEntry[] = [];\n  Object.values(residues)\n    .filter(({ linked }) => !linked)\n    .forEach((residue) => {\n      residue.locations.forEach((location, i) => {\n        const residueEntry = { ...residue };\n        residueEntry.accession = `${\n          location.accession || residue.accession\n        }.${i}`;\n        residueEntry.type = 'residue';\n        residueEntry.locations = [location];\n        unlinkedResidues.push(residueEntry);\n      });\n    });\n\n  data.residues = (residuesWithEntryDetails as ResidueEntry[]).concat(\n    unlinkedResidues,\n  );\n};\n\nexport default mergeResidues;\n","const HTTP_OK = 200;\n\nexport const formatRepeatsDB = ({\n  loading,\n  status,\n  payload,\n}: RequestedData<RepeatsDBPayload>) => {\n  const panelsData: MinimalFeature[] = [];\n  if (!loading && status === HTTP_OK && payload) {\n    const data = Object.values(payload.items);\n    for (const item of data) {\n      const proteinAcc = item.content.chain.structure;\n      for (const feature of item.content.loci) {\n        if (feature.type === 'region')\n          panelsData.push({\n            accession: `REPEAT:${proteinAcc}:${feature.start}-${feature.end}`,\n            protein: proteinAcc,\n            source_database: 'RepeatsDB',\n            type: 'Consensus',\n            locations: [\n              {\n                fragments: [\n                  {\n                    start: feature.start,\n                    end: feature.end,\n                  },\n                ],\n              },\n            ],\n          } as MinimalFeature);\n      }\n    }\n  }\n  return panelsData;\n};\n\nexport default formatRepeatsDB;\n","const HTTP_OK = 200;\n\nconst TYPES: { [key: string]: string } = {\n  F: 'Function region',\n  S: 'Order state',\n  D: 'Disorder state',\n  T: 'Transition',\n  I: 'Transition with interaction',\n};\n\nexport const formatDisProt = ({\n  loading,\n  status,\n  payload,\n}: RequestedData<DisProtPayload>) => {\n  const panelsData: MinimalFeature[] = [];\n  if (!loading && status === HTTP_OK && payload) {\n    let i = 1;\n    for (const region of payload.disprot_consensus.full) {\n      panelsData.push({\n        accession: `DISPROT:${i++}`,\n        protein: payload.acc,\n        source_database: 'DisProt',\n        type: TYPES[region.type] || '',\n        locations: [\n          {\n            fragments: [\n              {\n                start: region.start,\n                end: region.end,\n              },\n            ],\n          },\n        ],\n      } as MinimalFeature);\n    }\n  }\n  return panelsData;\n};\n\nexport default formatDisProt;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport formatRepeatsDB from './RepeatsDB';\nimport formatDisProt from './DisProt';\n\nexport type ExtenalSourcesProps = {\n  loading: boolean;\n  externalSourcesData: MinimalFeature[];\n};\nexport function loadExternalSources<\n  T extends ExtenalSourcesProps = ExtenalSourcesProps,\n>(WrappedComponent: React.ComponentType<T>) {\n  // Try to create a nice displayName for React Dev Tools.\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n  type Props = Omit<T, keyof ExtenalSourcesProps> &\n    LoadDataProps<DisProtPayload, 'DisProt'> &\n    LoadDataProps<RepeatsDBPayload, 'RepeatsDB'>;\n\n  const ComponentWithExternalData = (props: Props) => {\n    const {\n      dataRepeatsDB,\n      isStaleRepeatsDB: __,\n      dataDisProt,\n      isStaleDisProt: ___,\n      ...otherProps\n    } = props;\n\n    const repeatsDBFormatted = dataRepeatsDB\n      ? formatRepeatsDB(dataRepeatsDB)\n      : [];\n    const disprotFormatted = dataDisProt ? formatDisProt(dataDisProt) : [];\n\n    // TODO: Add Disprot\n\n    // Fetch the props you want to inject. This could be done with context instead.\n    const newProps = {\n      externalSourcesData: [...repeatsDBFormatted, ...disprotFormatted],\n    };\n\n    // props comes afterwards so the can override the default ones.\n    return <WrappedComponent {...newProps} {...(otherProps as T)} />;\n  };\n\n  ComponentWithExternalData.displayName = `loadExternalSources(${displayName})`;\n\n  return loadData<RepeatsDBPayload, 'RepeatsDB'>({\n    getUrl: getRepeatsDBURL,\n    propNamespace: 'RepeatsDB',\n  } as LoadDataParameters)(\n    loadData<DisProtPayload, 'DisProt'>({\n      getUrl: getDisProtURL,\n      propNamespace: 'DisProt',\n    } as LoadDataParameters)(ComponentWithExternalData),\n  );\n}\n\nconst getRepeatsDBURL = createSelector(\n  (state: GlobalState) => state.settings.repeatsDB,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    if (!accession) return null;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}`,\n      query: {\n        'chain.structure': `${accession}`,\n        'chain.id': 'A',\n        skip: '0',\n        limit: '1',\n      },\n    });\n  },\n);\n\nconst getDisProtURL = createSelector(\n  (state: GlobalState) => state.settings.disprot,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    if (!accession) return null;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}/${accession}`,\n      query: {\n        format: 'json',\n      },\n    });\n  },\n);\n\nexport default loadExternalSources;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { edgeCases, STATUS_TIMEOUT } from 'utils/server-message';\n\nimport {\n  getAlphaFoldPredictionURL,\n  getConfidenceURLFromPayload,\n} from 'components/AlphaFold/selectors';\nimport { useProcessData } from 'components/ProteinViewer/utils';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\nimport EdgeCase from 'components/EdgeCase';\n\n// import ConservationProvider, {\n//   mergeConservationData,\n//   // Disabling Conservation until hmmer is working\n//   // isConservationDataAvailable,\n// } from './ConservationProvider';\nimport mergeExtraFeatures from './mergeExtraFeatures';\nimport mergeResidues from './mergeResidues';\nimport DomainsOnProteinLoaded, { makeTracks } from './DomainsOnProteinLoaded';\nimport loadExternalSources, { ExtenalSourcesProps } from './ExternalSourcesHOC';\nimport { ProteinsAPIVariation } from '@nightingale-elements/nightingale-variation/dist/proteinAPI';\nimport { ExtendedFeature } from 'src/components/ProteinViewer';\n\nexport const orderByAccession = (\n  a: { accession: string },\n  b: { accession: string },\n) => (a.accession > b.accession ? 1 : -1);\n\nexport const groupByEntryType = (\n  interpro: Array<{\n    accession: string;\n    type: string;\n  }>,\n) => {\n  const groups: Record<\n    string,\n    Array<{\n      accession: string;\n      type: string;\n    }>\n  > = {};\n  for (const entry of interpro) {\n    if (!groups[entry.type]) groups[entry.type] = [];\n    groups[entry.type].push(entry);\n  }\n  Object.values(groups).forEach((g) => g.sort(orderByAccession));\n  return groups;\n};\n\ntype Props = PropsWithChildren<{\n  mainData: { metadata: ProteinMetadata };\n  onMatchesLoaded?: (\n    results: EndpointWithMatchesPayload<EntryMetadata, MatchI>[],\n  ) => void;\n  onFamiliesFound?: (families: Record<string, unknown>[]) => void;\n  title?: string;\n}>;\ninterface LoadedProps\n  extends Props,\n    ExtenalSourcesProps,\n    LoadDataProps<ExtraFeaturesPayload, 'Features'>,\n    LoadDataProps<ResiduesPayload, 'Residues'>,\n    LoadDataProps<ProteinsAPIVariation, 'Variation'>,\n    LoadDataProps<AlphafoldConfidencePayload, 'Confidence'>,\n    LoadDataProps<ProteinsAPIProteomics, 'Proteomics'>,\n    LoadDataProps<AlphafoldPayload, 'Prediction'>,\n    LoadDataProps<\n      PayloadList<EndpointWithMatchesPayload<EntryMetadata>> | ErrorPayload\n    > {}\n\nconst DomainOnProteinWithoutData = ({\n  data,\n  mainData,\n  dataResidues,\n  dataFeatures,\n  dataConfidence,\n  dataVariation,\n  dataProteomics,\n  onMatchesLoaded,\n  onFamiliesFound,\n  children,\n  externalSourcesData,\n  title,\n}: LoadedProps) => {\n  // const [conservation, setConservation] = useState<{\n  //   generateData: boolean;\n  //   showButton: boolean;\n  //   data: ConservationPayload | null;\n  //   error: string | null;\n  // }>({\n  //   generateData: false,\n  //   showButton: false,\n  //   data: null,\n  //   error: null,\n  // });\n  const [processedData, setProcessedData] = useState<{\n    interpro: Record<string, unknown>[];\n    representativeDomains?: Record<string, unknown>[];\n    representativeFamilies?: Record<string, unknown>[];\n    unintegrated: Record<string, unknown>[];\n    other: Array<MinimalFeature>;\n  } | null>(null);\n  const processData = useProcessData<EntryMetadata>(\n    (\n      data?.payload as PayloadList<\n        EndpointWithMatchesPayload<EntryMetadata, MatchI>\n      >\n    )?.results,\n    'protein',\n  );\n  useEffect(() => {\n    const payload = data?.payload as PayloadList<\n      EndpointWithMatchesPayload<EntryMetadata>\n    >;\n    if (data && !data.loading) {\n      if (processData) {\n        onMatchesLoaded?.(payload?.results || []);\n        const {\n          interpro,\n          unintegrated,\n          representativeDomains,\n          representativeFamilies,\n          other,\n        } = processData;\n        setProcessedData({\n          interpro,\n          unintegrated,\n          representativeDomains,\n          representativeFamilies,\n          other,\n        });\n        onFamiliesFound?.(interpro.filter((entry) => entry.type === 'family'));\n      }\n    }\n  }, [data, processData]);\n\n  if (data?.loading && dataFeatures?.loading) return <Loading />;\n  const payload = data?.payload as PayloadList<\n    EndpointWithMatchesPayload<EntryMetadata>\n  >;\n  if (!payload?.results) {\n    const edgeCaseText = edgeCases.get(STATUS_TIMEOUT);\n    if ((data?.payload as ErrorPayload)?.detail === 'Query timed out')\n      return <EdgeCase text={edgeCaseText || ''} status={STATUS_TIMEOUT} />;\n  }\n  if (!processedData) return null;\n  const {\n    interpro,\n    unintegrated,\n    other,\n    representativeDomains,\n    representativeFamilies,\n  } = processedData;\n  const mergedData = makeTracks({\n    interpro: interpro as Array<{ accession: string; type: string }>,\n    unintegrated: unintegrated as Array<{ accession: string; type: string }>,\n    other: other as Array<MinimalFeature>,\n    representativeDomains: representativeDomains as Array<MinimalFeature>,\n    representativeFamilies: representativeFamilies as Array<MinimalFeature>,\n  });\n  if (externalSourcesData.length) {\n    mergedData.external_sources = externalSourcesData;\n  }\n\n  if (dataResidues && !dataResidues.loading && dataResidues.payload) {\n    mergeResidues(mergedData, dataResidues.payload);\n  }\n\n  const getFeature = (\n    filter: string | string[],\n    mergedData: ProteinViewerDataObject,\n  ): ExtendedFeature[] => {\n    if (mergedData['other_features']) {\n      return (mergedData['other_features'] as ExtendedFeature[]).filter(\n        (entry) => {\n          const entryDB = entry.source_database;\n          if (entryDB) {\n            if (Array.isArray(filter))\n              return filter.some((item) => entryDB.includes(item));\n            else return filter.includes(entryDB);\n          }\n        },\n      );\n    }\n    return [];\n  };\n\n  const filterMobiDBLiteFeatures = (\n    mergedData: ProteinViewerDataObject,\n  ): ExtendedFeature[] => {\n    const mobiDBLiteEntries: ExtendedFeature[] = (\n      mergedData['other_features'] as ExtendedFeature[]\n    ).filter((k) => (k as ExtendedFeature).accession.includes('Mobidblt'));\n\n    const mobiDBLiteConsensusWithChildren: ExtendedFeature[] =\n      mobiDBLiteEntries.filter((entry) =>\n        entry.accession.includes('Consensus'),\n      );\n    const mobiDBLiteChildren: ExtendedFeature[] = mobiDBLiteEntries.filter(\n      (entry) => !entry.accession.includes('Consensus'),\n    );\n\n    if (mobiDBLiteConsensusWithChildren.length > 0) {\n      mobiDBLiteChildren.map((child) => {\n        child.protein = child.accession;\n      });\n      mobiDBLiteConsensusWithChildren[0].children = mobiDBLiteChildren;\n    }\n\n    return mobiDBLiteConsensusWithChildren;\n  };\n\n  if (dataFeatures && !dataFeatures.loading && dataFeatures.payload) {\n    mergeExtraFeatures(mergedData, dataFeatures?.payload);\n    mergedData['intrinsically_disordered_regions'] = filterMobiDBLiteFeatures(\n      mergedData,\n    ) as MinimalFeature[];\n\n    /* Splitting the \"other features\" section in mulitple subsets.\n       Using this logic we can go back to having the \"other_features\" section again.\n    */\n\n    // Create a section for each of the following types\n    const CPST = ['coils', 'phobius', 'signalp', 'tmhmm'];\n    mergedData['coiled-coils,_signal_peptides,_transmembrane_regions'] =\n      getFeature(CPST, mergedData) as MinimalFeature[];\n    mergedData['pfam-n'] = getFeature('pfam-n', mergedData) as MinimalFeature[];\n    mergedData['short_linear_motifs'] = getFeature(\n      'elm',\n      mergedData,\n    ) as MinimalFeature[];\n    mergedData['funfam'] = getFeature('funfam', mergedData) as MinimalFeature[];\n\n    if (Object.keys(mergedData).includes('region')) {\n      mergedData['spurious_proteins'] = mergedData['region'];\n      delete mergedData['region'];\n    }\n\n    //\n\n    // Filter the types above out of the \"other_features\" section\n    const toRemove = CPST.concat([\n      'pfam-n',\n      'short_linear_motifs',\n      'mobidblt',\n      'funfam',\n      'elm',\n    ]);\n    mergedData['other_features'] = mergedData['other_features'].filter(\n      (entry) => {\n        return !toRemove.some((item) => entry.source_database?.includes(item));\n      },\n    );\n\n    /* End of logic for splitting \"other_features\" */\n  }\n\n  if (\n    (!Object.keys(mergedData).length ||\n      !Object.values(mergedData)\n        .map((x) => x.length)\n        .reduce((agg, v) => agg + v, 0)) &&\n    !data?.loading &&\n    !dataFeatures?.loading &&\n    !dataResidues?.loading\n  ) {\n    return <Callout type=\"info\">No entries match this protein.</Callout>;\n  }\n\n  return (\n    <>\n      <DomainsOnProteinLoaded\n        title={title}\n        mainData={mainData}\n        dataMerged={mergedData}\n        dataConfidence={dataConfidence}\n        dataVariation={dataVariation}\n        dataProteomics={dataProteomics}\n        loading={\n          data?.loading ||\n          dataFeatures?.loading ||\n          dataResidues?.loading ||\n          false\n        }\n        // Disabling Conservation until hmmer is working\n        // conservationError={conservation.error}\n        // showConservationButton={showConservationButton}\n        // handleConservationLoad={fetchConservationData}\n      >\n        {children}\n      </DomainsOnProteinLoaded>\n    </>\n  );\n};\n\nconst getRelatedEntriesURL = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'entry' },\n      protein: { isFilter: true, db: 'uniprot', accession },\n      entry: { db: 'all' },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n      query: {\n        page_size: 200,\n        extra_fields: 'hierarchy,short_name',\n      },\n    });\n  },\n);\n\nconst getExtraURL = (query: string) =>\n  createSelector(\n    (state: GlobalState) => state.settings.api,\n    (state: GlobalState) => state.customLocation.description,\n    (\n      { protocol, hostname, port, root }: ParsedURLServer,\n      description: InterProDescription,\n    ) => {\n      const url = format({\n        protocol,\n        hostname,\n        port,\n        pathname: root + descriptionToPath(description),\n        query: {\n          [query]: null,\n        },\n      });\n      return url;\n    },\n  );\n\nconst getVariationURL = createSelector(\n  (state: GlobalState) => state.settings.proteinsAPI,\n  (state: GlobalState) =>\n    state.customLocation.description.protein?.accession || '',\n  ({ protocol, hostname, port, root }: ParsedURLServer, accession: string) => {\n    const url = format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + 'variation/' + accession,\n    });\n    return url;\n  },\n);\n\nconst getPTMPayload = createSelector(\n  (state: GlobalState) => state.settings.proteinsAPI,\n  (state: GlobalState) =>\n    state.customLocation.description.protein?.accession || '',\n  ({ protocol, hostname, port, root }: ParsedURLServer, accession: string) => {\n    const url = format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + 'proteomics/ptm/' + accession,\n    });\n    return url;\n  },\n);\n\nexport default loadExternalSources(\n  loadData<AlphafoldPayload, 'Prediction'>({\n    getUrl: getAlphaFoldPredictionURL,\n    propNamespace: 'Prediction',\n  } as LoadDataParameters)(\n    loadData<AlphafoldConfidencePayload, 'Confidence'>({\n      getUrl: getConfidenceURLFromPayload('Prediction'),\n      propNamespace: 'Confidence',\n    } as LoadDataParameters)(\n      loadData<ExtraFeaturesPayload, 'Features'>({\n        getUrl: getExtraURL('extra_features'),\n        propNamespace: 'Features',\n      } as LoadDataParameters)(\n        loadData<ResiduesPayload, 'Residues'>({\n          getUrl: getExtraURL('residues'),\n          propNamespace: 'Residues',\n        } as LoadDataParameters)(\n          loadData<ProteinsAPIProteomics, 'Proteomics'>({\n            getUrl: getPTMPayload,\n            propNamespace: 'Proteomics',\n          } as LoadDataParameters)(\n            loadData<ProteinsAPIVariation, 'Variation'>({\n              getUrl: getVariationURL,\n              propNamespace: 'Variation',\n            } as LoadDataParameters)(\n              loadData(getRelatedEntriesURL as LoadDataParameters)(\n                DomainOnProteinWithoutData,\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport loadable from 'higherOrder/loadable';\nimport { createSelector } from 'reselect';\n\nimport { format } from 'url';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { useProcessData } from 'components/ProteinViewer/utils';\nimport {\n  getAlphaFoldPredictionURL,\n  getConfidenceURLFromPayload,\n} from 'components/AlphaFold/selectors';\nimport { Selection } from 'components/Structure/ViewerAndEntries';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\n\nimport {\n  flattenTracksObject,\n  makeTracks,\n} from 'components/Related/DomainsOnProtein/DomainsOnProteinLoaded';\n\nconst ProteinViewer = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"protein-viewer\" */ 'components/ProteinViewer'),\n  loading: null,\n});\n\n/* Processing of the payload needs to be slightly different\nto add tracks to the groups object instead of the dataSorted object */\nexport const addConfidenceTrack = (\n  dataConfidence: RequestedData<AlphafoldConfidencePayload>,\n  protein: string,\n  tracks: ProteinViewerDataObject,\n) => {\n  if (dataConfidence?.payload?.confidenceCategory?.length) {\n    tracks['alphafold_confidence'] = [];\n    tracks['alphafold_confidence'][0] = {\n      accession: `confidence_af_${protein}`,\n      data: dataConfidence.payload.confidenceCategory.join(''),\n      type: 'confidence',\n      protein,\n      source_database: 'alphafold',\n    };\n  }\n};\n\ntype Props = {\n  protein: string;\n  onChangeSelection: (s: Selection[] | null) => void;\n  isSplitScreen: boolean;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<{ metadata: ProteinMetadata }, 'Protein'>,\n    LoadDataProps<AlphafoldConfidencePayload, 'Confidence'>,\n    LoadDataProps<AlphafoldPayload, 'Prediction'>,\n    LoadDataProps<PayloadList<EndpointWithMatchesPayload<EntryMetadata>>> {}\nconst ProteinViewerForAlphafold = ({\n  data,\n  protein,\n  dataProtein,\n  dataConfidence,\n  onChangeSelection,\n  isSplitScreen = false,\n}: LoadedProps) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const [fixedSelection, _setFixedSelection] = useState<Selection[]>([]);\n  const [hoverSelection, _setHoverSelection] = useState<Selection[]>([]);\n  const hoverSelectionRef = useRef(hoverSelection);\n  const fixedSelectionRef = useRef(fixedSelection);\n  const processedData = useProcessData(data?.payload?.results, 'protein');\n  const setFixedSelection = (data: Selection[]) => {\n    fixedSelectionRef.current = data;\n    _setFixedSelection(data);\n  };\n  const setHoverSelection = (data: Selection[]) => {\n    hoverSelectionRef.current = data;\n    _setHoverSelection(data);\n  };\n  useEffect(() => {\n    const selection = [...hoverSelection, ...fixedSelection];\n    onChangeSelection(selection.length ? selection : null);\n  }, [fixedSelection, hoverSelection]);\n  useEffect(() => {\n    containerRef.current?.addEventListener('change', (rawEvent: Event) => {\n      const event = rawEvent as CustomEvent;\n      if (!event.detail) return;\n      const { eventType, highlight } = event.detail;\n      switch (eventType) {\n        case 'click':\n          if (fixedSelectionRef.current.length) {\n            setFixedSelection([]);\n          } else {\n            setFixedSelection(hoverSelectionRef.current);\n          }\n          break;\n        case 'mouseover': {\n          const colour =\n            parseInt(event?.detail?.feature?.color?.substring(1), 16) || 0;\n\n          const selection =\n            highlight?.split(',').map((block: string) => {\n              const parts = block.split(':');\n              const start = Number(parts?.[0]) || 1;\n              const end = Number(parts?.[1]) || 1;\n              return { chain: 'A', start, end, colour };\n            }) || [];\n          setHoverSelection(selection);\n          break;\n        }\n        case 'mouseout':\n          setHoverSelection([]);\n          break;\n        default:\n          break;\n      }\n    });\n  }, [containerRef.current]);\n  if (\n    !data ||\n    data.loading ||\n    !dataProtein ||\n    dataProtein.loading ||\n    !processedData\n  )\n    return <Loading />;\n  const {\n    interpro,\n    unintegrated,\n    representativeDomains,\n    representativeFamilies,\n  } = processedData;\n\n  const groups = makeTracks({\n    interpro: interpro as Array<{ accession: string; type: string }>,\n    unintegrated: unintegrated as Array<{ accession: string; type: string }>,\n    representativeDomains: representativeDomains as Array<MinimalFeature>,\n    representativeFamilies: representativeFamilies as Array<MinimalFeature>,\n  });\n\n  if (groups.domain) {\n    groups.domains = groups.domain.slice();\n    groups.domain = [];\n  }\n\n  if (groups.family) {\n    groups.families = groups.family.slice();\n    groups.family = [];\n  }\n\n  if (dataConfidence) addConfidenceTrack(dataConfidence, protein, groups);\n  const tracks = flattenTracksObject(groups);\n\n  const mainTracks = [\n    'alphafold confidence',\n    'domains',\n    'families',\n    'active site',\n    'conserved site',\n  ];\n\n  const hideCategories = {\n    'alphafold confidence': false,\n    domains: false,\n    families: false,\n    'active site': false,\n    'conserved site': false,\n  };\n\n  if (!dataProtein.payload?.metadata) return null;\n  return (\n    <div ref={containerRef}>\n      <ProteinViewer\n        protein={dataProtein.payload.metadata}\n        data={tracks}\n        mainTracks={mainTracks}\n        hideCategories={hideCategories}\n        title=\"Protein domains\"\n        showOptions={!isSplitScreen}\n      />\n    </div>\n  );\n};\n\nconst getProteinURL = createSelector(\n  (state) => state.settings.api,\n  (_, props) => props.protein,\n  ({ protocol, hostname, port, root }, accession) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'protein' },\n      protein: { db: 'uniprot', accession },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n    });\n  },\n);\nconst getInterproRelatedEntriesURL = createSelector(\n  (state) => state.settings.api,\n  (_, props) => props.protein,\n  ({ protocol, hostname, port, root }, protein) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'entry' },\n      entry: { db: 'all' },\n      protein: { isFilter: true, db: 'uniprot', accession: protein },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n      query: {\n        page_size: 200,\n        extra_fields: 'short_name',\n      },\n    });\n  },\n);\n\nexport default loadData<AlphafoldPayload, 'Prediction'>({\n  getUrl: getAlphaFoldPredictionURL,\n  propNamespace: 'Prediction',\n} as LoadDataParameters)(\n  loadData<AlphafoldConfidencePayload, 'Confidence'>({\n    getUrl: getConfidenceURLFromPayload('Prediction'),\n    propNamespace: 'Confidence',\n  } as LoadDataParameters)(\n    loadData<{ metadata: ProteinMetadata }, 'Protein'>({\n      getUrl: getProteinURL,\n      propNamespace: 'Protein',\n    } as LoadDataParameters)(\n      loadData(getInterproRelatedEntriesURL as LoadDataParameters)(\n        ProteinViewerForAlphafold,\n      ),\n    ),\n  ),\n);\n","'use strict';\nvar $TypeError = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nmodule.exports = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');\n  return it;\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        doesNotExceedSafeInteger(targetIndex + 1);\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));\n    return A;\n  }\n});\n","'use strict';\n// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n"],"names":["getAlphaFoldPredictionURL","createSelector","state","settings","alphafold","customLocation","description","protein","accession","_ref","protocol","hostname","port","root","query","format","pathname","getConfidenceURLFromPayload","namespace","_","props","dataPrediction","cifURL","_b","_a","payload","cifUrl","length","replace","selectRepresentativeData","entries","locationKey","type","flatRepresentativeData","entry","short_name","name","source_database","integrated","chain","location","fragment","fragments","start","end","representative","push","color","getTrackColor","EntryColorMode","MEMBER_DB","useProcessData","results","endpoint","useMemo","processData","dataResults","_loop","item","splice","toPlural","map","match","Object","assign","metadata","extra_fields","interpro","filter","toLowerCase","representativeData","domains","families","representativeDomains","representativeFamilies","interproMap","Map","ipro","unintegrated","concat","indexOf","NOT_MEMBER_DBS","has","forEach","get","children","sort","a","b","localeCompare","other","ProteinViewer","loadable","loader","loading","UNDERSCORE","FIRST_IN_ORDER","LASTS_IN_ORDER","byEntryType","_ref2","__","label","l","getBoundaries","undefined","Array","isArray","entry_protein_locations","_d","_c","sortTracks","aAccession","aStart","aEnd","bAccession","bStart","bEnd","makeTracks","_ref3","disorderedRegions","mergedData","groupByEntryType","domain","family","homologous_superfamily","repeat","other_features","values","group","flat","flattenTracksObject","tracksObject","_ref4","key","value","_ref5","types","features","mainData","dataMerged","dataConfidence","dataVariation","dataProteomics","conservationError","showConservationButton","handleConservationLoad","title","addConfidenceTrack","ok","filteredVariationPayload","f","clinicalSignificances","cs","includes","addVariationTrack","variationPayload","tracks","data","addPTMTrack","proteomicsPayload","uniqueResidues","pirsrFound","i","residues","currentResidue","residueStart","locations","residueEnd","_e","residueDescription","_g","_f","dictKey","toString","conserved_residues","slice","renamedTracks","sortedData","track","mainTracks","hideCategories","startsWith","representative_domains","ptm","funfam","React","show","ervationButton","mobiConsensus","mergeResidues","residuesPayload","residuesWithEntryDetails","newResidues","keys","acc","newAcc","substring","mergePIRSFRResidues","otherGroups","__rest","resAccession","matchedEntry","linked","child","childResAccession","unlinkedResidues","residue","residueEntry","status","panelsData","items","proteinAcc","content","structure","feature","loci","TYPES","F","S","D","T","I","region","disprot_consensus","full","getRepeatsDBURL","repeatsDB","skip","limit","getDisProtURL","disprot","orderByAccession","groups","g","getRelatedEntriesURL","api","newDesc","main","isFilter","db","descriptionToPath","page_size","getExtraURL","getVariationURL","proteinsAPI","getPTMPayload","WrappedComponent","loadData","getUrl","propNamespace","dataResidues","dataFeatures","onMatchesLoaded","onFamiliesFound","externalSourcesData","processedData","setProcessedData","useState","useEffect","Loading","edgeCaseText","edgeCases","STATUS_TIMEOUT","detail","EdgeCase","text","external_sources","getFeature","entryDB","some","mergeExtraFeatures","extraFeatures","newFeatures","loc","seq_feature","splitMobiFeatures","accA","dbA","accB","dbB","mobiDBLiteEntries","k","mobiDBLiteConsensusWithChildren","mobiDBLiteChildren","filterMobiDBLiteFeatures","CPST","toRemove","x","reduce","agg","v","DomainsOnProteinLoaded","Callout","displayName","ComponentWithExternalData","dataRepeatsDB","isStaleRepeatsDB","dataDisProt","isStaleDisProt","___","otherProps","newProps","formatRepeatsDB","formatDisProt","confidenceCategory","join","getProteinURL","getInterproRelatedEntriesURL","dataProtein","onChangeSelection","isSplitScreen","containerRef","useRef","fixedSelection","_setFixedSelection","hoverSelection","_setHoverSelection","hoverSelectionRef","fixedSelectionRef","setFixedSelection","current","setHoverSelection","selection","addEventListener","rawEvent","event","eventType","highlight","colour","parseInt","split","block","parts","Number","ref","showOptions","$TypeError","TypeError","module","exports","it","lengthOfArrayLike","doesNotExceedSafeInteger","bind","flattenIntoArray","target","original","source","sourceLen","depth","mapper","thisArg","element","elementLen","targetIndex","sourceIndex","mapFn","$","toObject","toIntegerOrInfinity","arraySpeciesCreate","proto","depthArg","arguments","O","this","A","addToUnscopables"],"sourceRoot":""}