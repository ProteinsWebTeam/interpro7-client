{"version":3,"file":"js/6585.module.taxonomy-page.974.js","mappings":"gSAoBMA,GAAkBC,EAAAA,EAAAA,KACrBC,GAAuBA,EAAMC,SAASC,MACtCF,GAAuBA,EAAMG,eAAeC,cAC5CJ,GAAuBA,EAAMG,eAAeE,SAC7C,CAAAC,EAAqCF,EAAWG,KAAgB,IAA/D,SAAEC,EAAQ,SAAEC,EAAQ,KAAEC,EAAI,KAAEC,GAAML,GAAe,OAAED,GAAQE,EAC1D,GAAIF,GAAUA,EAAOO,MAAM,SAAU,CACnC,IAAMC,EAAIC,OAAAC,OAAAD,OAAAC,OAAA,GACLX,GAAW,CACdY,SAAU,CACRC,GAAI,UACJC,UAAWb,KAGf,IACE,OAAOc,EAAAA,EAAAA,QAAO,CACZX,WACAC,WACAC,OACAU,SAAUT,GAAOU,EAAAA,EAAAA,GAAkBR,IAEvC,CAAE,MAAAS,GACA,MACF,CACF,MAAO,GAAIjB,GAAUA,EAAOO,MAAM,YAChC,IACE,OAAOO,EAAAA,EAAAA,QAAO,CACZX,WACAC,WACAC,OACAU,SAAUT,GAAOU,EAAAA,EAAAA,GAAkBjB,GACnCC,OAAQ,oBAAoBA,GAEhC,CAAE,MAAAkB,GACA,MACF,CACF,IAIJ,SAAeC,EAAAA,EAAAA,GAAS1B,EAAxB,EA9CyB2B,IAA4C,IAA3C,KAAEC,EAAI,iBAAEC,GAA+BF,EAI/D,OAHAG,EAAAA,EAAAA,YAAU,KACRD,EAAiBD,IAASA,EAAKG,QAAUH,EAAKI,QAAU,KAAK,IAExD,IAAI,I,gDCJPC,GAAeC,EAAAA,EAAAA,GAAS,CAC5BC,OAAQA,IACN,yDAGFJ,SAAS,IAELK,GAAYF,EAAAA,EAAAA,GAAS,CACzBC,OAAQA,IACN,+BACFJ,SAAS,IAGLM,EAAsB,IAAIC,IAChC,IAAK,IAAMC,KAAWC,EAAAA,QAAOC,MAAMvB,SAASwB,SAC1CL,EAAoBM,IAAIJ,EAASG,EAAAA,EAASE,IAAIL,IAGhD,IAAMM,EAAc,eAwBdC,GAAkB7C,EAAAA,EAAAA,KACrBC,GAAuBA,EAAMG,eAAeE,SAC5CA,IAAM,CAAQA,aAGjB,SAAewC,EAAAA,EAAAA,IAAQD,EAAvB,EAxBiBnB,IAAsB,IAArB,OAAEpB,GAAeoB,GAC1BqB,EAAWC,IAAgBC,EAAAA,EAAAA,UAEhC,MACIC,EAAa5C,GAAWA,EAAOA,OACrC,OACE6C,EAAAA,cAAAA,EAAAA,SAAA,KACGD,GAAcC,EAAAA,cAACC,EAAgB,CAACxB,iBAAkBoB,IACnDG,EAAAA,cAACE,EAAAA,EAAY,CACXC,eAAgBV,EAChBW,uBAAwBpB,EACxBH,aAAcA,EACdwB,oBAAqBpB,EACrBqB,WAAaP,GAAcH,GAAc,OAE1C,G","sources":["webpack://interpro7-client/./src/components/Taxonomy/ExactMatchSearch/index.tsx","webpack://interpro7-client/./src/pages/Taxonomy/index.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\n\ntype Props = {\n  onSearchComplete: (payload?: TaxonommyTreePayload | null) => void;\n};\ninterface LoadedProps extends Props, LoadDataProps<TaxonommyTreePayload> {}\n\nconst ExactMatchSearch = ({ data, onSearchComplete }: LoadedProps) => {\n  useEffect(() => {\n    onSearchComplete(data && !data.loading ? data.payload : null);\n  });\n  return null;\n};\n\nconst getURLFromState = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search as { search: string },\n  ({ protocol, hostname, port, root }, description, { search }) => {\n    if (search && search.match(/^\\d+$/)) {\n      const desc = {\n        ...description,\n        taxonomy: {\n          db: 'uniprot',\n          accession: search,\n        },\n      };\n      try {\n        return format({\n          protocol,\n          hostname,\n          port,\n          pathname: root + descriptionToPath(desc),\n        });\n      } catch {\n        return;\n      }\n    } else if (search && search.match(/^[\\w ]+$/)) {\n      try {\n        return format({\n          protocol,\n          hostname,\n          port,\n          pathname: root + descriptionToPath(description),\n          search: `?scientific_name=${search}`,\n        });\n      } catch {\n        return;\n      }\n    }\n  },\n);\n\nexport default loadData(getURLFromState as LoadDataParameters)(\n  ExactMatchSearch,\n);\n","import React, { useState } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport ExactMatchSearch from 'components/Taxonomy/ExactMatchSearch';\nimport loadable from 'higherOrder/loadable';\n\nimport subPages from 'subPages';\nimport config from 'config';\n\nimport EndPointPage from '../endpoint-page';\n\nconst SummaryAsync = loadable({\n  loader: () =>\n    import(\n      /* webpackChunkName: \"taxonomy-summary\" */ 'components/Taxonomy/Summary'\n    ),\n  loading: false,\n});\nconst ListAsync = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"taxonomy-list\" */ 'components/Taxonomy/List'),\n  loading: false,\n});\n\nconst subPagesForTaxonomy = new Map();\nfor (const subPage of config.pages.taxonomy.subPages as Array<string>) {\n  subPagesForTaxonomy.set(subPage, subPages.get(subPage));\n}\n\nconst childRoutes = /(\\d+)|(all)/i;\n\ntype Props = {\n  search?: InterProLocationSearch;\n};\nconst Taxonomy = ({ search }: Props) => {\n  const [accSearch, setAccSearch] = useState<\n    TaxonommyTreePayload | null | undefined\n  >(null);\n  const searchTerm = search && (search.search as string);\n  return (\n    <>\n      {searchTerm && <ExactMatchSearch onSearchComplete={setAccSearch} />}\n      <EndPointPage\n        subpagesRoutes={childRoutes}\n        listOfEndpointEntities={ListAsync}\n        SummaryAsync={SummaryAsync}\n        subPagesForEndpoint={subPagesForTaxonomy}\n        exactMatch={(searchTerm && accSearch) || null}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.search,\n  (search) => ({ search }),\n);\n\nexport default connect(mapStateToProps)(Taxonomy);\n"],"names":["getURLFromState","createSelector","state","settings","api","customLocation","description","search","_ref2","_ref3","protocol","hostname","port","root","match","desc","Object","assign","taxonomy","db","accession","format","pathname","descriptionToPath","_a","_b","loadData","_ref","data","onSearchComplete","useEffect","loading","payload","SummaryAsync","loadable","loader","ListAsync","subPagesForTaxonomy","Map","subPage","config","pages","subPages","set","get","childRoutes","mapStateToProps","connect","accSearch","setAccSearch","useState","searchTerm","React","ExactMatchSearch","EndPointPage","subpagesRoutes","listOfEndpointEntities","subPagesForEndpoint","exactMatch"],"sourceRoot":""}