{"version":3,"file":"js/8053.module.ipscan-summary.c2c.js","mappings":"6MAgBaA,EAAYC,I,IAAA,GACvBC,EAAE,QACFC,EAAO,KACPC,EAAI,GACJC,EAAE,IACFC,EAAG,UACHC,EAAS,SACTC,EAAQ,YACRC,GAAWR,EACRS,E,yUAAIC,CAAAV,EATgB,yEAWjBW,EAAiC,CACrCR,KAAMA,GAAQC,IAAOF,GAAW,IAAIU,QAAQ,OAAQC,OAAOZ,KAS7D,OAPIK,IAAWK,EAAML,UAAYA,GAC7BD,GACFM,EAAMN,IAAMA,EAAIS,SAAS,YAAcT,EAASA,EAAG,YACnDM,EAAMN,IAAMA,EAAIS,SAAS,cAAgBT,EAASA,EAAG,eAErDM,EAAMN,IAAM,sBAGZU,EAAAA,cAACC,EAAAA,EAAIC,OAAAC,OAAA,GAAKT,EAAUE,GACjBJ,EACI,EAIXR,EAASoB,YAAc,WAEvB,S,wFC1CMC,EAAUpB,I,IAAA,GACdC,EAAE,OACFoB,EAAM,UACNf,EAAS,SACTC,GAAQP,EACLW,E,yUAAKD,CAAAV,EALM,wCAQRsB,EAA4B,iBAAPrB,EAAkBA,EAAGW,QAAQ,IAAK,KAAOX,EACpE,OACEc,EAAAA,cAAChB,EAAAA,EAAQkB,OAAAC,OAAA,CACPjB,GAAIqB,EACJD,OAAQA,GAAU,SAClBnB,QANY,+CAOPI,EAAY,CAAEA,aAAc,CAAC,EAC9BK,GAEHJ,GAAYe,EACJ,EAGfF,EAAOD,YAAc,SAErB,S,uLChBMI,GAAMC,EAAAA,EAAAA,GAAUC,EAAAA,EAAOC,EAAAA,GAQvBC,EAAiB,IAAIC,IAAI,CAC7B,CAAC,qBAAsB,MACvB,CAAC,qBAAsB,MACvB,CAAC,qBAAsB,QAGnBC,GAAgBC,EAAAA,EAAAA,GAAS,CAC7BC,OAAQA,IAAM,gCACdC,QAASA,IAAM,OAGXC,EAAqBC,IAAY,CACrC,QAAS,aACT,MAAO,WACPC,WAAYD,IAwGd,QAnFgBE,IAA4D,IAA3D,MAAEC,EAAK,KAAEC,EAAI,GAAEC,EAAE,aAAEC,GAAe,GAAqBJ,EAChEK,EAAW,IAAIb,IAAIS,EAAMK,KAAKC,GAAS,CAACA,EAAKR,WAAYQ,MACzDC,EAASC,MAAMC,KAAKL,EAASM,UAAUC,QAAO,CAACC,EAAKN,KACpDA,EAAKO,eAAiBP,EAAKQ,gBAE7BR,EAAKS,SAAW,CACdC,KAAMV,EAAKO,cACXI,KAAMX,EAAKQ,gBAGf,IAAMI,EAAUZ,EAAKS,SAASC,KAM9B,OALIpC,OAAOuC,KAAKP,GAAKnC,SAASyC,IAC5BN,EAAIM,GAA6BE,KAAKd,GAIjCM,CAAG,GAzDY,CACxBS,mBAAoB,GACpBC,mBAAoB,GACpBC,mBAAoB,KAyDhBC,EAAQ,aACRC,EAAQ,WACC,UAATxB,QAAkC,IAAPC,EACJ,aAArBA,EAAGwB,cACLF,GAAS,kCAETA,GAAS,kBAAkBtB,EAC3BuB,EAAWvB,EAAE,IAAIuB,IAGnBD,GAAS,0CACTC,EAAQ,YAAYA,GAEtB,IAAME,EAAgB/C,OAAOgD,QAAQrB,GAC/BsB,EAAOF,EAAcG,OAAMC,IAAA,IAAE,CAAEhB,GAASgB,EAAA,OAAMhB,EAASiB,MAAM,IACnE,OACEtD,EAAAA,cAAA,yBAAqB,aACjByB,GACAzB,EAAAA,cAAA,OAAKT,UAAWiB,EAAI,aAClBR,EAAAA,cAACuD,EAAAA,EAAO,CAACT,MAAOA,GACd9C,EAAAA,cAAA,MAAIT,UAAWiB,EAAI,UAAWuC,KAIpC/C,EAAAA,cAAA,OAAKT,UAAWiB,EAAI,aAClBR,EAAAA,cAAA,OAAKT,UAAWiB,EAAI,eACjB2C,EACCnD,EAAAA,cAAA,wBAEAiD,EAActB,KAAI6B,IAAA,IAAEC,EAAKzB,GAAOwB,EAAA,OAC9BxD,EAAAA,cAAA,OAAKyD,IAAKA,GACRzD,EAAAA,cAAA,KAAGT,UAAWiB,EAAII,EAAe8C,IAAID,GAAM,aACxCA,EAAI5D,QAAQ,IAAK,MAEpBG,EAAAA,cAAA,MAAIT,UAAWiB,EAAI,YAChBwB,GAAUA,EAAOsB,OAChBtB,EAAOL,KAAIgC,IAAA,IAAC,WAAEvC,EAAU,KAAEkB,GAAMqB,EAAA,OAC9B3D,EAAAA,cAAA,MAAIyD,IAAKrC,GACPpB,EAAAA,cAACc,EAAa,CACZK,KAAMC,EACNwC,YAAa1C,IAGflB,EAAAA,cAACK,EAAAA,EAAM,CACLnB,GAAIkC,EACJ7B,UAAWiB,EAAI,WAAY,aAE1B8B,EAAI,KAAIlB,EAAU,KAElB,IAGPpB,EAAAA,cAAA,MAAIT,UAAWiB,EAAI,cAAY,SAG/B,MAKN,C,sYCvHRqD,GAAIpD,EAAAA,EAAAA,GAAUqD,EAAAA,EAASC,EAAAA,GA4FvBC,GAAkBC,EAAAA,EAAAA,KACrBC,GAAuBA,EAAMC,iBAC7BA,IAAc,CAAQA,qBAGzB,SAAeC,EAAAA,EAAAA,IAAQJ,EAAiB,CAAEK,mBAAkBA,EAAAA,IAA5D,EAxF0BhD,IAKd,IALe,QACzBiD,EAAO,IACPC,EAAG,eACHJ,EAAc,mBACdE,GACMhD,EACN,IAAKiD,IAAYH,EAAgB,OAAOnE,EAAAA,cAACwE,EAAAA,EAAO,CAACC,QAAQ,IACzD,IAAMC,EAAWJ,EACjB,GAAII,EAASC,mBAAoC,iBAARJ,EAAkB,CACzD,IAAMK,EAAaF,EAASC,kBAAkBJ,GAY9C,OACEvE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6E,EAAAA,EAAO,CAACtD,KAAK,OAAOuD,UAAQ,EAACC,KAAK,YACjC/E,EAAAA,cAAA,gCACAA,EAAAA,cAAA,mKAMFA,EAAAA,cAAA,WAAST,UAAWsE,EAAE,gBACpB7D,EAAAA,cAAA,iCACAA,EAAAA,cAAA,eAAU0E,EAASM,gBAAgB,GAAG9F,KAExCc,EAAAA,cAAA,WAAST,UAAWsE,EAAE,gBACpB7D,EAAAA,cAAA,6BACAA,EAAAA,cAAA,eACEA,EAAAA,cAAA,UAAQiF,SA3BSC,IACvB,IAAMC,EAASD,EAAM5E,OAA6B6E,MAClDd,SAAAA,EAAkBnE,OAAAC,OAAAD,OAAAC,OAAA,GACbgE,GAAc,CACjBiB,OAAMlF,OAAAC,OAAAD,OAAAC,OAAA,GACDgE,EAAeiB,QAAM,CACxBb,IAAKY,MAEP,EAmBuCA,MAAOZ,GACvCG,EAASC,kBAAkBhD,KAAI,CAAC0D,EAAOC,IACtCtF,EAAAA,cAAA,UAAQyD,IAAK6B,EAAGH,MAAOG,GACpBD,EAAME,OAAM,KAAIF,EAAMG,MAAK,MAAKH,EAAMI,UAMjDzF,EAAAA,cAAA,WAAST,UAAWsE,EAAE,gBACpB7D,EAAAA,cAAA,oCAEAA,EAAAA,cAAA,eACEA,EAAAA,cAAA,WAAST,UAAWsE,EAAE,gBACpB7D,EAAAA,cAAA,0BACAA,EAAAA,cAAA,eACEA,EAAAA,cAACC,EAAAA,EAAI,CACHZ,GAAIgE,IAAA,IAAC,YAAEqC,GAAarC,EAAA,MAAM,CACxBqC,YAAWxF,OAAAC,OAAAD,OAAAC,OAAA,GACNuF,GAAW,CACd,CAACA,EAAYC,KAAKlC,KAAIvD,OAAAC,OAAAD,OAAAC,OAAA,GACjBuF,EAAYA,EAAYC,KAAKlC,MAAI,CACpCmC,OAAQ,eAGZR,OAAQ,CAAEb,OACVsB,KAAM,cACP,GAEAjB,EAAWY,MAAK,IAAGZ,EAAWa,OAIrCzF,EAAAA,cAAA,WAAST,UAAWsE,EAAE,gBACpB7D,EAAAA,cAAA,wBACAA,EAAAA,cAAA,eAAU4E,EAAWW,WAMjC,CACA,OAAO,IAAI,I,2DCpGPO,EAAqB,CAAC,UACtBC,EAAqB,CAAC,SAiDtBC,EAAkBC,GACfA,EAAMC,UACVvE,KAAIN,IAAc,I,SAAb,MAAE8E,GAAO9E,EACb,OAAA8E,EACI,CACEC,WAA2B,QAAhBnH,EAAAgH,aAAK,EAALA,EAAOI,iBAAS,IAAApH,OAAA,EAAAA,EAAEmH,aAAaH,aAAK,EAALA,EAAOG,WACjDF,UAAWC,EAAMxE,KAAK2E,IAAI,CACxBZ,aAAgBY,EAAKvD,OAAS,KAAKuD,EAAKvD,MAAQ,KAAO,IACrDuD,EAAKZ,YAEPa,UAAWD,EAAKE,kBAElBjF,KAAM,UACNkF,iBACoD,QAAlDC,EAAyC,QAAzCC,EAAgB,QAAhBC,EAAAX,aAAK,EAALA,EAAOI,iBAAS,IAAAO,OAAA,EAAAA,EAAEC,+BAAuB,IAAAF,OAAA,EAAAA,EAAEG,eAAO,IAAAJ,OAAA,EAAAA,EAAE1D,gBACpDiD,EAAMQ,iBAEV,IAAI,IAETM,OAAOC,SAGNC,EAAqBC,IACzB,IAAI1B,EAAQ2B,IACR1B,GAAM,IAKV,OAJAyB,EAASX,UAAUa,SAASC,IAC1B7B,EAAQ8B,KAAKC,IAAI/B,EAAO6B,EAAG7B,OAC3BC,EAAM6B,KAAKE,IAAI/B,EAAK4B,EAAG5B,IAAI,IAEtB,CAACD,EAAOC,EAAI,E,WC7CfjF,GAAMC,EAAAA,EAAAA,GAAUqD,EAAAA,EAASC,EAAAA,EAAO0D,EAAAA,GAEhCC,GAAWC,EAAAA,EAAAA,GAAS,CAAEC,OAAQ,MAAOC,aAAc,SAqVnDC,GAAc7D,EAAAA,EAAAA,KACjBC,GAAuBA,EAAMC,eAAeuB,YAAYqC,OAAOC,MAC/D9D,GAAuBA,EAAM+D,OAC9B,CAACC,EAAcC,IACNjI,OAAO8B,OAAOmG,GAAU,CAAC,GAAGC,MAChCJ,GACCA,EAAIK,SAASC,WAAaJ,GAC1BF,EAAIK,SAASE,UAAYL,MAK3BlE,GAAkBC,EAAAA,EAAAA,KACrBC,GAAuBA,EAAMC,iBAC7BD,GAAuBA,EAAMC,eAAeuB,YAAYqC,OAAOC,KAAO,KACtE9D,GACCA,EAAMC,eAAeuB,YAAYqC,OAAO3B,WAAa,IACvD0B,GACC5D,GAAuBA,EAAMC,eAAeiB,OAAOb,MACnDL,GAAuBA,EAAMsE,SAASC,MACtCvE,GAAuBA,EAAMsE,SAASE,SACvC,CAACvE,EAAgB+D,EAAcS,EAAcX,EAAKzD,EAAKkE,EAAKC,K,UAAW,MAAC,CACtEvE,iBACA+D,eACAS,eACAC,QAAoC,OAA1BZ,aAAG,EAAHA,EAAKK,SAASQ,SAAkB,IAAM,IAChDtE,SAAoB,IAARA,EAAsBuE,OAAOvE,QAAOwE,EAChDR,SAAsB,QAAbtJ,EAAA+I,aAAG,EAAHA,EAAKK,gBAAQ,IAAApJ,OAAA,EAAAA,EAAEsJ,UAAW,GACnCD,UAAuB,QAAb1B,EAAAoB,aAAG,EAAHA,EAAKK,gBAAQ,IAAAzB,OAAA,EAAAA,EAAE0B,WAAY,GACrCU,OAAqB,QAAbrC,EAAAqB,aAAG,EAAHA,EAAKK,gBAAQ,IAAA1B,OAAA,EAAAA,EAAEqC,OACvBP,MACAC,SACD,IAGH,SAAetE,EAAAA,EAAAA,IAAQJ,EAAiB,CAAEK,mBAAkBA,EAAAA,IAA5D,EAvRyBb,IAcb,I,KAdc,aACxB0E,EAAY,aACZS,EAAY,QACZC,EAAO,OAGPI,EAAM,KACN7H,EAAI,aACJ8H,EAAY,IACZR,EAAG,OACHC,EAAM,IACNnE,EAAG,eACHJ,EAAc,mBACdE,GACMb,GACC0F,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,CAAC,IACvCC,EAAqBC,IAA0BF,EAAAA,EAAAA,UAEpD,IAsDF,IArDAG,EAAAA,EAAAA,YAAU,KACQ,MAAZX,QACUG,IAARxE,IACFF,SAAAA,EAAkBnE,OAAAC,OAAAD,OAAAC,OAAA,GAEXgE,GAAc,CACjBiB,OAAMlF,OAAAC,OAAAD,OAAAC,OAAA,GACDgE,EAAeiB,QAAM,CACxBb,IAAK,OAGT,GAGN,GACC,CAACA,KACJgF,EAAAA,EAAAA,YAAU,KACR,GAAIpI,EAAKmD,SAAW2E,EAAc,CAChC,IAAIO,EAAWrI,EAAKmD,QAAUnD,EAAKmD,QAAQmF,QAAQ,GAAKR,EACxD,GAAgB,MAAZL,EAAiB,CACnB,QAAYG,IAARxE,EAAmB,OAEpBiF,EAAiD7E,oBAElD6E,EAAYA,EACT7E,kBAAkBJ,GAAKmF,QAC1BJ,EAAuB,IAE3B,CACA,IAAMhF,EAAUkF,EACVG,ED9CaC,EACvBC,EACAC,K,UAEMZ,EAAwD,CAC5Da,aAAc,GACdC,eAAgB,GAChBC,SAAU,GACVC,eAAgB,GAChBC,uBAAwB,IAEpBJ,EAA4C,CAAC,EAC7CK,EAA6C,CAAC,EAChDC,EAAa,IAAIxJ,IACfyJ,EAAa,IAAIzJ,IACjB0J,EAAwB,GAAGC,EAAA,SAAAvE,GAG/B,IAAM,QAAEa,GAAYb,EAAMI,UAAUQ,wBAC9B4D,EAA8B,CAClCrE,UAAWH,EAAMI,UAAUD,UAC3B9D,KAAM2D,EAAMI,UAAUX,aAAeO,EAAMI,UAAU/D,KACrDoI,WAAYzE,EAAMI,UAAU/D,KAC5BmE,iBAAiBkE,EAAAA,EAAAA,IAAe7D,GAChC8D,eAAgBd,GAAkB,EAClC5D,UAAWD,EAAMC,UAAUvE,KAAKkJ,GAAQ3K,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACrC0K,GAAG,CACNC,UAAW7E,EAAM,YACjBM,UACEsE,EAAI,uBAAyBA,EAAI,sBAAsBvH,OACnDuH,EAAI,sBACJ,CAAC,CAAErF,MAAOqF,EAAIrF,MAAOC,IAAKoF,EAAIpF,UAEtCsF,MAAO9E,EAAM8E,MACbd,cAAUlB,EACV1C,eAAW0C,GAGPkB,EAAWjE,EAAeC,GAWhC,GATEgE,EAAS3G,OAAS,IACjByC,EAAmBhG,UAAsB,QAAbd,EAAAgL,aAAQ,EAARA,EAAW,UAAE,IAAAhL,OAAA,EAAAA,EAAEwH,kBAAmB,KAE/DyC,EAAWe,SAASvH,KAAIxC,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACrBsK,GAAc,CACjBrE,UAAW,WAAWqE,EAAerE,UACrC6D,cAGAe,EAAAA,GAAeC,IAAInE,GAQpB,OAPD2D,EAAehE,gBAAkBK,EAC7B2D,EAAerE,aAAagE,EAC9BA,EAAcK,EAAerE,WAAWF,UAAUxD,QAC7C+H,EAAevE,WAGpBkE,EAAcK,EAAerE,WAAaqE,EAC3C,EAGH,IA5KgBS,EAAiCC,EA4K3CC,GA5K2CD,EA8K/CV,GA9KcS,EA6KdZ,EAAW5G,IAAI+G,EAAerE,aA3KlC8E,EAAOhF,UAAYgF,EAAOhF,UAAUmF,OAAOF,aAAM,EAANA,EAAQjF,WAC5CgF,GAFaC,GAiLlB,GADAb,EAAWgB,IAAIF,EAAYhF,UAAWgF,GAClCnF,EAAMI,UAAUkF,MA5KGC,EACzBnF,EACAoF,EACApB,KAEA,IAAMjE,EAAYqF,EAASrF,UACrBmF,EAAqBlB,EAAW3G,IAAI0C,IAAc,CACtDA,YACA9D,KAAMmJ,EAAS/F,YACfgF,WAAYe,EAASnJ,KACrBmE,gBAAiB,WACjBiF,UAAW,CAAC,EACZlM,SAAU,GACV+B,KAAMkK,EAASlK,KAAKyB,eAEtBuI,EAAMG,UAAUrF,EAAUD,WAAaC,EACvCkF,EAAM/L,SAAWU,OAAO8B,OAAOuJ,EAAMG,WACrCrB,EAAWiB,IAAIlF,EAAWmF,EAAM,EA4J5BC,CAAmBJ,EAAanF,EAAMI,UAAUkF,MAAOlB,QAClD,GAAIvE,EAAmB/F,SAASqL,EAAY3E,iBACjDyC,EAAWc,eAAetH,KAAK0I,QAC1B,GAAIrF,EAAmBhG,SAASqL,EAAY3E,iBAAkB,CACnE,IAAMwD,EAAWjE,EAAeoF,GAC5BnB,EAAS,IAAuC,IAAjCA,EAAS,GAAG/D,UAAU5C,QACvC4F,EAAWgB,eAAexH,KAAKuH,EAAS,GAC5C,MACEF,EAAaqB,EAAYhF,WAAagF,EAGxC,IAAMO,EAA0BlB,EAAevE,UAAUa,QACtD8D,GAAQA,EAAIe,iBAEXD,EAAwBrI,QAC1BiH,EAAsB7H,KAAIxC,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACvBsK,GAAc,CACjBvE,UAAWyF,EACXtB,WAAkC,QAAtB1D,EAAe,QAAfC,EAAAX,EAAMI,iBAAS,IAAAO,OAAA,EAAAA,EAAE2E,aAAK,IAAA5E,OAAA,EAAAA,EAAEP,YAG1C,EAvEA,IAAK,IAAMH,KAAS4D,EAAOW,EAAAvE,GAyE3BiD,EAAWa,aAAe7J,OAAO8B,OAAO+H,GACxCb,EAAWc,eAAetH,QAAQxC,OAAO8B,OAAOoI,IAChD,IAAMyB,EAAiB/J,MAAMC,KAAKsI,EAAWrI,UAAUL,KAAKmK,IAC1D,IAAM5F,EAhJR1G,KAEA,IAAM8K,EAAsC,GAE5C9K,EAAS4H,SAAQ/D,IAAkB,IAAjB,UAAE6C,GAAW7C,EAC7BiH,EAAW5H,QAAQwD,EAAUvE,IAAIsF,GAAmB,IAGtDqD,EAAWyB,MAAK,CAACC,EAAGC,IACdD,EAAE,GAAKC,EAAE,GAAW,EACfD,EAAE,GAAKC,EAAE,IACTD,EAAE,GAAKC,EAAE,IADY,EAEvB,IAET,IAAMC,EAAwC,GAC1CC,EAA2C,KA8B/C,OA7BA7B,EAAWlD,SAAQ5D,IAAW,IAAT4I,EAAGC,GAAE7I,EAExB,GAAwB,OAApB2I,EAAJ,CAIA,IAAO3G,EAAOC,GAAO0G,EAGjBE,GAAK5G,IAGL2G,GAAK3G,EACS6B,KAAKC,IAAI9B,EAAK4G,GAAK/E,KAAKE,IAAIhC,EAAO4G,GAAK,GAhC3C,IAiCI9E,KAAKC,IAAI9B,EAAMD,EAAO6G,EAAID,GAAK,KAEVD,EAAgB,GAAKE,IAM7DH,EAAaxJ,KAAK,IAAIyJ,IACtBA,EAAkB,CAACC,EAAGC,IAlBtB,MAFEF,EAAkB,CAACC,EAAGC,EAoBA,IAG1BH,EAAaxJ,KAAK,IAAKyJ,GAAmB,CAAC,EAAG,KAGvCD,EAAavK,KAAIgC,IAAA,IAAE6B,EAAOC,GAAI9B,EAAA,MAAM,CACzC4C,UAAW,CAAC,CAAEf,QAAOC,QACtB,GAAE,EAiGiB6G,CAAkBR,EAAEtM,UACtC,OAAAU,OAAAC,OAAAD,OAAAC,OAAA,GACK2L,GAAC,CACJ5F,aAAS,IAOb,IAAK,IAAMqF,KAJXrC,EAAWa,aAAagC,MACtB,CAACQ,EAAIC,IACFA,EAAyBzB,MAASwB,EAAyBxB,QAE5Cc,GACb3C,EAAWqC,EAAMhK,QAAO2H,EAAWqC,EAAMhK,MAAQ,IACtD2H,EAAWqC,EAAMhK,MAAMmB,KAAK6I,GAM9B,OAJIhB,aAAqB,EAArBA,EAAuBjH,UACzB4F,EAAWiB,uBAAyBI,GAG/BrB,CAAU,ECjESU,CAAUtF,EAAQuF,QAASvF,EAAQwF,gBAGzD,GADAX,EAAcQ,GACVA,EAAc8C,OAAQ,CACxB,IAAMC,EAAiC,GACvC/C,EAAc8C,OAAOrF,SAASmE,IAC5B7D,EA1FUiF,EAAAtJ,EAElB+C,KACE,IAFF,SAAEwG,EAAQ,SAAEC,EAAQ,KAAEC,EAAI,KAAEC,GAAuB1J,EAG7CqC,EAA0C,CAC9CC,KAAM,CAAElC,IAAK,SACb8H,MAAO,CAAE/J,GAAI,WAAY4E,cAE3B,OAAO4G,EAAAA,EAAAA,QAAO,CACZJ,WACAC,WACAC,OACAG,SAAUF,GAAOG,EAAAA,EAAAA,GAAkBxH,IACnC,EA8EQiH,CAAYlE,EAAM8C,EAAmCnF,YACrD+G,MAAMhM,IACN,IAGMiM,EAAeC,MAHHlM,OAGY,EAHZA,EAGcmD,SAC5B8I,aAAY,EAAZA,EAAc/E,YAChBqE,EAAShK,KAAK0K,EAAa/E,UAC3BiB,EAAuB,IAAIoD,IAC7B,GACA,GAEN,CACF,IACC,CAACvL,EAAKmD,QAAS2E,EAAc1E,IAEhB,MAAZqE,QAA2BG,IAARxE,EAAmB,OAAO,KAEjD,IAAM+I,EAA4BnM,EAAKmD,QACnCnD,EAAKmD,QAAQmF,QAAQ,GACrBR,EACJ,IAAKqE,IAAgBtE,EAAQ,OAAOhJ,EAAAA,cAACwE,EAAAA,EAAO,MAC5C,IAAIgF,EAAWtJ,OAAAC,OAAA,GAAKmN,GAChBnM,EAAKmD,UACPkF,EAAS,wBAAsC,QAAZvK,EAAAkC,EAAKmD,eAAO,IAAArF,OAAA,EAAAA,EAAG,yBACpC,MAAZ2J,IACFY,EAAQtJ,OAAAC,OAAAD,OAAAC,OAAA,GACHqJ,GACCA,EAAsC7E,kBAAkBJ,GAAMmF,UAGtE,IAAMpF,EAAUkF,EACV+D,EA3IWC,EACjBlJ,EACA8B,K,MAEImH,EAA4C,QAAlCtO,EAACqF,aAAO,EAAPA,EAA4BmJ,aAAK,IAAAxO,OAAA,EAAAA,EAAEsO,QAClD,IAAKA,EAAS,CACZ,IAEM1D,EADJ,8EACoB6D,KAAKtH,GAC3B,GAAIyD,EAAS,CACX,IAAO8D,EAAGC,EAAG9B,EAAG+B,EAAGC,EAAIC,EAAIC,GAAMnE,EACjC0D,EAAUU,KAAKC,KAAKN,GAAI9B,EAAI,GAAI+B,GAAIC,GAAKC,GAAKC,EAChD,CACF,CACA,OAAOT,CAAO,EA6HEC,CAAWlJ,EAAS4D,GAE9BG,EAA0D,CAC9DjC,UAAW8B,EACX5E,OAAQgB,EAAQ6J,SAAS7K,OACzB6K,SAAU7J,EAAQ6J,SAClB7L,KAAM,CACJA,KAAM,6BACN8L,MAAO9J,EAAQ+J,KAAK,GAAG/L,OAIrBgM,EAnMoBzE,KAC1B,IAAM0E,EAAU,IAAI1N,IACpB,IAAK,IAAMoF,KAAS4D,EAClB,IAAK,IAAM,GAAE3K,EAAE,SAAEmD,EAAQ,KAAEC,KAAW2D,EAAMI,UAAUkF,OAAS,CAAC,GAC7DiD,SAAW,GACZD,EAAQjD,IAAIpM,EAAI,CACdmD,SAAU,CACRC,KAAMD,EAASW,cACfT,KAAMF,EAAS,IAEjBC,OACAlB,WAAYlC,IAIlB,OAAO4C,MAAMC,KAAKwM,EAAQvM,SAAS,EAoLXyM,CAAmBnK,EAAQuF,SAC7C6E,EAlLmB7E,KACzB,IAAM0E,EAAU,IAAI1N,IAEpB,IAAK,IAAMoF,KAAS4D,EAAS,CAC3B,IAAMrI,EAAKyE,EAAMI,UAAUQ,wBAAwBC,QAAQ9D,cACrDwL,EAAUvI,EAAMuI,SAAW,GAEtB,YAAPhN,GAAuC,IAAnBgN,EAAQlL,QAC9BkL,EAAQpH,SAAQ/F,IAA2B,IAA1B,GAAEnC,EAAE,SAAEmD,EAAQ,KAAEC,GAAMjB,EACpB,OAAbgB,GAA8B,OAATC,GACvBiM,EAAQjD,IAAIpM,EAAI,CACdmD,SAAU,CACRC,KAAMD,EAASW,cACfT,KAAMF,EAAS,IAEjBC,OACAlB,WAAYlC,GAEhB,GAGN,CAEA,OAAO4C,MAAMC,KAAKwM,EAAQvM,SAAS,EA2JZ2M,CAAkBrK,EAAQuF,UAE3C,SAAE+C,EAAQ,SAAEC,EAAQ,KAAEE,IAASrE,EACjCkG,GAAahC,EAAQ,KAAKC,EAAWE,GAAI,SACvC8B,GAAMZ,KAAKY,MACXC,GACHD,IAAOtB,GAAWsB,IAAOE,EAAAA,GACb,qBAAX/F,GACS,kBAAXA,EACF,GAAI8F,GAAS,CACX,IAAME,GAAkBC,KAAKC,UAAU5K,GACjC6K,GAAO,IAAIC,KAAK,CAACJ,IAAkB,CAAEzN,KAAM,qBACjDqN,GAAUS,IAAIC,gBAAgBH,GAChC,CAEA,IACMlJ,GADM,cACMyH,KAAKxF,GACjBqH,GAA0B,QAAV3I,EAAAX,cAAK,EAALA,GAAQ,UAAE,IAAAW,EAAAA,EAAIsB,EACpC,OACElI,EAAAA,cAAA,OAAKT,UAAWiB,EAAI,aAClBR,EAAAA,cAAA,eACEA,EAAAA,cAACwP,EAAAA,EAAkB,CAACC,cAAejG,EAAS,0BAE5CxJ,EAAAA,cAAC0P,EAAAA,EAAW,CACVnO,KAAK,WACL6E,UAAWuC,EACXrE,QAASA,EACT0E,OAAQA,EACR2G,SAAsB,MAAZ/G,IAGZ5I,EAAAA,cAAA,WAAST,UAAWiB,EAAI,gBACtBR,EAAAA,cAAA,uBACS,IACPA,EAAAA,cAACuD,EAAAA,EAAO,CAACT,MAAO,kBACd9C,EAAAA,cAAA,QACET,UAAWiB,EAAI,QAAS,OAAQ,eAAc,YACpC,IAAU,aACR,qBAIlBR,EAAAA,cAAA,WAASyH,MAAO,CAAEmI,QAAS,SACzB5P,EAAAA,cAACC,EAAAA,EAAI,CACHZ,GAAI,CACFqG,YAAa,CACXC,KAAM,CAAElC,IAAK,UACbsE,OAAQ,CACNC,IAAKE,EACL3G,KAAM,mBAKZvB,EAAAA,cAAC6P,EAAAA,EAAS,CAACzJ,UAAW8B,EAAcpF,MAAM,WAAY,KAExD9C,EAAAA,cAAC8P,EAAAA,EAAe,CACdC,YAAYC,EAAAA,EAAAA,gBAAe9H,GAC3B+H,YAAY,eAIlBjQ,EAAAA,cAAA,WAAST,UAAWiB,EAAI,gBACtBR,EAAAA,cAAA,wBACAA,EAAAA,cAAA,eACEA,EAAAA,cAACkQ,EAAAA,EAAa,CAAClH,OAAQA,MAqB3BhJ,EAAAA,cAACmQ,EAAiB,CAAC7L,QAASgJ,EAAa/I,IAAKA,IAC9CvE,EAAAA,cAAA,WAAST,UAAWiB,EAAI,gBACtBR,EAAAA,cAAA,iCACAA,EAAAA,cAAA,eACEA,EAAAA,cAACoQ,EAAAA,EAAM,CAAC/H,SAAUA,EAAU9D,IAAKA,MAIrCvE,EAAAA,cAAA,WAAST,UAAWiB,EAAI,gBACtBR,EAAAA,cAAA,2CACAA,EAAAA,cAAA,eACGqJ,EAAoB/F,OACnBtD,EAAAA,cAACqQ,EAAAA,EAAqB,CAACnN,QAASmG,IAEhCrJ,EAAAA,cAAA,KAAGT,UAAWiB,EAAI,yBAAuB,qBAMhD,CAAC,WAAY,gBAAiB,oBAAoBT,SAASiJ,IAC1DhJ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACsQ,EAAAA,GAAsB,CACrBC,SAAU,CAAElI,YACZmI,WAAYtH,EACZjI,SAAS,GAETjB,EAAAA,cAACyQ,EAAAA,GAAQ,CAACC,iBAAiB,GACzB1Q,EAAAA,cAAA,UACG,CAAC,MAAO,OAAQ,MAAO,MAAO,YAAY2B,KAAKJ,GAC9CvB,EAAAA,cAAA,MAAIyD,IAAKlC,GACPvB,EAAAA,cAACC,EAAAA,EAAI,CACHK,OAAO,SACPlB,KACE0P,GACIF,GACGA,GAAO,IAAIW,GAAa,IAAIhO,EAErCoP,WAAW,YACXC,SAAQ,gBAAkBrP,EAC1BsP,SAAU/B,IAAoB,SAATvN,GAEpBA,EAAKuP,qBAOlB9Q,EAAAA,cAAC+Q,EAAAA,EAAO,CAACzP,MAAOgN,EAAiB/M,KAAK,YACtCvB,EAAAA,cAAC+Q,EAAAA,EAAO,CAACzP,MAAOoN,EAAgBnN,KAAK,QAAQC,GAAG,aAGhD,G,8ECpVV,QAxBeH,IAAmD,IAC5D2P,GADY3I,UAAU,OAAE/E,EAAM,SAAE2N,GAAU,IAAE1M,GAAYlD,EAK5D,OAHI4P,IACFD,EAAe,MAAkB,MAAbC,EAAmB,WAAa,YAAU,KAG9DjR,EAAAA,cAACC,EAAAA,EAAI,CACHZ,GAAIgE,IAAA,IAAC,YAAEqC,GAAarC,EAAA,MAAM,CACxBqC,YAAWxF,OAAAC,OAAAD,OAAAC,OAAA,GACNuF,GAAW,CACd,CAACA,EAAYC,KAAKlC,KAAIvD,OAAAC,OAAAD,OAAAC,OAAA,GACjBuF,EAAYA,EAAYC,KAAKlC,MAAI,CACpCmC,OAAQ,eAGZR,OAAQ,CAAEb,OACX,GAEAjB,EAAM,eACN0N,EACI,C,2LCpBLE,EAAoC,GAsCpCb,EAAwBhP,IAOT,IAPU,UAC7B8P,EAAS,WACTC,EAAU,SACVC,EAAQ,mBACRhN,EAAkB,MAClBiN,EAAK,gBACLC,GAAkB,GACHlQ,EACTmQ,GAAeC,EAAAA,EAAAA,QAMnB,MAyBF,OAxBAlI,EAAAA,EAAAA,YAAU,K,MACR,GAAIiI,EAAaE,SAAWJ,EAAO,CAEjC,IAAIK,EAAAA,EAAAA,GAA4B,QAApB1S,EAAAuS,EAAaE,eAAO,IAAAzS,OAAA,EAAAA,EAAE2S,WAAYT,GAAY,OAC1DK,EAAaE,QAAQP,UAAYA,EAGjCK,EAAaE,QAAQG,iBAAiB,SAAUxF,I,MACxC/L,EAAS+L,EAAEyF,eAAe,GAC5BxR,EAAOyR,UAAUC,SAAS,UAC5B3F,EAAE4F,iBACF5N,SAAAA,EAAqB,CACnBqB,aAAawM,EAAAA,EAAAA,GACyB,QAApCjT,GAACqB,aAAM,EAANA,EAAQ6R,aAAa,UAAW,UAAG,IAAAlT,OAAA,EAAAA,EAAEY,QACpC,IAAIuS,OAAO,IAAIC,EAAAA,QAAOtF,KAAKuF,QAAQC,MACnC,OAIR,GAEJ,KAIAvS,EAAAA,cAAA,sBACEoR,WAAYA,EACZC,SAAUA,EACVmB,IAAKhB,EACLiB,YAAW,UAAWlB,EAAkB,GAAK,iBAC7C,EAUAmB,EAA0BrP,IAIpB,IAJqB,QAC/BH,EAAO,mBACPmB,EAAkB,gBAClBkN,GAAkB,GACZlO,GACCiO,EAAOqB,IAAYvJ,EAAAA,EAAAA,WAAS,GAEnC,SAAewJ,I,qCACb,YAnG8BC,MAChC,IAAK3B,EAAc5N,OAAQ,CACzB,IAAMwP,EAAqBA,IACzB,gCAGF5B,EAAcxO,MACZqQ,EAAAA,EAAAA,IAAiB,IACfD,IAAqB3F,MAAMrB,GAAMA,EAAEkH,sBACnCC,GAAG,uBAEP/B,EAAcxO,MACZqQ,EAAAA,EAAAA,IAAiB,IACfD,IAAqB3F,MAAMrB,GAAMA,EAAEoH,kBACnCD,GAAG,mBAEP/B,EAAcxO,MACZqQ,EAAAA,EAAAA,IAAiB,IACfD,IAAqB3F,MAAMrB,GAAMA,EAAEqH,iBACnCF,GAAG,iBAET,CACA,OAAOG,QAAQC,IAAInC,EAAc,EA6ElB2B,EACf,E,gSAEAtJ,EAAAA,EAAAA,YAAU,KACRqJ,IAAiBzF,MAAK,KACpBwF,GAAS,EAAK,GACd,GACD,IAEH,IAAMW,EAnFsBA,IAC5BxR,MAAMC,KAAK,IAAIlB,IAAIyS,EAAY3R,KAAK4R,GAAM,CAACA,EAAEnN,UAAWmN,MAAKvR,UAkFzCwR,CAClBtQ,EACGvB,KAAK0K,GAAMA,EAAE8E,YACbpK,OAAOC,UAEZ,OAAKsK,EAEHtR,EAAAA,cAAA,WACGsT,EAAYhQ,OACTgQ,EAAY3R,KAAK4R,GACfvT,EAAAA,cAACqQ,EAAqB,CACpBc,UAAWoC,EACXnC,WAAYlO,EAAQvB,KAAK0K,GAAMA,EAAEjG,YACjCiL,SAAagB,EAAAA,QAAOtF,KAAKuF,QAAQC,KAAI,kBACrClO,mBAAoBA,EACpBZ,IAAK8P,EAAEnN,UACPkL,MAAOA,EACPC,gBAAiBA,MAGrB,MAfW,IAgBX,EAIJvN,GAAkBC,EAAAA,EAAAA,KACrBC,GAAUA,EAAMsE,SAASC,MACzBA,IAAG,CAAQA,UAGd,SAAerE,EAAAA,EAAAA,IAAQJ,EAAiB,CAAEK,mBAAkBA,EAAAA,IAA5D,CACErE,EAAAA,KAAW0S,G,mCCxJb,SAAgB,MAAQ,4BAA4B,UAAU,8BAA8B,WAAW,+BAA+B,WAAW,+BAA+B,YAAY,gCAAgC,GAAK,yBAAyB,GAAK,yBAAyB,GAAK,yBAAyB,aAAa,iCAAiC,KAAO,2B","sources":["webpack://interpro7-client/./src/components/ExtLink/BaseLink/index.tsx","webpack://interpro7-client/./src/components/ExtLink/GoLink/index.tsx","webpack://interpro7-client/./src/components/GoTerms/index.tsx","webpack://interpro7-client/./src/components/IPScan/NucleotideSummary/index.tsx","webpack://interpro7-client/./src/components/IPScan/Summary/serializers.ts","webpack://interpro7-client/./src/components/IPScan/Summary/index.tsx","webpack://interpro7-client/./src/components/Protein/Length/index.tsx","webpack://interpro7-client/./src/components/Protein/ProteinEntryHierarchy/index.tsx","webpack://interpro7-client/./src/components/GoTerms/style.css?5f96"],"sourcesContent":["import React from 'react';\n\nimport Link from 'components/generic/Link';\n\ntype BaseLinkProps = {\n  id?: string | number;\n  pattern?: string;\n  href?: string;\n  rel?: string;\n  to?: Object;\n  target?: string;\n  className?: string;\n  activeClass?: ActiveClassProp;\n  children: React.ReactNode;\n};\n\nexport const BaseLink = ({\n  id,\n  pattern,\n  href,\n  to,\n  rel,\n  className,\n  children,\n  activeClass,\n  ...rest\n}: BaseLinkProps) => {\n  const props: Record<string, unknown> = {\n    href: href || to || (pattern || '').replace('{id}', String(id)),\n  };\n  if (className) props.className = className;\n  if (rel) {\n    props.rel = rel.includes('noopener') ? rel : `${rel} noopener`;\n    props.rel = rel.includes('noreferrer') ? rel : `${rel} noreferrer`;\n  } else {\n    props.rel = 'noopener noreferrer';\n  }\n  return (\n    <Link {...rest} {...props}>\n      {children}\n    </Link>\n  );\n};\n\nBaseLink.displayName = 'BaseLink';\n\nexport default BaseLink;\n","import React from 'react';\n\nimport BaseLink from '../BaseLink';\n\nconst GoLink = ({\n  id,\n  target,\n  className,\n  children,\n  ...props\n}: BaseLinkProps) => {\n  const pattern = 'https://www.ebi.ac.uk/QuickGO/GTerm?id={id}';\n  const formattedId = typeof id === 'string' ? id.replace('_', ':') : id;\n  return (\n    <BaseLink\n      id={formattedId}\n      target={target || '_blank'}\n      pattern={pattern}\n      {...(className ? { className } : {})}\n      {...props}\n    >\n      {children || formattedId}\n    </BaseLink>\n  );\n};\nGoLink.displayName = 'GoLink';\n\nexport default GoLink;\n","import React from 'react';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport GoLink from 'components/ExtLink/GoLink';\nimport loadable from 'higherOrder/loadable';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport local from './style.css';\nimport ipro from 'styles/interpro-vf.css';\n\nconst css = cssBinder(local, ipro);\n\nconst getDefaultPayload = () => ({\n  biological_process: [] as GOTerm[],\n  molecular_function: [] as GOTerm[],\n  cellular_component: [] as GOTerm[],\n});\n\nconst mapNameToClass = new Map([\n  ['biological_process', 'bp'],\n  ['molecular_function', 'mf'],\n  ['cellular_component', 'cc'],\n]);\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n\nconst schemaProcessData = (data: string) => ({\n  '@type': 'DataRecord',\n  '@id': '@seeAlso',\n  identifier: data,\n});\n\ntype GoTermsProps = {\n  /**\n   * List of GO terms to display.\n   */\n  terms: Array<GOTerm>;\n  /**\n   * Is the GO term related to an `entry`, `protein`, `structure`, etc.\n   */\n  type: string;\n  /**\n   * Which database provided the GO term. e.g. interpro, panther, etc.\n   */\n  db?: string;\n  /**\n   * Remove the title if `true`\n   */\n  withoutTitle?: boolean;\n};\nconst GoTerms = ({ terms, type, db, withoutTitle = false }: GoTermsProps) => {\n  const termsMap = new Map(terms.map((term) => [term.identifier, term]));\n  const _terms = Array.from(termsMap.values()).reduce((acc, term) => {\n    if (term.category_name && term.category_code) {\n      // eslint-disable-next-line no-param-reassign\n      term.category = {\n        name: term.category_name,\n        code: term.category_code,\n      };\n    }\n    const catName = term.category.name;\n    if (Object.keys(acc).includes(catName))\n      acc[catName as keyof typeof acc].push(term);\n    // eslint-disable-next-line no-param-reassign\n    // if (!acc[catName]) acc[catName] = [];\n\n    return acc;\n  }, getDefaultPayload());\n\n  let title = 'GO terms, ';\n  let label = 'GO terms';\n  if (type === 'entry' && typeof db !== 'undefined') {\n    if (db.toLowerCase() === 'interpro') {\n      title += 'annotated by InterPro curators';\n    } else {\n      title += `as provided by ${db}`;\n      label = `${db} ${label}`;\n    }\n  } else {\n    title += 'as provided by the InterPro2GO pipeline';\n    label = `InterPro ${label}`;\n  }\n  const goTermEntries = Object.entries(_terms);\n  const none = goTermEntries.every(([, category]) => !category.length);\n  return (\n    <section data-testid=\"go-terms\">\n      {!withoutTitle && (\n        <div className={css('vf-stack')}>\n          <Tooltip title={title}>\n            <h4 className={css('title')}>{label}</h4>\n          </Tooltip>\n        </div>\n      )}\n      <div className={css('vf-stack')}>\n        <div className={css('go-columns')}>\n          {none ? (\n            <p>No GO Terms</p>\n          ) : (\n            goTermEntries.map(([key, values]) => (\n              <div key={key}>\n                <p className={css(mapNameToClass.get(key), 'go-title')}>\n                  {key.replace('_', ' ')}\n                </p>\n                <ul className={css('go-list')}>\n                  {values && values.length ? (\n                    values.map(({ identifier, name }) => (\n                      <li key={identifier}>\n                        <SchemaOrgData\n                          data={identifier}\n                          processData={schemaProcessData}\n                        />\n\n                        <GoLink\n                          id={identifier}\n                          className={css('go-terms', 'ext-link')}\n                        >\n                          {name} ({identifier})\n                        </GoLink>\n                      </li>\n                    ))\n                  ) : (\n                    <li className={css('no-goterm')}>None</li>\n                  )}\n                </ul>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default GoTerms;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { goToCustomLocation } from 'actions/creators';\n\nimport Link from 'components/generic/Link';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\n\nimport cssBinder from 'styles/cssBinder';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport summary from 'styles/summary.css';\nconst f = cssBinder(summary, fonts);\n\ntype Props = {\n  payload?: LocalPayload;\n  orf?: number;\n  goToCustomLocation?: typeof goToCustomLocation;\n  customLocation?: InterProLocation;\n};\n\nconst NucleotideSummary = ({\n  payload,\n  orf,\n  customLocation,\n  goToCustomLocation,\n}: Props) => {\n  if (!payload || !customLocation) return <Loading inline={true} />;\n  const nPayload = payload as Iprscan5NucleotideResult;\n  if (nPayload.openReadingFrames && typeof orf === 'number') {\n    const currentORF = nPayload.openReadingFrames[orf];\n\n    const handleORFChange = (event: React.FormEvent) => {\n      const value = (event.target as HTMLSelectElement).value;\n      goToCustomLocation?.({\n        ...customLocation,\n        search: {\n          ...customLocation.search,\n          orf: value,\n        },\n      });\n    };\n    return (\n      <>\n        <Callout type=\"info\" showIcon icon=\"icon-dna\">\n          <b>Nucleotide Sequence</b>\n          <div>\n            This analysis was the result of an InterProScan execution over a\n            nucleotide sequence. The data below correspond to a single ORF from\n            such sequence.\n          </div>\n        </Callout>\n        <section className={f('summary-row')}>\n          <header>DNA Sequence ID</header>\n          <section>{nPayload.crossReferences[0].id}</section>\n        </section>\n        <section className={f('summary-row')}>\n          <header>Current ORF</header>\n          <section>\n            <select onChange={handleORFChange} value={orf}>\n              {nPayload.openReadingFrames.map((frame, i) => (\n                <option key={i} value={i}>\n                  {frame.strand}: {frame.start} - {frame.end}\n                </option>\n              ))}\n            </select>\n          </section>\n        </section>\n        <section className={f('summary-row')}>\n          <header>Open Reading Frame</header>\n\n          <section>\n            <section className={f('summary-row')}>\n              <header>Location</header>\n              <section>\n                <Link\n                  to={({ description }) => ({\n                    description: {\n                      ...description,\n                      [description.main.key]: {\n                        ...description[description.main.key],\n                        detail: 'sequence',\n                      },\n                    },\n                    search: { orf },\n                    hash: 'nucleotides',\n                  })}\n                >\n                  {currentORF.start}-{currentORF.end}\n                </Link>\n              </section>\n            </section>\n            <section className={f('summary-row')}>\n              <header>Strand</header>\n              <section>{currentORF.strand}</section>\n            </section>\n          </section>\n        </section>\n      </>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation,\n  (customLocation) => ({ customLocation }),\n);\n\nexport default connect(mapStateToProps, { goToCustomLocation })(\n  NucleotideSummary,\n);\n","import { NOT_MEMBER_DBS } from 'menuConfig';\nimport { iproscan2urlDB } from 'utils/url-patterns';\n\nconst OTHER_FEATURES_DBS = ['funfam'];\nconst OTHER_RESIDUES_DBS = ['pirsr'];\n\ntype IpScanEntry = {\n  accession: string;\n  name: string;\n  short_name: string;\n  source_database: string;\n  _children: Record<string, IpScanMatch>;\n  children: Array<IpScanMatch>;\n  type: string;\n};\ntype IpScanMatch = {\n  accession: string;\n  name: string;\n  short_name: string;\n  source_database: string;\n  protein_length: number;\n  locations: Array<BaseLocation & Iprscan5Location>;\n  score?: number;\n  residues: undefined;\n  signature?: Iprscan5Signature;\n};\n\nconst mergeMatch = (match1: IpScanMatch | undefined, match2: IpScanMatch) => {\n  if (!match1) return match2;\n  match1.locations = match1.locations.concat(match2?.locations);\n  return match1;\n};\n\nconst integrateSignature = (\n  signature: IpScanMatch,\n  interpro: Iprscan5Entry,\n  integrated: Map<string, IpScanEntry>,\n) => {\n  const accession = interpro.accession;\n  const entry: IpScanEntry = integrated.get(accession) || {\n    accession,\n    name: interpro.description,\n    short_name: interpro.name,\n    source_database: 'interpro',\n    _children: {},\n    children: [],\n    type: interpro.type.toLowerCase(),\n  };\n  entry._children[signature.accession] = signature;\n  entry.children = Object.values(entry._children);\n  integrated.set(accession, entry);\n};\n\nconst match2residues = (match: Iprscan5Match | IpScanMatch) => {\n  return match.locations\n    .map(({ sites }) =>\n      sites\n        ? {\n            accession: match?.signature?.accession || match?.accession,\n            locations: sites.map((site) => ({\n              description: `${site.label || ''}${site.label ? ': ' : ''}${\n                site.description\n              }`,\n              fragments: site.siteLocations,\n            })),\n            type: 'residue',\n            source_database:\n              match?.signature?.signatureLibraryRelease?.library?.toLowerCase() ||\n              match.source_database,\n          }\n        : null,\n    )\n    .filter(Boolean);\n};\n\nconst condenseFragments = (location: BaseLocation): [number, number] => {\n  let start = Infinity;\n  let end = -Infinity;\n  location.fragments.forEach((fr) => {\n    start = Math.min(start, fr.start);\n    end = Math.max(end, fr.end);\n  });\n  return [start, end];\n};\n\nconst minOverlap = 0.1;\n\nconst condenseLocations = (\n  children: Array<{ accession: string; locations: BaseLocation[] }>,\n) => {\n  const signatures: Array<[number, number]> = [];\n  // condensing Fragments for all the signatures and simplyfing the structure to [start, end]\n  children.forEach(({ locations }) => {\n    signatures.push(...locations.map(condenseFragments));\n  });\n  // sorting the simplified locations by position\n  signatures.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    else if (a[0] < b[0]) return -1;\n    else if (a[1] < b[1]) return -1;\n    return 1;\n  });\n  const iprLocations: Array<[number, number]> = [];\n  let currentLocation: [number, number] | null = null;\n  signatures.forEach(([s, e]) => {\n    // First location become the current location\n    if (currentLocation === null) {\n      currentLocation = [s, e];\n      return;\n    }\n    const [start, end] = currentLocation;\n\n    // the end of the new location is before than the current location, which means is fully embedded, so there is nothing to do.\n    if (e <= end) return;\n\n    // Locations are overlapping (at least one residue)\n    if (s <= end) {\n      const overlap = Math.min(end, e) - Math.max(start, s) + 1;\n      const shortest = Math.min(end - start, e - s) + 1;\n      // If the overlap is bigger than the threshold in minOverlap, the current location gets extended to fully embed the new one\n      if (overlap >= shortest * minOverlap) currentLocation[1] = e;\n      return;\n    }\n\n    // none of the othere conditions where true, means that the new location doesn't overlap.\n    // So we add the current location to the result, and reset it to the new coordinates.\n    iprLocations.push([...currentLocation]);\n    currentLocation = [s, e];\n  });\n  // Adding last location\n  iprLocations.push([...(currentLocation || [0, 0])] as [number, number]);\n\n  // Reformating the locations in the expected structure with fragments\n  return iprLocations.map(([start, end]) => ({\n    fragments: [{ start, end }],\n  }));\n};\n\n// eslint-disable-next-line max-statements\nexport const mergeData = (\n  matches: Array<Iprscan5Match>,\n  sequenceLength?: number,\n) => {\n  const mergedData: Record<string, Record<string, unknown>[]> = {\n    unintegrated: [],\n    other_features: [],\n    residues: [],\n    other_residues: [],\n    representative_domains: [],\n  };\n  const unintegrated: Record<string, IpScanMatch> = {};\n  const otherFeatures: Record<string, IpScanMatch> = {};\n  let integrated = new Map<string, IpScanEntry>();\n  const signatures = new Map<string, IpScanMatch>();\n  const representativeDomains = [];\n\n  for (const match of matches) {\n    const { library } = match.signature.signatureLibraryRelease;\n    const processedMatch: IpScanMatch = {\n      accession: match.signature.accession,\n      name: match.signature.description || match.signature.name,\n      short_name: match.signature.name,\n      source_database: iproscan2urlDB(library),\n      protein_length: sequenceLength || 0,\n      locations: match.locations.map((loc) => ({\n        ...loc,\n        model_acc: match['model-ac'],\n        fragments:\n          loc['location-fragments'] && loc['location-fragments'].length\n            ? loc['location-fragments']\n            : [{ start: loc.start, end: loc.end }],\n      })),\n      score: match.score,\n      residues: undefined,\n      signature: undefined,\n    };\n\n    const residues = match2residues(match);\n    if (\n      residues.length > 0 &&\n      !OTHER_RESIDUES_DBS.includes(residues?.[0]?.source_database || '')\n    ) {\n      mergedData.residues.push({\n        ...processedMatch,\n        accession: `residue:${processedMatch.accession}`,\n        residues,\n      });\n    }\n    if (NOT_MEMBER_DBS.has(library)) {\n      processedMatch.source_database = library; // Making sure the change matches the ignore list.\n      if (processedMatch.accession in otherFeatures) {\n        otherFeatures[processedMatch.accession].locations.push(\n          ...processedMatch.locations,\n        );\n      } else {\n        otherFeatures[processedMatch.accession] = processedMatch;\n      }\n      continue;\n    }\n    const mergedMatch = mergeMatch(\n      signatures.get(processedMatch.accession),\n      processedMatch,\n    );\n\n    signatures.set(mergedMatch.accession, mergedMatch);\n    if (match.signature.entry) {\n      integrateSignature(mergedMatch, match.signature.entry, integrated);\n    } else if (OTHER_FEATURES_DBS.includes(mergedMatch.source_database)) {\n      mergedData.other_features.push(mergedMatch);\n    } else if (OTHER_RESIDUES_DBS.includes(mergedMatch.source_database)) {\n      const residues = match2residues(mergedMatch);\n      if (residues[0] && residues[0].locations.length !== 0)\n        mergedData.other_residues.push(residues[0]);\n    } else {\n      unintegrated[mergedMatch.accession] = mergedMatch;\n    }\n\n    const representativeLocations = processedMatch.locations.filter(\n      (loc) => loc.representative,\n    );\n    if (representativeLocations.length) {\n      representativeDomains.push({\n        ...processedMatch,\n        locations: representativeLocations,\n        integrated: match.signature?.entry?.accession,\n      });\n    }\n  }\n\n  mergedData.unintegrated = Object.values(unintegrated);\n  mergedData.other_features.push(...Object.values(otherFeatures));\n  const integratedList = Array.from(integrated.values()).map((m) => {\n    const locations = condenseLocations(m.children);\n    return {\n      ...m,\n      locations,\n    };\n  });\n  mergedData.unintegrated.sort(\n    (m1, m2) =>\n      (m2 as { score: number }).score - (m1 as { score: number }).score,\n  );\n  for (const entry of integratedList) {\n    if (!mergedData[entry.type]) mergedData[entry.type] = [];\n    mergedData[entry.type].push(entry);\n  }\n  if (representativeDomains?.length) {\n    mergedData.representative_domains = representativeDomains;\n  }\n\n  return mergedData;\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport { goToCustomLocation } from 'actions/creators';\nimport getFetch from 'higherOrder/loadData/getFetch';\n\n// $FlowFixMe\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { MAX_TIME_ON_SERVER } from 'store/enhancer/jobs-middleware';\n\nimport Link from 'components/generic/Link';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport CopyToClipboard from 'components/SimpleCommonComponents/CopyToClipboard';\nimport GoTerms from 'components/GoTerms';\nimport Accession from 'components/Accession';\nimport ProteinEntryHierarchy from 'components/Protein/ProteinEntryHierarchy';\nimport Length from 'components/Protein/Length';\nimport DomainsOnProteinLoaded from 'components/Related/DomainsOnProtein/DomainsOnProteinLoaded';\nimport { Exporter } from 'components/Table';\n\nimport { getIProScanURL } from '../Status';\nimport IPScanVersionCheck from '../IPScanVersionCheck';\nimport NucleotideSummary from '../NucleotideSummary';\nimport IPScanTitle from './IPScanTitle';\nimport StatusTooltip from './StatusTooltip';\nimport { mergeData } from './serializers';\n\nimport cssBinder from 'styles/cssBinder';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport style from './style.css';\nimport summary from 'styles/summary.css';\nimport { ExtendedFeature } from 'src/components/ProteinViewer';\n\nconst css = cssBinder(summary, fonts, style);\n\nconst fetchFun = getFetch({ method: 'GET', responseType: 'JSON' });\n\nconst getInterProGoTerms = (matches: Array<Iprscan5Match>) => {\n  const goTerms = new Map();\n  for (const match of matches) {\n    for (const { id, category, name } of (match.signature.entry || {})\n      .goXRefs || []) {\n      goTerms.set(id, {\n        category: {\n          name: category.toLowerCase(),\n          code: category[0],\n        },\n        name,\n        identifier: id,\n      });\n    }\n  }\n  return Array.from(goTerms.values());\n};\n\nconst getPantherGoTerms = (matches: Array<Iprscan5Match>) => {\n  const goTerms = new Map();\n\n  for (const match of matches) {\n    const db = match.signature.signatureLibraryRelease.library.toLowerCase();\n    const goXRefs = match.goXRefs || [];\n\n    if (db === 'panther' && goXRefs.length !== 0) {\n      goXRefs.forEach(({ id, category, name }) => {\n        if (category !== null && name !== null) {\n          goTerms.set(id, {\n            category: {\n              name: category.toLowerCase(),\n              code: category[0],\n            },\n            name,\n            identifier: id,\n          });\n        }\n      });\n    }\n  }\n\n  return Array.from(goTerms.values());\n};\n\nconst getCreated = (\n  payload: IprscanMetaIDB | LocalPayload,\n  accession: string,\n) => {\n  let created = (payload as IprscanMetaIDB)?.times?.created;\n  if (!created) {\n    const regex =\n      /iprscan5-[SRI](\\d{4})(\\d{2})(\\d{2})-(\\d{2})(\\d{2})(\\d{2})-\\d{4}-\\d+-\\w{2,4}/;\n    const matches = regex.exec(accession);\n    if (matches) {\n      const [_, y, m, d, hh, mm, ss] = matches;\n      created = Date.UTC(+y, +m - 1, +d, +hh, +mm, +ss);\n    }\n  }\n  return created;\n};\nconst getEntryURL = (\n  { protocol, hostname, port, root }: ParsedURLServer,\n  accession: string,\n) => {\n  const description: InterProPartialDescription = {\n    main: { key: 'entry' },\n    entry: { db: 'interpro', accession },\n  };\n  return format({\n    protocol,\n    hostname,\n    port,\n    pathname: root + descriptionToPath(description),\n  });\n};\n\ntype Props = {\n  customLocation: InterProLocation;\n  jobAccession: string;\n  seqAccession: string;\n  jobType: 'n' | 'p';\n  localID: string;\n  // remoteID?: string,\n  status?: JobStatus;\n  data: {\n    loading: boolean;\n    payload: Iprscan5Payload;\n  };\n  api: ParsedURLServer;\n  ipScan: ParsedURLServer;\n  localPayload: LocalPayload;\n  orf?: number;\n  goToCustomLocation?: typeof goToCustomLocation;\n};\n\nconst SummaryIPScanJob = ({\n  jobAccession,\n  seqAccession,\n  jobType,\n  // localID,\n  // remoteID,\n  status,\n  data,\n  localPayload,\n  api,\n  ipScan,\n  orf,\n  customLocation,\n  goToCustomLocation,\n}: Props) => {\n  const [mergedData, setMergedData] = useState({});\n  const [familyHierarchyData, setFamilyHierarchyData] = useState<\n    Array<EntryMetadata>\n  >([]);\n  useEffect(() => {\n    if (jobType === 'n') {\n      if (orf === undefined) {\n        goToCustomLocation?.(\n          {\n            ...customLocation,\n            search: {\n              ...customLocation.search,\n              orf: 0,\n            },\n          },\n          true,\n        );\n      }\n    }\n  }, [orf]);\n  useEffect(() => {\n    if (data.payload || localPayload) {\n      let bPayload = data.payload ? data.payload.results[0] : localPayload;\n      if (jobType === 'n') {\n        if (orf === undefined) return;\n        if (\n          (bPayload as unknown as Iprscan5NucleotideResult).openReadingFrames\n        ) {\n          bPayload = (bPayload as unknown as Iprscan5NucleotideResult)\n            .openReadingFrames[orf].protein;\n          setFamilyHierarchyData([]);\n        }\n      }\n      const payload = bPayload as Iprscan5Result;\n      const organisedData = mergeData(payload.matches, payload.sequenceLength);\n\n      setMergedData(organisedData);\n      if (organisedData.family) {\n        const families: Array<EntryMetadata> = [];\n        organisedData.family.forEach((entry) => {\n          fetchFun(\n            getEntryURL(api, (entry as unknown as EntryMetadata).accession),\n          ).then((data) => {\n            const entryData = data as RequestedData<\n              MetadataPayload<EntryMetadata>\n            >;\n            const entryPayload = entryData?.payload;\n            if (entryPayload?.metadata) {\n              families.push(entryPayload.metadata);\n              setFamilyHierarchyData([...families]);\n            }\n          });\n        });\n      }\n    }\n  }, [data.payload, localPayload, orf]);\n\n  if (jobType === 'n' && orf === undefined) return null;\n\n  const basePayload: LocalPayload = data.payload\n    ? data.payload.results[0]\n    : localPayload;\n  if (!basePayload || !status) return <Loading />;\n  let bPayload = { ...basePayload } as LocalPayload;\n  if (data.payload)\n    bPayload['interproscan-version'] = data.payload?.['interproscan-version'];\n  if (jobType === 'n') {\n    bPayload = {\n      ...bPayload,\n      ...(bPayload as Iprscan5NucleotideResult).openReadingFrames[orf!].protein,\n    };\n  }\n  const payload = bPayload as Iprscan5Result;\n  const created = getCreated(payload, jobAccession);\n\n  const metadata: MinimalProteinMetadata & { name: NameObject } = {\n    accession: jobAccession,\n    length: payload.sequence.length,\n    sequence: payload.sequence,\n    name: {\n      name: 'InterProScan Search Result',\n      short: payload.xref[0].name,\n    },\n  };\n\n  const interProGoTerms = getInterProGoTerms(payload.matches);\n  const pantherGoTerms = getPantherGoTerms(payload.matches);\n\n  const { protocol, hostname, root } = ipScan;\n  let dataURL = `${protocol}//${hostname}${root}result`;\n  const now = Date.now();\n  const expired =\n    (now - (created || now) > MAX_TIME_ON_SERVER &&\n      status === 'saved in browser') ||\n    status === 'imported file';\n  if (expired) {\n    const downloadContent = JSON.stringify(payload);\n    const blob = new Blob([downloadContent], { type: 'application/json' });\n    dataURL = URL.createObjectURL(blob);\n  }\n  // TODO: Check if thejob is still in the server to display or not the Exporter\n  const reg = /(.+)(-\\d+)$/;\n  const match = reg.exec(jobAccession);\n  const rootAccession = match?.[1] ?? jobAccession;\n  return (\n    <div className={css('sections')}>\n      <section>\n        <IPScanVersionCheck ipScanVersion={bPayload['interproscan-version']} />\n\n        <IPScanTitle\n          type=\"sequence\"\n          accession={seqAccession}\n          payload={payload as Iprscan5Result}\n          status={status}\n          editable={jobType !== 'n'}\n        />\n\n        <section className={css('summary-row')}>\n          <header>\n            Job ID{' '}\n            <Tooltip title={'Case sensitive'}>\n              <span\n                className={css('small', 'icon', 'icon-common')}\n                data-icon=\"&#xf129;\"\n                aria-label={'Case sensitive'}\n              />\n            </Tooltip>\n          </header>\n          <section style={{ display: 'flex' }}>\n            <Link\n              to={{\n                description: {\n                  main: { key: 'result' },\n                  result: {\n                    job: jobAccession,\n                    type: 'InterProScan',\n                  },\n                },\n              }}\n            >\n              <Accession accession={jobAccession} title=\"Job ID\" />{' '}\n            </Link>\n            <CopyToClipboard\n              textToCopy={getIProScanURL(jobAccession)}\n              tooltipText=\"Copy URL\"\n            />\n          </section>\n        </section>\n        <section className={css('summary-row')}>\n          <header>Status</header>\n          <section>\n            <StatusTooltip status={status} />\n          </section>\n        </section>\n        {/* {localID && (\n          <section className={css('summary-row')}>\n            <header>Job Actions</header>\n            <section>\n              <Actions\n                localID={localID}\n                status={status}\n                versionMismatch={versionMismatch}\n                sequence={metadata.sequence}\n                attributes={{\n                  applications: localPayload?.applications,\n                  goterms: localPayload?.goterms,\n                  pathways: localPayload?.pathways,\n                }}\n              />\n            </section>\n          </section>\n        )} */}\n        <NucleotideSummary payload={basePayload} orf={orf} />\n        <section className={css('summary-row')}>\n          <header>Sequence Length</header>\n          <section>\n            <Length metadata={metadata} orf={orf} />\n          </section>\n        </section>\n\n        <section className={css('summary-row')}>\n          <header>Protein family membership</header>\n          <section>\n            {familyHierarchyData.length ? (\n              <ProteinEntryHierarchy entries={familyHierarchyData} />\n            ) : (\n              <p className={css('margin-bottom-medium')}>None predicted</p>\n            )}\n          </section>\n        </section>\n      </section>\n\n      {['finished', 'imported file', 'saved in browser'].includes(status) && (\n        <>\n          <DomainsOnProteinLoaded\n            mainData={{ metadata }}\n            dataMerged={mergedData}\n            loading={false}\n          >\n            <Exporter includeSettings={false}>\n              <ul>\n                {['tsv', 'json', 'xml', 'gff', 'sequence'].map((type) => (\n                  <li key={type}>\n                    <Link\n                      target=\"_blank\"\n                      href={\n                        expired\n                          ? dataURL\n                          : `${dataURL}/${rootAccession}/${type}`\n                      }\n                      buttonType=\"secondary\"\n                      download={`InterProScan.${type}`}\n                      disabled={expired && type !== 'json'}\n                    >\n                      {type.toUpperCase()}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </Exporter>\n          </DomainsOnProteinLoaded>\n          <GoTerms terms={interProGoTerms} type=\"protein\" />\n          <GoTerms terms={pantherGoTerms} type=\"entry\" db=\"PANTHER\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst jobSelector = createSelector(\n  (state: GlobalState) => state.customLocation.description.result.job,\n  (state: GlobalState) => state.jobs,\n  (jobAccession, jobMap) => {\n    return Object.values(jobMap || {}).find(\n      (job) =>\n        job.metadata.remoteID === jobAccession ||\n        job.metadata.localID === jobAccession,\n    );\n  },\n);\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation,\n  (state: GlobalState) => state.customLocation.description.result.job || '',\n  (state: GlobalState) =>\n    state.customLocation.description.result.accession || '',\n  jobSelector,\n  (state: GlobalState) => state.customLocation.search.orf,\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.settings.ipScan,\n  (customLocation, jobAccession, seqAccession, job, orf, api, ipScan) => ({\n    customLocation,\n    jobAccession,\n    seqAccession,\n    jobType: (job?.metadata.seqtype === 'n' ? 'n' : 'p') as 'n' | 'p',\n    orf: typeof orf !== 'undefined' ? Number(orf) : undefined,\n    localID: job?.metadata?.localID || '',\n    remoteID: job?.metadata?.remoteID || '',\n    status: job?.metadata?.status,\n    api,\n    ipScan,\n  }),\n);\n\nexport default connect(mapStateToProps, { goToCustomLocation })(\n  SummaryIPScanJob,\n);\n","import React from 'react';\n\nimport Link from 'components/generic/Link';\n\ntype Props = {\n  metadata: {\n    length: number;\n    fragment?: string;\n  };\n  orf?: number;\n};\n\nconst Length = ({ metadata: { length, fragment }, orf }: Props) => {\n  let fragmentText;\n  if (fragment) {\n    fragmentText = ` (${fragment === 'N' ? 'complete' : 'fragment'})`;\n  }\n  return (\n    <Link\n      to={({ description }) => ({\n        description: {\n          ...description,\n          [description.main.key]: {\n            ...description[description.main.key],\n            detail: 'sequence',\n          },\n        },\n        search: { orf },\n      })}\n    >\n      {length} amino acids\n      {fragmentText}\n    </Link>\n  );\n};\n\nexport default Length;\n","import React, { useEffect, useState, useRef } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { isEqual } from 'lodash-es';\nimport { goToCustomLocation } from 'actions/creators';\n\nimport loadWebComponent from 'utils/load-web-component';\nimport pathToDescription from 'utils/processDescription/pathToDescription';\n\nimport config from 'config';\n\nconst webComponents: Promise<unknown>[] = [];\n\nconst loadInterProWebComponents = () => {\n  if (!webComponents.length) {\n    const interproComponents = () =>\n      import(\n        /* webpackChunkName: \"interpro-components\" */ 'interpro-components'\n      );\n    webComponents.push(\n      loadWebComponent(() =>\n        interproComponents().then((m) => m.InterproHierarchy),\n      ).as('interpro-hierarchy'),\n    );\n    webComponents.push(\n      loadWebComponent(() =>\n        interproComponents().then((m) => m.InterproEntry),\n      ).as('interpro-entry'),\n    );\n    webComponents.push(\n      loadWebComponent(() =>\n        interproComponents().then((m) => m.InterproType),\n      ).as('interpro-type'),\n    );\n  }\n  return Promise.all(webComponents);\n};\n\nconst getUniqueHierarchies = (hierarchies: Array<InterProHierarchyType>) =>\n  Array.from(new Map(hierarchies.map((h) => [h.accession, h])).values());\n\ntype HierarchyProps = {\n  hierarchy: InterProHierarchyType;\n  accessions: Array<string>;\n  hrefroot: string;\n  goToCustomLocation?: typeof goToCustomLocation;\n  ready: boolean;\n  includeChildren?: boolean;\n};\nconst ProteinEntryHierarchy = ({\n  hierarchy,\n  accessions,\n  hrefroot,\n  goToCustomLocation,\n  ready,\n  includeChildren = false,\n}: HierarchyProps) => {\n  const componentRef = useRef<\n    | (HTMLElement & {\n        hierarchy?: InterProHierarchyType;\n        _hierarchy?: InterProHierarchyType;\n      })\n    | null\n  >(null);\n  useEffect(() => {\n    if (componentRef.current && ready) {\n      // Making sure the same hierarchy only appears once.\n      if (isEqual(componentRef.current?._hierarchy, hierarchy)) return;\n      componentRef.current.hierarchy = hierarchy;\n      // Adding the click event so it doesn't refresh the whole page,\n      // but instead use the customLocation.\n      componentRef.current.addEventListener('click', (e) => {\n        const target = e.composedPath()[0] as HTMLElement;\n        if (target.classList.contains('link')) {\n          e.preventDefault();\n          goToCustomLocation?.({\n            description: pathToDescription(\n              (target?.getAttribute('href') || '')?.replace(\n                new RegExp(`^${config.root.website.path}`),\n                '',\n              ),\n            ),\n          });\n        }\n      });\n    }\n  });\n\n  return (\n    <interpro-hierarchy\n      accessions={accessions}\n      hrefroot={hrefroot}\n      ref={componentRef}\n      displaymode={`pruned${includeChildren ? '' : ' no-children'}`}\n    />\n  );\n};\n\ntype Props = {\n  entries: Array<EntryMetadata>;\n  goToCustomLocation?: typeof goToCustomLocation;\n  includeChildren?: boolean;\n};\n\nconst ProteinEntryHierarchies = ({\n  entries,\n  goToCustomLocation,\n  includeChildren = false,\n}: Props) => {\n  const [ready, setReady] = useState(false);\n\n  async function loadComponents() {\n    return await loadInterProWebComponents();\n  }\n\n  useEffect(() => {\n    loadComponents().then(() => {\n      setReady(true);\n    });\n  }, []);\n\n  const hierarchies = getUniqueHierarchies(\n    entries\n      .map((e) => e.hierarchy)\n      .filter(Boolean) as Array<InterProHierarchyType>,\n  );\n  if (!ready) return null;\n  return (\n    <div>\n      {hierarchies.length\n        ? hierarchies.map((h) => (\n            <ProteinEntryHierarchy\n              hierarchy={h}\n              accessions={entries.map((e) => e.accession)}\n              hrefroot={`${config.root.website.path}/entry/interpro`}\n              goToCustomLocation={goToCustomLocation}\n              key={h.accession}\n              ready={ready}\n              includeChildren={includeChildren}\n            />\n          ))\n        : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state) => state.settings.api,\n  (api) => ({ api }),\n);\n\nexport default connect(mapStateToProps, { goToCustomLocation })(\n  React.memo(ProteinEntryHierarchies),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"GoTerms_style__title___a6\",\"go-list\":\"GoTerms_style__go-list___ce\",\"go-terms\":\"GoTerms_style__go-terms___b9\",\"go-title\":\"GoTerms_style__go-title___f6\",\"no-goterm\":\"GoTerms_style__no-goterm___c5\",\"bp\":\"GoTerms_style__bp___b4\",\"mf\":\"GoTerms_style__mf___c3\",\"cc\":\"GoTerms_style__cc___e5\",\"go-columns\":\"GoTerms_style__go-columns___b2\",\"link\":\"GoTerms_style__link___ad\"};"],"names":["BaseLink","_a","id","pattern","href","to","rel","className","children","activeClass","rest","__rest","props","replace","String","includes","React","Link","Object","assign","displayName","GoLink","target","formattedId","css","cssBinder","local","ipro","mapNameToClass","Map","SchemaOrgData","loadable","loader","loading","schemaProcessData","data","identifier","_ref","terms","type","db","withoutTitle","termsMap","map","term","_terms","Array","from","values","reduce","acc","category_name","category_code","category","name","code","catName","keys","push","biological_process","molecular_function","cellular_component","title","label","toLowerCase","goTermEntries","entries","none","every","_ref2","length","Tooltip","_ref3","key","get","_ref4","processData","f","summary","fonts","mapStateToProps","createSelector","state","customLocation","connect","goToCustomLocation","payload","orf","Loading","inline","nPayload","openReadingFrames","currentORF","Callout","showIcon","icon","crossReferences","onChange","event","value","search","frame","i","strand","start","end","description","main","detail","hash","OTHER_FEATURES_DBS","OTHER_RESIDUES_DBS","match2residues","match","locations","sites","accession","signature","site","fragments","siteLocations","source_database","_d","_c","_b","signatureLibraryRelease","library","filter","Boolean","condenseFragments","location","Infinity","forEach","fr","Math","min","max","style","fetchFun","getFetch","method","responseType","jobSelector","result","job","jobs","jobAccession","jobMap","find","metadata","remoteID","localID","settings","api","ipScan","seqAccession","jobType","seqtype","Number","undefined","status","localPayload","mergedData","setMergedData","useState","familyHierarchyData","setFamilyHierarchyData","useEffect","bPayload","results","protein","organisedData","mergeData","matches","sequenceLength","unintegrated","other_features","residues","other_residues","representative_domains","otherFeatures","integrated","signatures","representativeDomains","_loop","processedMatch","short_name","iproscan2urlDB","protein_length","loc","model_acc","score","NOT_MEMBER_DBS","has","match1","match2","mergedMatch","concat","set","entry","integrateSignature","interpro","_children","representativeLocations","representative","integratedList","m","sort","a","b","iprLocations","currentLocation","s","e","condenseLocations","m1","m2","family","families","getEntryURL","protocol","hostname","port","root","format","pathname","descriptionToPath","then","entryPayload","entryData","basePayload","created","getCreated","times","exec","_","y","d","hh","mm","ss","Date","UTC","sequence","short","xref","interProGoTerms","goTerms","goXRefs","getInterProGoTerms","pantherGoTerms","getPantherGoTerms","dataURL","now","expired","MAX_TIME_ON_SERVER","downloadContent","JSON","stringify","blob","Blob","URL","createObjectURL","rootAccession","IPScanVersionCheck","ipScanVersion","IPScanTitle","editable","display","Accession","CopyToClipboard","textToCopy","getIProScanURL","tooltipText","StatusTooltip","NucleotideSummary","Length","ProteinEntryHierarchy","DomainsOnProteinLoaded","mainData","dataMerged","Exporter","includeSettings","buttonType","download","disabled","toUpperCase","GoTerms","fragmentText","fragment","webComponents","hierarchy","accessions","hrefroot","ready","includeChildren","componentRef","useRef","current","isEqual","_hierarchy","addEventListener","composedPath","classList","contains","preventDefault","pathToDescription","getAttribute","RegExp","config","website","path","ref","displaymode","ProteinEntryHierarchies","setReady","loadComponents","loadInterProWebComponents","interproComponents","loadWebComponent","InterproHierarchy","as","InterproEntry","InterproType","Promise","all","hierarchies","h","getUniqueHierarchies"],"sourceRoot":""}