{"version":3,"file":"js/6652.module.settings-page.434.js","mappings":"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","sources":["webpack://interpro7-client/./src/pages/Settings/styles.css?1a8a","webpack://interpro7-client/./src/pages/Settings/index.js","webpack://interpro7-client/./src/components/ToggleSwitch/index.tsx","webpack://interpro7-client/./src/components/ToggleSwitch/style.css?e633"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"output\":\"Settings_styles__output___a6\",\"fullwidth\":\"Settings_styles__fullwidth___e3\",\"menu-and-content\":\"Settings_styles__menu-and-content___e1\",\"link\":\"Settings_styles__link___ee\",\"active\":\"Settings_styles__active___d8\"};","// @flow\nimport React, { PureComponent, useState, useEffect } from 'react';\nimport T from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\n// $FlowFixMe\nimport ToggleSwitch from 'components/ToggleSwitch';\n// $FlowFixMe\nimport Callout from 'components/SimpleCommonComponents/Callout';\n// $FlowFixMe\nimport Button from 'components/SimpleCommonComponents/Button';\nimport { DEV } from 'config';\n\nimport { noop } from 'lodash-es';\n\nimport {\n  schemaProcessDataWebPage,\n  schemaProcessDataPageSection,\n} from 'schema_org/processors';\n\nimport { installPrompt } from 'main';\n\nimport loadable from 'higherOrder/loadable';\n\nimport {\n  changeSettings,\n  changeSettingsRaw,\n  resetSettings,\n  addToast,\n  // $FlowFixMe\n} from 'actions/creators';\n// $FlowFixMe\nimport { customLocationSelector } from 'reducers/custom-location';\nimport { askNotificationPermission } from 'utils/browser-notifications';\n\nimport { EntryColorMode } from 'utils/entry-color';\n\nimport { foundationPartial } from 'styles/foundation';\n\nimport local from './styles.css';\n\nconst f = foundationPartial(local);\n\nconst DEFAULT_SEC = 20;\nconst offsetForStickyHeader = 95;\n\nconst Advanced = loadable({\n  loader: () =>\n    // $FlowFixMe\n    import(/* webpackChunkName: \"side-menu\" */ 'components/Settings/Advanced'),\n});\n\nconst NavigationSettings = (\n  {\n    navigation: { pageSize, secondsToRetry },\n  } /*: {navigation: {pageSize: number, secondsToRetry: number}} */,\n) => (\n  <form data-category=\"navigation\">\n    <h4 id=\"settings-navigation\">Navigation settings</h4>\n    <SchemaOrgData\n      data={{\n        name: 'Navigation settings',\n        description: 'Number of results per page, redirection rules',\n      }}\n      processData={schemaProcessDataPageSection}\n    />\n    <div className={f('row')}>\n      <div className={f('medium-12', 'column')}>\n        <label>\n          Number of results per page:\n          <div className={f('row')}>\n            <div className={f('medium-4', 'column')}>\n              <input\n                type=\"range\"\n                min=\"5\"\n                max=\"200\"\n                step=\"5\"\n                value={pageSize}\n                name=\"pageSize\"\n                className={local.fullwidth}\n                onChange={noop}\n              />\n            </div>\n            <div className={f('medium-8', 'column')}>{pageSize}</div>\n          </div>\n        </label>\n      </div>\n    </div>\n    <div className={f('row')}>\n      <div className={f('medium-12', 'column')}>\n        <label>\n          Time (sec) to retry timed out queries:\n          <div className={f('row')}>\n            <div className={f('medium-4', 'column')}>\n              <input\n                type=\"range\"\n                min=\"5\"\n                max=\"120\"\n                step=\"5\"\n                value={secondsToRetry || DEFAULT_SEC}\n                name=\"secondsToRetry\"\n                className={local.fullwidth}\n                onChange={noop}\n              />\n            </div>\n            <div className={f('medium-8', 'column')}>{secondsToRetry}</div>\n          </div>\n        </label>\n      </div>\n    </div>\n  </form>\n);\nNavigationSettings.propTypes = {\n  navigation: T.shape({\n    pageSize: T.number.isRequired,\n    secondsToRetry: T.number.isRequired,\n  }).isRequired,\n};\n\nconst NotificationSettings = (\n  {\n    notifications: {\n      showTreeToast,\n      showConnectionStatusToast,\n      showSettingsToast,\n      showHelpToast,\n      showCtrlToZoomToast,\n    },\n  } /*: {notifications: {showTreeToast: boolean, showCtrlToZoomToast: boolean, showConnectionStatusToast: boolean, showSettingsToast: boolean, showHelpToast: boolean}} */,\n) => {\n  const [status /*: string */, setStatus] = useState(\n    Notification.permission === 'granted' ||\n      Notification.permission === 'denied'\n      ? 'answered'\n      : 'not yet',\n  );\n  return (\n    <form data-category=\"notifications\">\n      <h4 id=\"settings-notification\">Notification settings</h4>\n      <SchemaOrgData\n        data={{\n          name: 'Notification settings',\n          description: 'Notifications in the website can be turned on/off.',\n        }}\n        processData={schemaProcessDataPageSection}\n      />\n      <div className={f('row')}>\n        <div className={f('medium-12', 'column')}>\n          {status === 'answered' ? (\n            <Callout type=\"info\">\n              The browser notification has been {Notification.permission}{' '}\n              permission. If you wish to change the preference, it has to be\n              done in the browser settings.\n            </Callout>\n          ) : (\n            <>\n              <p>\n                Allow us to send you browser notifications when one of your Jobs\n                or Downloads finishes.\n              </p>\n              <Button onClick={() => askNotificationPermission(setStatus)}>\n                Enable notifications\n              </Button>\n            </>\n          )}\n        </div>\n\n        <div className={f('medium-12', 'column')} style={{ marginTop: '2em' }}>\n          <p>\n            There are few tips shown in the website on how to use features\n            efficiently. It can be turned on/off.\n          </p>\n          <div className={f('row')}>\n            <div className={f('medium-4', 'column')}>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Tip</th>\n                    <th>Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Taxonomy Tree navigation</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"showTreeToast\"\n                        id=\"showTreeToast-input\"\n                        checked={showTreeToast}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Check connectivity</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"showConnectionStatusToast\"\n                        id=\"showConnectionStatusToast-input\"\n                        checked={showConnectionStatusToast}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Use CTRL and scroll to zoom</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"showCtrlToZoomToast\"\n                        id=\"showCtrlToZoomToast-input\"\n                        checked={showCtrlToZoomToast}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Customise Settings</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"showSettingsToast\"\n                        id=\"showSettingsToast-input\"\n                        checked={showSettingsToast}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Help Links</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"showHelpToast\"\n                        id=\"showHelpToast-input\"\n                        checked={showHelpToast}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nNotificationSettings.propTypes = {\n  notifications: T.shape({\n    showTreeToast: T.bool.isRequired,\n    showConnectionStatusToast: T.bool.isRequired,\n    showSettingsToast: T.bool.isRequired,\n    showHelpToast: T.bool.isRequired,\n    showCtrlToZoomToast: T.bool.isRequired,\n  }).isRequired,\n};\n\nconst UISettings = (\n  {\n    ui: { lowGraphics, colorDomainsBy, labelContent, structureViewer },\n    changeSettingsRaw,\n  } /*:\n  { ui: {\n      lowGraphics: boolean,\n      colorDomainsBy: string,\n      labelContent: {\n        accession: boolean,\n        name: boolean,\n        short: boolean,\n      },\n      structureViewer: boolean\n    },\n    changeSettingsRaw: function,\n  } */,\n) => {\n  // Making sure there is a least 1 value for label Content\n  useEffect(() => {\n    const { accession, name, short } = labelContent;\n    if (!accession && !name && !short) {\n      changeSettingsRaw('ui', 'labelContent', {\n        accession: true,\n        name,\n        short,\n      });\n    }\n  }, [labelContent]);\n  return (\n    <form data-category=\"ui\">\n      <h4 id=\"settings-ui\">UI settings</h4>\n      <SchemaOrgData\n        data={{\n          name: 'UI settings',\n          description: 'User Interface options',\n        }}\n        processData={schemaProcessDataPageSection}\n      />\n      <div className={f('row')}>\n        <div className={f('medium-12', 'column')}>\n          <header>Low graphics mode:</header>\n          <p>\n            <small>Recommended for low-end devices</small>\n          </p>\n          <ToggleSwitch\n            switchCond={lowGraphics}\n            name={'lowGraphics'}\n            id={'lowGraphics-input'}\n            SRLabel={'Low graphics mode'}\n          />\n        </div>\n      </div>\n      <div className={f('row')}>\n        <div className={f('medium-12', 'column')}>\n          <header>Colour Domains:</header>\n          <p>\n            <small>Selection mode to colour by in the feature viewer</small>\n          </p>\n          <select\n            className={f('select-inline')}\n            value={colorDomainsBy}\n            name=\"colorDomainsBy\"\n            onChange={noop}\n            onBlur={noop}\n          >\n            <option value={EntryColorMode.ACCESSION}>Accession</option>\n            <option value={EntryColorMode.MEMBER_DB}>Member Database</option>\n            <option value={EntryColorMode.DOMAIN_RELATIONSHIP}>\n              Domain Relationship\n            </option>\n          </select>\n        </div>\n      </div>\n      <div className={f('row')}>\n        <div className={f('medium-12', 'column')}>\n          <header>Label Content:</header>\n          <p>\n            <small>The content of the labels in the feature viewer</small>\n          </p>\n          <div className={f('row')}>\n            <div className={f('medium-4', 'column')}>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Label</th>\n                    <th>Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Accession</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"labelContent.accession\"\n                        id=\"labelContentAccession-input\"\n                        checked={labelContent.accession}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Name</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"labelContent.name\"\n                        id=\"labelContentName-input\"\n                        checked={labelContent.name}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Short Name</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        name=\"labelContent.short\"\n                        id=\"labelContentShort-input\"\n                        checked={labelContent.short}\n                        onChange={noop}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={f('row')}>\n        <div className={f('medium-12', 'column')}>\n          <header>Display structure viewer all the time:</header>\n          <p>\n            <small>\n              On some low-end devices, small screens, or under network or\n              battery constraints, we might decide to not display the structure\n              viewer by default. It will still be available on demand. Do you\n              still want to display the viewer all the time?\n            </small>\n          </p>\n          <ToggleSwitch\n            switchCond={structureViewer}\n            name={'structureViewer'}\n            id={'structureViewer-input'}\n            SRLabel={'Structure viewer always visible'}\n            onValue={'Yes'}\n            offValue={'No'}\n          />\n        </div>\n      </div>\n    </form>\n  );\n};\nUISettings.propTypes = {\n  ui: T.shape({\n    lowGraphics: T.bool.isRequired,\n    colorDomainsBy: T.string.isRequired,\n    labelContent: T.shape({\n      accession: T.bool,\n      name: T.bool,\n      short: T.bool,\n    }),\n    structureViewer: T.bool.isRequired,\n  }).isRequired,\n  changeSettingsRaw: T.func,\n};\n\nconst _CacheSettings = (\n  {\n    cache: { enabled },\n    addToast,\n  } /*: {cache: {enabled: boolean}, addToast: function} */,\n) => (\n  <form data-category=\"cache\">\n    <h4 id=\"settings-cache\">Cache settings</h4>\n    <SchemaOrgData\n      data={{\n        name: 'Cache settings',\n        description: 'Options for locally saved data',\n      }}\n      processData={schemaProcessDataPageSection}\n    />\n    <div className={f('row')}>\n      <div className={f('medium-12', 'column')}>\n        <p>Caching:</p>\n        <ToggleSwitch\n          switchCond={enabled}\n          name={'enabled'}\n          id={'cache-input'}\n          SRLabel={'Caching'}\n        />\n        <div>\n          <Button\n            onClick={() => {\n              window.sessionStorage.clear();\n              addToast(\n                {\n                  title: 'Cache Cleared',\n                  ttl: 1000,\n                },\n                'cache',\n              );\n            }}\n          >\n            Clear Local Cache\n          </Button>\n        </div>\n      </div>\n    </div>\n  </form>\n);\n_CacheSettings.propTypes = {\n  cache: T.shape({\n    enabled: T.bool,\n  }).isRequired,\n  addToast: T.func.isRequired,\n};\nconst CacheSettings = connect(undefined, { addToast })(_CacheSettings);\n\nconst getStatusText = (status) => {\n  if (status === null) return 'Unknown';\n  return status ? 'Reachable' : 'Unreachable';\n};\n\nconst EndpointSettings = (\n  {\n    category,\n    endpointDetails: { protocol, hostname, port, root },\n    children,\n    status,\n  } /*: {category: string, endpointDetails: {protocol: string, hostname: string, port: string, root: string,}, children: any, status: boolean} */,\n) => (\n  <form data-category={category}>\n    <h5>{children}</h5>\n    <SchemaOrgData\n      data={{\n        name: children[0],\n        description: `hostname, port and root ${children[0]}`,\n      }}\n      processData={schemaProcessDataPageSection}\n    />\n\n    <div className={f('row')}>\n      <div className={f('medium-2', 'column')}>\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label>\n          Protocol:\n          <select\n            name=\"protocol\"\n            value={protocol}\n            onChange={noop}\n            onBlur={noop}\n            readOnly={!DEV}\n          >\n            <option value=\"http:\">http://</option>\n            <option value=\"https:\">https://</option>\n          </select>\n        </label>\n      </div>\n      <div className={f('medium-3', 'column')}>\n        <label>\n          Hostname:\n          <input\n            type=\"text\"\n            value={hostname}\n            name=\"hostname\"\n            onChange={noop}\n            readOnly={!DEV}\n          />\n        </label>\n      </div>\n      <div className={f('medium-1', 'column')}>\n        <label>\n          Port:\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={port}\n            name=\"port\"\n            onChange={noop}\n            readOnly={!DEV}\n          />\n        </label>\n      </div>\n      <div className={f('medium-3', 'column')}>\n        <label>\n          Root:\n          <input\n            type=\"text\"\n            value={root}\n            name=\"root\"\n            onChange={noop}\n            readOnly={!DEV}\n          />\n        </label>\n      </div>\n      <div className={f('medium-3', 'column')}>\n        <label>\n          Status:\n          <output\n            className={f('button', 'output', 'hollow', {\n              secondary: status === null,\n              success: status === true,\n              alert: status === false,\n            })}\n            title={`Status: ${status ? 'TRUE' : 'FALSE'}`}\n          >\n            {getStatusText(status)}\n          </output>\n        </label>\n      </div>\n    </div>\n  </form>\n);\nEndpointSettings.propTypes = {\n  category: T.string.isRequired,\n  endpointDetails: T.shape({\n    protocol: T.string.isRequired,\n    hostname: T.string.isRequired,\n    port: T.string.isRequired,\n    root: T.string.isRequired,\n  }).isRequired,\n  children: T.any.isRequired,\n  status: T.bool,\n};\n\nconst getStatusForEndpoint = (endpoint) =>\n  createSelector(\n    (state) => state.status.servers[endpoint].status,\n    (status) => ({ status }),\n  );\n\nconst APIEndpointSettings = connect(getStatusForEndpoint('api'))(\n  EndpointSettings,\n);\nconst EBIEndpointSettings = connect(getStatusForEndpoint('ebi'))(\n  EndpointSettings,\n);\nconst IPScanEndpointSettings = connect(getStatusForEndpoint('ipScan'))(\n  EndpointSettings,\n);\nconst WikipediaEndpointSettings = connect(getStatusForEndpoint('wikipedia'))(\n  EndpointSettings,\n);\nconst AlphaFoldEndpointSettings = connect(getStatusForEndpoint('alphafold'))(\n  EndpointSettings,\n);\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\n/*:: type Props = {\n  addToast: function\n};*/\n/*:: type State= {|\n  event: ?{\n    prompt: function,\n    userChoice: {\n      outcome: string,\n    }\n  },\n|};*/\n\nclass _AddToHomeScreen extends PureComponent /*:: <Props,State> */ {\n  static propTypes = {\n    addToast: T.func.isRequired,\n  };\n\n  constructor(props /*: Props */) {\n    super(props);\n\n    // see if the event has been caught before somewhere else while browsing\n    this.state = { event: installPrompt.event };\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeinstallprompt', this.#beforeInstall);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeinstallprompt', this.#beforeInstall);\n  }\n\n  #beforeInstall = (event) => {\n    event.preventDefault();\n    this.setState({ event });\n  };\n\n  _handleClick = async () => {\n    const { event } = this.state;\n    if (!event) return;\n    event.prompt();\n    const { outcome } = await event.userChoice;\n    if (outcome === 'accepted') {\n      // user accepted browser prompt\n      this.props.addToast(\n        {\n          title: 'Added to homescreen or desktop',\n          body: 'Keep in mind that you still need to be online to browse our data',\n          ttl: 5000, // eslint-disable-line no-magic-numbers\n        },\n        'add-to-homescreen-banner',\n      );\n    } else {\n      // user refused 🤔🤷🏻‍♂️\n      this.props.addToast(\n        {\n          title: 'Failed to add to homescreen or desktop',\n          body: 'It looks like you refused to add this website to the homescreen or desktop after all',\n          ttl: 5000, // eslint-disable-line no-magic-numbers\n        },\n        'add-to-homescreen-banner',\n      );\n    }\n    // remove stored event, cannot use it twice\n    this.setState({ event: null });\n    installPrompt.event = null;\n  };\n\n  render() {\n    if (!this.state.event) return null;\n    return (\n      <div className={f('row')}>\n        <div className={f('columns', 'large-12')}>\n          <h3>Add InterPro to your home screen or desktop</h3>\n          <Button onClick={this._handleClick}>Add it!</Button>\n        </div>\n      </div>\n    );\n  }\n}\nconst AddToHomeScreen = connect(undefined, { addToast })(_AddToHomeScreen);\n\nconst HashLink = (\n  {\n    firstVisibleTitle,\n    hash,\n    label,\n  } /*: { firstVisibleTitle: string|null, hash:string, label: string } */,\n) => (\n  <li>\n    <button\n      className={f('link', { active: firstVisibleTitle === hash })}\n      onClick={() => {\n        document.getElementById(hash)?.scrollIntoView({ behavior: 'smooth' });\n        history.replaceState(null, '', `#${hash}`);\n      }}\n    >\n      {' '}\n      {label}\n    </button>\n  </li>\n);\nHashLink.propTypes = {\n  firstVisibleTitle: T.string,\n  hash: T.string,\n  label: T.string,\n};\n\n/*::\ntype SettingsProps = {\n  settings: {\n    navigation: Object,\n    notifications: Object,\n    ui: Object,\n    cache: Object,\n    api: Object,\n    ebi: Object,\n    ipScan: Object,\n    repeatsDB: Object,\n    disprot: Object,\n    wikipedia: Object,\n    alphafold: Object,\n    proteinsAPI: Object,\n  },\n  changeSettings: function,\n  changeSettingsRaw: function,\n  resetSettings: function,\n  customLocation: Object,\n};\ntype SettingsState = {\n  firstVisibleTitle: null | string,\n}\n*/\n\nclass Settings extends PureComponent /*:: <SettingsProps, SettingsState> */ {\n  static propTypes = {\n    settings: T.shape({\n      navigation: T.object.isRequired,\n      notifications: T.object.isRequired,\n      ui: T.object.isRequired,\n      cache: T.object.isRequired,\n      api: T.object.isRequired,\n      ebi: T.object.isRequired,\n      ipScan: T.object.isRequired,\n      wikipedia: T.object.isRequired,\n      alphafold: T.object.isRequired,\n    }).isRequired,\n    changeSettings: T.func.isRequired,\n    changeSettingsRaw: T.func.isRequired,\n    resetSettings: T.func.isRequired,\n    customLocation: T.object.isRequired,\n  };\n  state = {\n    firstVisibleTitle: null,\n  };\n\n  componentDidMount() {\n    const shortWait = 200;\n    document.addEventListener('scroll', this._updateHashBasedOnScroll);\n    if (this.props.customLocation.hash) {\n      setTimeout(\n        () =>\n          document\n            .getElementById(this.props.customLocation.hash)\n            ?.scrollIntoView({ behavior: 'smooth' }),\n        shortWait,\n      );\n    }\n  }\n\n  _updateHashBasedOnScroll = () => {\n    const firstVisibleTitle = Array.from(document.querySelectorAll('h4[id]'))\n      .map((e) => ({\n        id: e.id,\n        top: e.getBoundingClientRect().top - offsetForStickyHeader,\n      }))\n      .filter(({ top }) => top >= 0)?.[0]?.id;\n    if (this.state.firstVisibleTitle !== firstVisibleTitle) {\n      this.setState({ firstVisibleTitle });\n    }\n  };\n  _handleReset = () => this.props.resetSettings();\n\n  render() {\n    const {\n      settings: {\n        navigation = {},\n        notifications = {},\n        ui = {},\n        cache = {},\n        api = {},\n        ebi = {},\n        ipScan = {},\n        wikipedia = {},\n        alphafold = {},\n      },\n      changeSettings,\n      changeSettingsRaw,\n    } = this.props;\n    return (\n      <>\n        <div className={f('row')}>\n          <SchemaOrgData\n            data={{\n              name: 'InterPro Settings Page',\n              description: 'Configuration options for the website',\n              location: window.location,\n            }}\n            processData={schemaProcessDataWebPage}\n          />\n          <div className={f('columns', 'large-12')}>\n            <h3>Settings</h3>\n            <div className={f('menu-and-content')}>\n              <nav>\n                <ul className={f('no-bullet')}>\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-navigation\"\n                    label=\"Navigation\"\n                  />\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-notification\"\n                    label=\"Notifications\"\n                  />\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-ui\"\n                    label=\"User Interfaces\"\n                  />\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-cache\"\n                    label=\"Cache\"\n                  />\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-servers\"\n                    label=\"Servers\"\n                  />\n                  <HashLink\n                    firstVisibleTitle={this.state.firstVisibleTitle}\n                    hash=\"settings-devs\"\n                    label=\"Developer Information\"\n                  />\n                </ul>\n              </nav>\n              <section>\n                <section onChange={changeSettings}>\n                  <AddToHomeScreen />\n                  <hr />\n                  <NavigationSettings navigation={navigation} />\n                  <hr />\n                  <NotificationSettings notifications={notifications} />\n                  <hr />\n                  <UISettings ui={ui} changeSettingsRaw={changeSettingsRaw} />\n                  <hr />\n                  <CacheSettings cache={cache} />\n                  <hr />\n                  <h4 id=\"settings-servers\">Servers settings</h4>\n                  <APIEndpointSettings category=\"api\" endpointDetails={api}>\n                    API Settings {!DEV && '(modification temporarily disabled)'}\n                  </APIEndpointSettings>\n                  <EBIEndpointSettings category=\"ebi\" endpointDetails={ebi}>\n                    EBI Search Settings{' '}\n                    {!DEV && '(modification temporarily disabled)'}\n                  </EBIEndpointSettings>\n                  <IPScanEndpointSettings\n                    category=\"ipScan\"\n                    endpointDetails={ipScan}\n                  >\n                    InterProScan Settings{' '}\n                    {!DEV && '(modification temporarily disabled)'}\n                  </IPScanEndpointSettings>\n                  <WikipediaEndpointSettings\n                    category=\"wikipedia\"\n                    endpointDetails={wikipedia}\n                  >\n                    Wikipedia Settings{' '}\n                    {!DEV && '(modification temporarily disabled)'}\n                  </WikipediaEndpointSettings>\n                  <AlphaFoldEndpointSettings\n                    category=\"alphafold\"\n                    endpointDetails={alphafold}\n                  >\n                    AlphaFold API Settings{' '}\n                    {!DEV && '(modification temporarily disabled)'}\n                  </AlphaFoldEndpointSettings>\n\n                  <Button onClick={this._handleReset}>\n                    Reset settings to default values\n                  </Button>\n                </section>\n                <hr />\n                <h4 id=\"settings-devs\">Developer Information</h4>\n                <Advanced />\n              </section>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = createSelector(\n  (state) => state.settings,\n  customLocationSelector,\n  (settings, customLocation) => ({ settings, customLocation }),\n);\n\nexport default connect(mapStateToProps, {\n  changeSettings,\n  resetSettings,\n  changeSettingsRaw,\n})(Settings);\n","import React, { useState, useEffect } from 'react';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport local from './style.css';\n\nconst css = cssBinder(fonts, local);\n\ntype Props = {\n  name?: string;\n  id: string;\n  size?: 'large' | 'small' | 'tiny';\n  switchCond: boolean;\n  disabled?: boolean;\n  label?: string;\n  SRLabel?: string;\n  onValue?: string;\n  offValue?: string;\n  handleChange?: (evt?: React.ChangeEvent) => void;\n  addAccessionStyle?: boolean;\n  width?: string;\n};\n\nconst ToggleSwitch = ({\n  name = 'switch',\n  id,\n  size = 'large',\n  switchCond,\n  disabled = false,\n  label,\n  SRLabel,\n  onValue = 'On',\n  offValue = 'Off',\n  handleChange,\n  addAccessionStyle = false,\n  width,\n}: Props) => {\n  const [isOn, setIsOn] = useState(switchCond);\n  useEffect(() => {\n    setIsOn(switchCond);\n  }, [switchCond]);\n  const onInputChange = (evt?: React.ChangeEvent) => {\n    if (handleChange) {\n      handleChange(evt);\n    } else {\n      setIsOn(!isOn);\n    }\n  };\n  const paddleStyle = width ? { width } : {};\n  return (\n    <div className={css('new-switch', size)}>\n      <label htmlFor={id}>\n        <input\n          type=\"checkbox\"\n          checked={isOn}\n          className={css('switch-input')}\n          name={name}\n          id={id}\n          onChange={onInputChange}\n          disabled={disabled}\n        />\n        {label}\n        <label\n          className={css(\n            'switch-paddle',\n            addAccessionStyle ? 'accession-selector' : '',\n            disabled ? 'disabled' : '',\n          )}\n          style={{ ...paddleStyle }}\n          htmlFor={id}\n        >\n          {SRLabel ? (\n            <span className={css('show-for-sr')}>{SRLabel}:</span>\n          ) : null}\n          <span className={css('switch-active')} aria-hidden=\"true\">\n            {onValue}\n          </span>\n          <span className={css('switch-inactive')} aria-hidden=\"true\">\n            {offValue}\n          </span>\n        </label>\n      </label>\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n","// extracted by mini-css-extract-plugin\nexport default {\"new-switch\":\"ToggleSwitch_style__new-switch___f6\",\"switch-input\":\"ToggleSwitch_style__switch-input___b8\",\"switch-paddle\":\"ToggleSwitch_style__switch-paddle___c6\",\"switch-active\":\"ToggleSwitch_style__switch-active___d8\",\"switch-inactive\":\"ToggleSwitch_style__switch-inactive___d2\",\"tiny\":\"ToggleSwitch_style__tiny___a1\",\"small\":\"ToggleSwitch_style__small___d3\",\"large\":\"ToggleSwitch_style__large___e1\",\"disabled\":\"ToggleSwitch_style__disabled___fa\",\"accession-selector\":\"ToggleSwitch_style__accession-selector___cc\"};"],"names":["f","foundationPartial","local","Advanced","loadable","loader","NavigationSettings","_ref","navigation","pageSize","secondsToRetry","React","id","SchemaOrgData","data","name","description","processData","schemaProcessDataPageSection","className","type","min","max","step","value","fullwidth","onChange","noop","propTypes","T","isRequired","NotificationSettings","_ref2","notifications","showTreeToast","showConnectionStatusToast","showSettingsToast","showHelpToast","showCtrlToZoomToast","status","setStatus","useState","Notification","permission","Callout","Button","onClick","askNotificationPermission","style","marginTop","checked","UISettings","_ref3","ui","lowGraphics","colorDomainsBy","labelContent","structureViewer","changeSettingsRaw","useEffect","accession","short","ToggleSwitch","switchCond","SRLabel","onBlur","EntryColorMode","ACCESSION","MEMBER_DB","DOMAIN_RELATIONSHIP","onValue","offValue","_CacheSettings","_ref4","cache","enabled","addToast","window","sessionStorage","clear","title","ttl","CacheSettings","connect","undefined","EndpointSettings","_ref5","category","endpointDetails","protocol","hostname","port","root","children","readOnly","DEV","secondary","success","alert","getStatusText","getStatusForEndpoint","endpoint","createSelector","state","servers","APIEndpointSettings","EBIEndpointSettings","IPScanEndpointSettings","WikipediaEndpointSettings","AlphaFoldEndpointSettings","loading","_beforeInstall","_classPrivateFieldLooseKey","_AddToHomeScreen","PureComponent","constructor","props","_this","super","this","Object","defineProperty","writable","event","preventDefault","setState","_handleClick","_asyncToGenerator","prompt","outcome","userChoice","body","installPrompt","componentDidMount","addEventListener","_classPrivateFieldLooseBase","componentWillUnmount","removeEventListener","render","AddToHomeScreen","HashLink","_ref7","firstVisibleTitle","hash","label","active","_document$getElementB","document","getElementById","scrollIntoView","behavior","history","replaceState","Settings","arguments","_updateHashBasedOnScroll","_Array$from$map$filte","Array","from","querySelectorAll","map","e","top","getBoundingClientRect","filter","_ref8","_handleReset","resetSettings","customLocation","setTimeout","_document$getElementB2","settings","api","ebi","ipScan","wikipedia","alphafold","changeSettings","location","schemaProcessDataWebPage","mapStateToProps","customLocationSelector","css","cssBinder","fonts","size","disabled","handleChange","addAccessionStyle","width","isOn","setIsOn","paddleStyle","htmlFor","evt","assign"],"sourceRoot":""}