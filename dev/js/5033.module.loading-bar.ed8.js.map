{"version":3,"file":"js/5033.module.loading-bar.ed8.js","mappings":"wOAeO,MAAMA,UAAmBC,EAAAA,cAS9BC,WAAAA,CAAYC,GACVC,MAAMD,GAAO,KAafE,gBAAkB,CAACC,EAAcC,KAC1BC,KAAKC,KAAKC,UACfF,KAAKC,KAAKC,QAAQC,MAAMC,UAAY,UAAUL,EAAQ,IAClDD,IAAiBC,IACF,IAAbA,IAAgBC,KAAKC,KAAKC,QAAQC,MAAME,QAAU,KACjC,IAAjBP,IAAoBE,KAAKC,KAAKC,QAAQC,MAAME,QAAU,MAC5D,EAjBAL,KAAKC,KAAOK,EAAAA,WACd,CAEAC,iBAAAA,GACEP,KAAKH,gBAAgB,EAAGG,KAAKL,MAAMI,SACrC,CAEAS,kBAAAA,CAAkBP,GAA4B,IAA3B,SAAEF,GAAUE,EAC7BD,KAAKH,gBAAgBE,EAAUC,KAAKL,MAAMI,SAC5C,CAWAU,MAAAA,GACE,IAAM,SAAEV,GAAaC,KAAKL,MAC1B,OACEW,EAAAA,cAAA,QACEI,IAAKV,KAAKC,KACVU,UCnDsB,sCDoDtBC,KAAK,cACL,aAAW,4BACX,gBAAeb,EACf,gBAAc,IACd,gBAAc,KAGpB,EA7CWP,EAKJqB,UAAY,CACjBd,SAAUe,IAAAA,OAASC,YA0CvB,IAAMC,GAAkBC,EAAAA,EAAAA,IACtBC,EAAAA,IACCnB,IAAQ,CAAQA,eAGnB,SAAeoB,EAAAA,EAAAA,IAAQH,EAAvB,CAAwCxB,E","sources":["webpack://interpro7-client/./src/components/LoadingBar/index.js","webpack://interpro7-client/./src/components/LoadingBar/styles.css?87b5"],"sourcesContent":["// @flow\nimport React, { PureComponent } from 'react';\nimport T from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\n// $FlowFixMe\nimport { overallDataProgressSelector } from 'reducers/data-progress';\n\nimport styles from './styles.css';\n\n/*:: type Props = {|\n  progress: number,\n|}; */\n\nexport class LoadingBar extends PureComponent /*:: <Props> */ {\n  /* ::\n    _ref: { current: null | React$ElementRef<'span'> };\n  */\n\n  static propTypes = {\n    progress: T.number.isRequired,\n  };\n\n  constructor(props /*: Props */) {\n    super(props);\n\n    this._ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this._updateProgress(0, this.props.progress);\n  }\n\n  componentDidUpdate({ progress } /*: Props */) {\n    this._updateProgress(progress, this.props.progress);\n  }\n\n  _updateProgress = (prevProgress, progress) => {\n    if (!this._ref.current) return;\n    this._ref.current.style.transform = `scaleX(${progress})`;\n    if (prevProgress !== progress) {\n      if (progress === 1) this._ref.current.style.opacity = '0';\n      if (prevProgress === 1) this._ref.current.style.opacity = '1';\n    }\n  };\n\n  render() {\n    const { progress } = this.props;\n    return (\n      <span\n        ref={this._ref}\n        className={styles.loading_bar}\n        role=\"progressbar\"\n        aria-label=\"Progress for API requests\"\n        aria-valuenow={progress}\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = createSelector(\n  overallDataProgressSelector,\n  (progress) => ({ progress }),\n);\n\nexport default connect(mapStateToProps)(LoadingBar);\n","// extracted by mini-css-extract-plugin\nexport default {\"loading_bar\":\"LoadingBar_styles__loading_bar___f1\"};"],"names":["LoadingBar","PureComponent","constructor","props","super","_updateProgress","prevProgress","progress","this","_ref","current","style","transform","opacity","React","componentDidMount","componentDidUpdate","render","ref","className","role","propTypes","T","isRequired","mapStateToProps","createSelector","overallDataProgressSelector","connect"],"sourceRoot":""}