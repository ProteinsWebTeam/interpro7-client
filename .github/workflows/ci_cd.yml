name: CI/CD Pipeline

on:
  workflow_run:
    workflows: [test_and_build]
    types: [completed]
    branches: [dev, master]

jobs:
  build:
    runs-on: self-hosted 
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:

      - name: Clean up folders
        run: |
          rm -rf ~/release-procedures/v2/builds/*

      # - name: Checkout deploy branch
      #   uses: actions/checkout@v3
      #   with:
      #     clean: true
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     fetch-depth: 0
      #     ref: deploy

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: dev-build-artifact
          path: ~/release-procedures/v2/builds/

      # - name: Release 
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |            

      #       # Retrieve the most recent commit hash from the deploy branch
      #       commit_hash=$(curl -s \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer $GITHUB_TOKEN" \
      #         "https://api.github.com/repos/ProteinsWebTeam/interpro7-client/commits?sha=deploy&per_page=1" | \
      #         jq -r '.[0].sha')

      #       # Build the API URL for the commit
      #       api_url="https://api.github.com/repos/ProteinsWebTeam/interpro7-client/commits/$commit_hash"

      #       # Retrieve the filename of the changed file from the commit
      #       changed_files=$(curl -s \
      #         -H "Authorization: Bearer $GITHUB_TOKEN" \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "$api_url" | \
      #         jq -r '.files[1].filename')

      #       # Determine the deployment branch
      #       if echo "$changed_files" | grep -q 'dev'; then
      #         DIST_PATH="dev"
      #         DEPLOY_BRANCH=("dev" "stage")
      #         VM_NAME=("wp-np3-bd")
      #       elif echo "$changed_files" | grep -q 'master'; then
      #         DIST_PATH="master"
      #         DEPLOY_BRANCH=("master")
      #         VM_NAME=("wp-p1m-aa" "wp-p2m-aa")
      #       else
      #         exit 0
      #       fi

      #       # Create the release folder, copy files, and update symbolic link on each VM
      #       IPRO_RELEASE_FOLDER="interpro7-client-$(date --utc +%Y_%m_%d-%H_%M_%S_utc)"

      #       for VM in "${VM_NAME[@]}"; do
      #         for BRANCH in "${DEPLOY_BRANCH[@]}"; do
      #           VM_BASE_PATH="/nfs/www-prod/web_hx2/interpro/${BRANCH}/website/releases/"
      #           SYMLINK="/nfs/www-prod/web_hx2/interpro/${BRANCH}/website/interpro7-client"

      #           ssh $VM "cd $VM_BASE_PATH; mkdir -p \"${IPRO_RELEASE_FOLDER}\""
      #           scp -q -r $DIST_PATH/* $VM:"$VM_BASE_PATH/$IPRO_RELEASE_FOLDER"
      #           ssh $VM "rm -f \"$SYMLINK\"; ln -s \"$VM_BASE_PATH/$IPRO_RELEASE_FOLDER\" \"$SYMLINK\""
      #         done
      #       done



