name: CI/CD Pipeline

on:
  workflow_run:
    workflows: [test_and_build]
    types: [completed]
    branches: [dev, master]

jobs:
  build:
    runs-on: self-hosted 
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:

      - name: Clean folder
        run: |
          rm -rf ~/release-procedures/v2/builds/*

      - name: Download artifact (s)
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: "*-build-artifact"
          path: ~/release-procedures/v2/builds/

      - name: Release 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |            

          # Get the list of build artifact directories
          BUILD_PATH="~/release-procedures/v2/builds/"
          CHANGED_FILES=$(ls -d ${BUILD_PATH}*-build-artifact/ 2>/dev/null)

          # If no build artifacts are found, exit
          if [ -z "$CHANGED_FILES" ]; then
            echo "No build artifacts found. Exiting."
            exit 0
          fi

          # Loop through each detected build artifact (master and staging case)
          for ARTIFACT_PATH in $CHANGED_FILES; do
            ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")

            if [[ "$ARTIFACT_NAME" == "dev-build-artifact" ]]; then
              DIST_PATH="$ARTIFACT_PATH"
              DEPLOY_BRANCH=("dev")
              VM_NAME=("wp-np3-bd")
            elif [[ "$ARTIFACT_NAME" == "master-build-artifact" ]]; then
              DIST_PATH="$ARTIFACT_PATH"
              DEPLOY_BRANCH=("master")
              VM_NAME=("wp-p1m-aa" "wp-p2m-aa")
            elif [[ "$ARTIFACT_NAME" == "staging-build-artifact" ]]; then
              DIST_PATH="$ARTIFACT_PATH"
              DEPLOY_BRANCH=("stage")
              VM_NAME=("wp-np3-be")
            else
              echo "Skipping unknown artifact: $ARTIFACT_NAME"
              continue
            fi

            # Create the release folder, copy files, and update symbolic link on each VM
            IPRO_RELEASE_FOLDER="interpro7-client-$(date --utc +%Y_%m_%d-%H_%M_%S_utc)"

            for VM in "${VM_NAME[@]}"; do
              for BRANCH in "${DEPLOY_BRANCH[@]}"; do
                VM_BASE_PATH="/nfs/www-prod/web_hx2/interpro/${BRANCH}/website/releases/"
                SYMLINK="/nfs/www-prod/web_hx2/interpro/${BRANCH}/website/interpro7-client"

                ssh $VM "cd $VM_BASE_PATH; mkdir -p \"${IPRO_RELEASE_FOLDER}\""
                scp -q -r $DIST_PATH/* $VM:"$VM_BASE_PATH/$IPRO_RELEASE_FOLDER"
              done
            done
          done


# commit_hash=$(curl -s \
# ssh $VM "rm -f \"$SYMLINK\"; ln -s \"$VM_BASE_PATH/$IPRO_RELEASE_FOLDER\" \"$SYMLINK\""
#   -H "Accept: application/vnd.github+json" \
#   -H "Authorization: Bearer $GITHUB_TOKEN" \
#   "https://api.github.com/repos/ProteinsWebTeam/interpro7-client/commits?sha=deploy&per_page=1" | \
#   jq -r '.[0].sha')

# # Build the API URL for the commit
# api_url="https://api.github.com/repos/ProteinsWebTeam/interpro7-client/commits/$commit_hash"

# # Retrieve the filename of the changed file from the commit
# changed_files=$(curl -s \
#   -H "Authorization: Bearer $GITHUB_TOKEN" \
#   -H "Accept: application/vnd.github.v3+json" \
#   "$api_url" | \
#   jq -r '.files[1].filename')