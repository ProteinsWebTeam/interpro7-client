// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Pages /> should render 1`] = `
<div
  className="main stuck"
>
  <Memo(Connect(UnconnectedErrorBoundary))>
    <div
      className="row"
    >
      <div
        className="large-12 columns"
      >
        <Memo(Connect(_Switch))
          catchAll={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "type": [Function],
            }
          }
          childRoutes={
            Map {
              /\\^search\\|result\\$/ => [Function],
            }
          }
          indexRoute={[Function]}
          locationSelector={[Function]}
        />
      </div>
    </div>
  </Memo(Connect(UnconnectedErrorBoundary))>
  <Memo(Connect(UnconnectedErrorBoundary))>
    <Memo(Connect(_Switch))
      catchAll={
        Object {
          "$$typeof": Symbol(react.memo),
          "compare": null,
          "type": [Function],
        }
      }
      childRoutes={
        Map {
          "entry" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "protein" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "structure" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "taxonomy" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "proteome" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "set" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "search" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "result" => Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
        }
      }
      indexRoute={[Function]}
      locationSelector={[Function]}
    />
  </Memo(Connect(UnconnectedErrorBoundary))>
</div>
`;
