#!/usr/bin/env python2

# standard library modules
import sys, errno, re, json, ssl
import urllib2
from time import sleep

BASE_URL = "<%= url %>?page_size=200<%= fileType === 'fasta' ? '&extra_fields=sequence' : '' %>"

<% if (fileType === 'fasta') { %>
HEADER_SEPARATOR = "|"
LINE_LENGTH = 80
<% } %>


def output_list():
  #disable SSL verification to avoid config issues
  context = ssl._create_unverified_context()

  next = BASE_URL
  last_page = False

  <% if (fileType === "json") { %>
  #json header
  sys.stdout.write("{ \"results\": [\n")
  <% } %>
  while next:
    req = urllib2.Request(next, headers={"Accept": "application/json"})
    res = urllib2.urlopen(req, context=context)
    # If the API times out due a long running query
    if res.getcode() == 408:
      # wait just over a minute
      sleep(61)
      # then continue this loop with the same URL
      continue

    payload = json.loads(res.read())
    next = payload["next"]
    if not next:
      last_page = True

    for i, item in enumerate(payload["results"]):
      <% if (fileType === "json" || fileType === "json") { %>
      sys.stdout.write(json.dumps(item))
      # for indented output replace the above line with the following
      # sys.stdout.write(json.dumps(item, indent=4))

      if last_page and i+1 == len(payload["results"]):
        sys.stdout.write("")
      else:
        sys.stdout.write(",\n")
        <% } else if (fileType === "fasta") { %>
      if ("entries" in item):
        for entry in item["entries"]:
          for locations in entry["entry_protein_locations"]:
            for fragment in locations["fragments"]:
              start = fragment["start"]
              end = fragment["end"]
              sys.stdout.write(">" + item["metadata"]["accession"] + HEADER_SEPARATOR
                               + entry["accession"] + HEADER_SEPARATOR
                               + str(start) + "..." + str(end) + HEADER_SEPARATOR
                               + item["metadata"]["name"] + "\n")
              seq = item["extra_fields"]["sequence"]
              fastaSeqFragments = [seq[0+i:LINE_LENGTH+i] for i in xrange(0, len(seq), LINE_LENGTH)]
              for fastaSeqFragment in fastaSeqFragments:
                sys.stdout.write(fastaSeqFragment + "\n")
      else:
        sys.stdout.write(">" + item["metadata"]["accession"] + HEADER_SEPARATOR + item["metadata"]["name"] + "\n")
        seq = item["extra_fields"]["sequence"]
        fastaSeqFragments = [seq[0+i:LINE_LENGTH+i] for i in xrange(0, len(seq), LINE_LENGTH)]
        for fastaSeqFragment in fastaSeqFragments:
          sys.stdout.write(fastaSeqFragment + "\n")
        <% } else { %>
          sys.stdout.write(item["metadata"]["accession"] + "\n")
        <% } %>
    # Don't overload the server, give it time before asking for more
    if next:
      sleep(1)

<% if (fileType === "json") { %>
#json footer
sys.stdout.write("\n] }\n")
<% } %>


if __name__ == "__main__":
  output_list()
