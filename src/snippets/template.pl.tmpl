#!/usr/bin/env perl

use strict;
use warnings;
use LWP::UserAgent;
use JSON qw( encode_json decode_json );
use Data::Dumper;

# Switching off SSL verification
$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0;

my $BASE_URL = "<%= url %><%= url.indexOf('?')===-1 ? '?' : '&' %>page_size=200<%= fileType === 'fasta' ? '&extra_fields=sequence' : '' %>";
<% if (fileType === "tsv" && columns.some(x => x.indexOf("extra_fields.counters")>=0)) { %>
  $BASE_URL .= "&extra_fields=counters"
<% }  if (fileType === 'fasta') { %>
  my $HEADER_SEPARATOR = "|";
  my $LINE_LENGTH = 80;
<% } if (fileType === "tsv") { %>
  sub parseItems {
    my (@items) = @_;
    my $tsvValue = "";
    $tsvValue = join(",", @items) if (@items);
    return $tsvValue;
  }

  sub parseMemberDatabases {
    my ($dbs) = @_;
    my $tsvValue = "";
    foreach my $db (keys %{$dbs}) {
      $tsvValue .= "$db:" . join(",", keys $dbs->{$db}) . ";";
    }
    $tsvValue =~ s/\;$//; #remove terminal semi-colon
    return $tsvValue;
  }

  sub parseGoTerms {
    my ($terms) = @_;
    my $tsvValue = "";
    ($tsvValue = join ",", map {$_->{'identifier'}} @{$terms}) if (@{$terms});
    return $tsvValue;
  }

  sub parseLocations {
    my ($locations) = @_;
    my $tsvValue = "";
    my (@tsvValues);
    foreach my $location (@{$locations}) {
      push (@tsvValues,
            join ",",
            map {$_->{'start'}."..".$_->{'end'}}
            @{$location->{'fragments'}});
    }
    $tsvValue = join ",", @tsvValues if (@tsvValues);
    return $tsvValue;
  }

  sub parseGroupColumn {
    my ($key, $values, $selector) = @_;
    my @tsvValues;
    foreach my $value (@{$values}) {
      push(@tsvValues, parseColumn($value->{$key}, $selector));
    }
    my $tsvValue = "";
    $tsvValue = join ",", @tsvValues if (@tsvValues);
    return $tsvValue;
  }

  sub parseColumn {
    my ($value, $selector) = @_;
    unless ($value) {
      return ""
    }
    if ($selector =~ /member_databases/ ) {
      return parseMemberDatabases($value);
    }
    if ($selector =~ /go_terms/) {
      return parseGoTerms($value);
    }
    if ($selector =~ /children/) {
      return parseItems($value);
    }
    if ($selector =~ /locations/) {
      return parseLocations($value);
    }
    return "$value";
  }
<% } %>
sub main {
  my $agent = LWP::UserAgent->new();

  my $next = $BASE_URL;
  my $last_page = 0;
  <% if (fileType === "json") { %>
  print "{ \"results\": [\n";
  <% } %>
  while ($next) {
    my $req = HTTP::Request->new(
      GET => $next,
      HTTP::Headers->new("Accept" => "application/json"),
      ssl_opts =>  {
        SSL_verify_mode => 0
      }
    );
    my $res = $agent->request($req);
    if ($res->code == 408) {
      #wait just over a minute
      sleep(61);
      # then continue this loop with the same URL
      next;
    } elsif ($res->code == 204) {
      #no data matching query
      last;
    }
    my $payload = decode_json($res->content);
    $next = $payload->{"next"};
    unless (defined $next){
      $last_page = 1;
    }
    my $results = $payload->{"results"};
    for (my $i=0; $i < (@{$results}); $i++) {
      my $item = $results->[$i];
      <% if (fileType === "json") { %>
      print encode_json($item);
      unless ($last_page && $i+1 == (@{$results})){
        print ",\n";
      }
      <% } else if (fileType === "tsv") { %>
      my $value;
      <%
          for (column of columns) {
             if (column.indexOf("[*]") !== -1) {
      %>
      $value = parseGroupColumn(<%= path2perl(column, "$item") %>, '<%= column %>');
      <% } else { %> 
      $value = parseColumn(<%= path2perl(column, "$item") %>, '<%= column %>');
      <% } %>
      print "$value\t";
      <% } %>
        print "\n";
      <% } else if (fileType === "fasta") { %>
      my $entries;
      if (defined $item->{"entries"}){
        $entries=$item->{"entries"};
      }
      if ($entries){
        print ">$item->{metadata}->{accession}$HEADER_SEPARATOR";
        my $DASH="";
        foreach my $entry (@{$entries}) {
          print "$DASH$entry->{accession}(";
          my $SEMICOLON = "";
          foreach my $locations  (@{$entry->{"entry_protein_locations"}}) {
            print "$SEMICOLON";
            my $COMMA = "";
            foreach my $fragment (@{$locations->{"fragments"}}) {
              my $start = $fragment->{"start"};
              my $end = $fragment->{"end"};
              print "$COMMA$start...$end";
              $COMMA=",";
            }
            $SEMICOLON = ";";            
          }
          $DASH="-";
          print ")";
        }
        print "$HEADER_SEPARATOR$item->{metadata}->{name}\n";

      } else {
        print ">$item->{metadata}->{accession}$HEADER_SEPARATOR$item->{metadata}->{name}\n";
      }
      my $seq =  $item->{"extra_fields"}{"sequence"};
      foreach my $fastaSeqFragment (unpack("(A$LINE_LENGTH)*", $seq)) {
        print "$fastaSeqFragment\n";
      }
      <% } else { %>
      print $item->{'metadata'}->{'accession'}."\n";
      <% } %>
    }
    if ($next) {
      sleep(1);
    }
  }
  <% if (fileType === "json") { %>
  print "] }\n";
  <% } %>
}

main();
