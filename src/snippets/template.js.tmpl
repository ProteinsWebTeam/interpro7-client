#!/usr/bin/env node

// external modules required: node-fetch, timing-functions
const fetch = require('node-fetch');
const sleep = require('timing-functions').sleep;

<% if (fileType === 'fasta') { %>
const DESCRIPTION_SEPARATOR = '|';
const CHUNK_OF_TEXT_OF_EIGHTY_CHARACTERS = /(.{1,80})/g;

const processItem = function* ({
  metadata: { accession, source_database, name, source_organism},<% if (subset) { %>
  entries: [{ entry_protein_locations: matches }],<% } %>
  extra_fields: { sequence },
}) {<% if (subset) { %>
  for (const [index, match] of matches.entries) {
    // generate description line
    yield `>${[
      accession,
      `match:${index + 1}/${matches.length}`
      `subsequence:${match.fragments.map(({ start, end }) => `${start}-${end}`).join(';')}`
      source_database,
      name,
      `taxID:${source_organism.taxId}`
    ].join(DESCRIPTION_SEPARATOR)}}\n`;
    // generate sequence
    yield match.fragments.map(
      ({ start, end }) => sequence.substring(start - 1, end)
    ).join('-').replace(CHUNK_OF_TEXT_OF_EIGHTY_CHARACTERS, '$1\n');
  }<% } else { %>
  // generate description line
  yield `>${
    [accession, source_database, name, `taxID:${source_organism.taxId}`]
      .join(DESCRIPTION_SEPARATOR)
  }}\n`;
  // generate sequence
  yield sequence.replace(CHUNK_OF_TEXT_OF_EIGHTY_CHARACTERS, '$1\n');<% } %>
};
<% } else if (fileType === 'accession') { %>
const processItem = function* ({ metadata: { accession } }) {
  yield `${accession}\n`;
};
<% } else if (fileType === 'json' || fileType === 'ndjson') { %>
const processItem = function* (item) {
  yield JSON.stringify(item);<% if (fileType === 'ndjson') { %>
  yield '\n';<% } %>
<% } else if (fileType === 'tsv') { %>
const isObject = o => o instanceof Object && o.constructor === Object;

const parseItems = items => Array.isArray(items) ? items.join() : "";

const parseMemberDatabases = dbs => isObject(dbs)
  ? Object.entries(dbs)
      .map(([db,entries]) => `${db}:${Object.keys(entries).join()}`)
      .join()
  : ""

const parseGoTerms = gos => Array.isArray(gos) ? gos.map(go=>go.identifier).join() : "";

const parseLocations = locations =>
  locations && Array.isArray(locations)
    ? locations
        .map(({ fragments }) =>
          fragments.map(({ start, end }) => `${start}..${end}`).join(','),
        )
        .join(',')
    : '';

const parseGroupColumn = (item, selector) => {
  const [main, selectorInGoup] = selector.split("[*]");
  return item[main]
    .map(
      group => parseColumn(
        group[selectorInGoup.slice(2,-2)],
        selector,
      )
    ).join()

}
const parseColumn = (value, selector) => {
  if (value === null) 
    return ""
  else if (selector.indexOf("member_databases") !== -1)
    return parseMemberDatabases(value);
  else if (selector.indexOf("go_terms") !== -1)
    return parseGoTerms(value);
  else if (selector.indexOf("children") !== -1)
    return parseItems(value);
  else if (selector.indexOf("locations") !== -1)
    return parseLocations(value);
  return "" + value;
};
const processItem = function* (item) {
  let row = "";
  <% for (column of columns) {
       if (column.indexOf("[*]") !== -1) {
       %>row += parseGroupColumn(item, '<%= column %>') + "\t";
  <%   } else {
       %>row += parseColumn(<%= path2code(column, "item") %>, '<%= column %>') + "\t";
  <%   }
  } %>
  row += "\n";
  yield row;
};

<% } %>

const main = async function* (startURL) {
  let next = startURL;<% if (fileType === 'json') { %>
  let first = true;
  yield `{\n"results": [\n`;<% } %>
  while (next) {
    const response = await fetch(
      next,
      { headers: { Accept: 'application/json' } }
    );
    // If the server sent a timeout response…
    if (response.status === 408) {
      // …wait a bit for the server to process the query in the background…
      await sleep(60000);
      // …then continue this loop with the same URL
      continue;
    } else if (response.status === 204) {
      yield '\n]\n}\n';
      break;
    }
    const payload = await response.json();
    for (const item of payload.results) {<% if (fileType === 'json') { %>
      if (first) {
        yield '\n';
        first = false;
      } else {
        yield ',\n';
      }<% } %>
      yield* processItem(item);
    }
    next = payload.next;<% if (fileType === 'json') { %>
    if (!next) {
      yield '\n]\n}\n';
    }<% } %>
    // Don't overload the server, give it a bit of time before asking for more
    if (next) await sleep(1000);
  }
};

let BASE_URL = '<%= url %>?page_size=100<%= fileType === 'fasta' ? '&extra_fields=sequence' : '' %>';
<% if (fileType === "tsv" && columns.some(x => x.indexOf("extra_fields.counters")>=0)) { 
%>BASE_URL += "&extra_fields=counters"
<% } %>
  
if (require.main === module) {
  // If used from the command line, will write data to stdout asap
  const mainWriteToStdout = async () => {
    const process = require('process');
    // If pipe is interrupted, it might be normal, just exit
    process.stdout.on(
      'error',
      ({ code }) => process.exit(code === 'EPIPE' ? 0 : 1)
    );
    for await (const output of main(BASE_URL)) {
      process.stdout.write(output);
    }
  }
  mainWriteToStdout();
} else {
  // If used as a module, can be used as an async generator
  module.exports = (baseURL = BASE_URL) => main(baseURL);
}
