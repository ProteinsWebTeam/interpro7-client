{"version":3,"file":"js/8810.module.structure-summary.ce2.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/Accession/index.tsx","webpack://interpro7-client/./src/components/Accession/style.css?1419","webpack://interpro7-client/./src/components/SimpleCommonComponents/FullScreenButton/index.tsx","webpack://interpro7-client/./src/utils/fullscreen/index.js","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/ToggleButton/index.tsx","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/index.tsx","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/style.css?e289","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/EntrySelection/index.tsx","webpack://interpro7-client/./src/components/Related/DomainEntriesOnStructure/ProteinViewerLoaded/index.tsx","webpack://interpro7-client/./src/components/Related/DomainEntriesOnStructure/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/ProteinViewerForStructures/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/index.tsx","webpack://interpro7-client/./src/components/Structure/Summary/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/utils/resource-restriction/index.ts","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/style.css?39be","webpack://interpro7-client/./src/utils/date/index.ts","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/button-bar.css?ba9b","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/style.css?b122"],"sourcesContent":["import React from 'react';\n\nimport cssBinder from 'styles/cssBinder';\nimport local from './style.css';\n\nconst f = cssBinder(local);\n\ntype Props = {\n  accession: string | number;\n  withTitle?: boolean;\n  title?: string;\n};\n\nconst Accession = ({ withTitle, accession, title }: Props) => {\n  return (\n    <div>\n      {title !== '' && withTitle ? <span> {title || 'Accession'}:</span> : null}\n      {title === 'Job ID' ? (\n        <span className={f('tag-sqc')}> {accession}</span>\n      ) : (\n        accession\n      )}\n    </div>\n  );\n};\n\nexport default Accession;\n","// extracted by mini-css-extract-plugin\nexport default {\"tag-sqc\":\"Accession_style__tag-sqc___bf\"};","import React, { useState, useEffect } from 'react';\n\nimport { noop } from 'lodash-es';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Button from 'components/SimpleCommonComponents/Button';\n\nimport { requestFullScreen, exitFullScreen } from 'utils/fullscreen';\nimport cssBinder from 'styles/cssBinder';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(fonts);\n\ntype Props = {\n  /**\n   * Hook that is call when the full screen action gets trigger\n   * @returns void\n   */\n  onFullScreenHook?: () => void;\n  /**\n   * Hook that is call when exiting the full screen action\n   * @returns void\n   */\n  onExitFullScreenHook?: () => void;\n  /**\n   * Either the id, or directly the DOM element to be send to full screen\n   */\n  element?: string | HTMLElement | null;\n  /**\n   * Content of the tooltip that appears when hovering this button\n   */\n  tooltip: string;\n  /**\n   * Extra CSS classes to add\n   */\n  className?: string;\n  /**\n   * Should we change the icon for one from https://www.ebi.ac.uk/style-lab/general/fonts/v1.3/\n   */\n  dataIcon?: string;\n  /**\n   * To disable the component\n   */\n  disabled?: boolean;\n};\nconst FullScreenButton = ({\n  element,\n  tooltip,\n  className,\n  dataIcon,\n  disabled = false,\n  onFullScreenHook = noop,\n  onExitFullScreenHook = noop,\n}: Props) => {\n  const [elementInDOM, setElementInDom] = useState<\n    HTMLElement | null | undefined\n  >(null);\n  const [isFull, setFull] = useState(false);\n  const onFullscreen = () => {\n    if (document.fullscreenElement === null) {\n      setFull(false);\n      onExitFullScreenHook();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', onFullscreen);\n    return () => document.removeEventListener('fullscreenchange', onFullscreen);\n  }, []);\n  useEffect(() => {\n    setElementInDom(\n      typeof element === 'string' ? document.getElementById(element) : element,\n    );\n  }, [element]);\n\n  if (!elementInDOM) return null;\n  const _handleFullScreen = () => {\n    if (isFull) {\n      exitFullScreen();\n      onExitFullScreenHook();\n    } else {\n      requestFullScreen(elementInDOM).then(() => onFullScreenHook());\n    }\n    setFull(!isFull);\n  };\n  const _className =\n    className || css('margin-bottom-none', 'icon', 'icon-common');\n  const icon =\n    dataIcon || (isFull ? 'icon-fullscreen-collapse' : 'icon-fullscreen');\n  return (\n    <Tooltip title={tooltip}>\n      <Button\n        type=\"inline\"\n        onClick={_handleFullScreen}\n        icon={icon}\n        title={tooltip}\n        className={_className}\n        disabled={disabled}\n      />\n    </Tooltip>\n  );\n};\n\nexport default FullScreenButton;\n","export const requestFullScreen = (element) => {\n  if ('requestFullscreen' in element) {\n    return element.requestFullscreen();\n  } else if ('webkitRequestFullscreen' in element) {\n    return element.webkitRequestFullscreen();\n  } else if ('mozRequestFullScreen' in element) {\n    return element.mozRequestFullScreen();\n  } else if ('msRequestFullscreen' in element) {\n    return element.msRequestFullscreen();\n  }\n};\n\nexport const exitFullScreen = () => {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  } else if ('mozExitFullScreen' in document) {\n    return document.mozExitFullScreen();\n  } else if ('msExitFullscreen' in document) {\n    return document.msExitFullscreen();\n  }\n};\n\nexport const onFullScreenChange = (element, callback) => {\n  if ('onfullscreenchange' in element) {\n    element.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in element) {\n    element.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in element) {\n    element.onmozfullscreenchange = callback;\n  } else if ('onfullscreenchange' in document) {\n    document.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in document) {\n    document.onmozfullscreenchange = callback;\n  } else if ('onMSFullscreenChange' in document) {\n    document.onMSFullscreenChange = callback;\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { changeSettingsRaw } from 'actions/creators';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\ntype Props = {\n  isPIPEnabled: boolean;\n  changeSettingsRaw: typeof changeSettingsRaw;\n  className?: string;\n};\nconst PIPToggleButton = ({\n  isPIPEnabled,\n  changeSettingsRaw,\n  className,\n}: Props) => {\n  const togglePIP = () => {\n    changeSettingsRaw('ui', 'isPIPEnabled', !isPIPEnabled);\n  };\n  const text = `${\n    isPIPEnabled ? 'Disable' : 'Enable'\n  } The Picture In Picture functionality`;\n  return (\n    <Tooltip title={text}>\n      <button\n        className={className}\n        onClick={togglePIP}\n        data-icon=\"&#xf247;\"\n        title={text}\n        style={{\n          color: isPIPEnabled ? undefined : '#bbb',\n        }}\n      />\n    </Tooltip>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  (ui) => ({\n    isPIPEnabled: !!ui.isPIPEnabled,\n  })\n);\n\nexport default connect(mapStateToProps, { changeSettingsRaw })(PIPToggleButton);\n","import React, {\n  useState,\n  useEffect,\n  useRef,\n  ReactNode,\n  PropsWithChildren,\n} from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { intersectionObserver as intersectionObserverPolyfill } from 'utils/polyfills';\n\nimport cssBinder from 'styles/cssBinder';\nimport style from './style.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(style, fonts);\n\nconst NUMBER_OF_CHECKS = 10;\nconst optionsForObserver = {\n  root: null,\n  rootMargin: '0px',\n  threshold: Array.from(Array(NUMBER_OF_CHECKS)).map(\n    (_, n) => (n + 1) / NUMBER_OF_CHECKS\n  ),\n};\ntype Props = {\n  className: string;\n  hideBar?: boolean;\n  OtherControls?: {\n    bottom?: ReactNode | null;\n    top?: ReactNode | null;\n  };\n  OtherButtons?: ReactNode | null;\n  onChangingMode?: () => void;\n  isPIPEnabled?: boolean;\n} & PropsWithChildren;\n\nconst PictureInPicturePanel = ({\n  className,\n  hideBar = false,\n  OtherControls = { bottom: null, top: null },\n  OtherButtons = null,\n  onChangingMode = () => null,\n  isPIPEnabled = true,\n  children,\n}: Props) => {\n  const [isStuck, setStuck] = useState(false);\n  const [isMinimized, setMinimized] = useState(false);\n  const wrapperRef /*: { current: null | React$ElementRef<'div'> } */ =\n    useRef(null);\n  let observer: IntersectionObserver | null = null;\n  const threshold = 0.4;\n  useEffect(() => {\n    const asynLoadPolyfill = async () => await intersectionObserverPolyfill();\n    asynLoadPolyfill();\n  }, []);\n  useEffect(() => {\n    if (wrapperRef?.current) {\n      const current = wrapperRef.current;\n      observer = new IntersectionObserver((entries) => {\n        setStuck(\n          ((current as HTMLElement)?.getBoundingClientRect()?.y || 0) < 0 &&\n            entries[0].intersectionRatio < threshold\n        );\n        onChangingMode();\n      }, optionsForObserver);\n      observer.observe(current);\n    }\n    return () => {\n      if (observer) observer.disconnect();\n    };\n  }, [wrapperRef]);\n  return (\n    <div ref={wrapperRef} className={css('wrapper')}>\n      <div\n        className={css(className, 'content', {\n          'is-stuck': isStuck && isPIPEnabled,\n          'is-minimized': isMinimized,\n        })}\n      >\n        {!isStuck && <div className={css('controls')}>{OtherControls.top}</div>}\n        {children}\n        <div\n          className={css('control-bar', {\n            hide: hideBar,\n          })}\n        >\n          {OtherControls.bottom}\n          <div className={css('controls')}>\n            {isStuck && isPIPEnabled && OtherControls.top}\n            {OtherButtons}\n            {isStuck && isPIPEnabled && (\n              <button\n                data-icon={isMinimized ? '\\uF2D0' : '\\uF2D1'}\n                title={'Minimize'}\n                onClick={() => setMinimized(!isMinimized)}\n                className={css('control-icon', 'icon', 'icon-common')}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  (ui: { isPIPEnabled?: boolean }) => ({\n    isPIPEnabled: !!ui.isPIPEnabled,\n  })\n);\n\nexport default connect(mapStateToProps)(PictureInPicturePanel);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PictureInPicturePanel_style__wrapper___c5\",\"content\":\"PictureInPicturePanel_style__content___e7\",\"control-bar\":\"PictureInPicturePanel_style__control-bar___c7\",\"controls\":\"PictureInPicturePanel_style__controls___b2\",\"is-stuck\":\"PictureInPicturePanel_style__is-stuck___c4\",\"structure-viewer-select\":\"PictureInPicturePanel_style__structure-viewer-select___f5\",\"structure-icon\":\"PictureInPicturePanel_style__structure-icon___fe\",\"is-minimized\":\"PictureInPicturePanel_style__is-minimized___b9\",\"structure-viewer-ref\":\"PictureInPicturePanel_style__structure-viewer-ref___be\"};","import React from 'react';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport style from '../style.css';\n\nconst css = cssBinder(style);\nexport const NO_SELECTION = 'NO_SELECTION';\n\ntype Props = {\n  updateStructure: (memberDB: string | null, entry: string) => void;\n  entryMap: Object;\n  selectedEntry?: string;\n};\n\nconst EntrySelection = ({\n  entryMap,\n  selectedEntry,\n  updateStructure,\n}: Props) => {\n  const selectionGroups = [];\n  selectionGroups.push(\n    <option key=\"{NO_SELECTION}\" value={NO_SELECTION}>\n      Highlight Entry in the 3D structure\n    </option>\n  );\n\n  for (const [memberDB, entries] of Object.entries(entryMap)) {\n    const entryList = [];\n    for (const entry of Object.keys(entries)) {\n      const key = `${memberDB}$-${entry}`;\n      entryList.push(\n        <option key={key} value={entry}>\n          {entry}\n        </option>\n      );\n    }\n    selectionGroups.push(\n      <optgroup key={memberDB} label={memberDB}>\n        {entryList}\n      </optgroup>\n    );\n  }\n  const onSelectionChange = (e: React.FormEvent) => {\n    // extract memberDB and entry from component\n    const select = e.target as HTMLSelectElement;\n    const entry = select.value;\n    let memberDB = null;\n    if (entry !== null) {\n      const selectedOption = select.options[select.selectedIndex];\n      const optGroup = selectedOption.parentNode as HTMLOptGroupElement;\n      memberDB = optGroup?.label;\n    }\n    // update structure viewer\n    updateStructure(memberDB, entry);\n  };\n  return (\n    <select\n      className={css('structure-viewer-select')}\n      onChange={onSelectionChange}\n      onBlur={onSelectionChange}\n      value={selectedEntry}\n      data-testid=\"structure-entry-select\"\n    >\n      {selectionGroups}\n    </select>\n  );\n};\n\nexport default EntrySelection;\n","import React, { useEffect, useRef } from 'react';\n\nimport loadable from 'higherOrder/loadable';\n\nconst ProteinViewer = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"protein-viewer\" */ 'components/ProteinViewer'),\n  loading: null,\n});\n\ntype Props = {\n  tracks: Array<[string, Array<Record<string, unknown>>]>;\n  chain: string;\n  fixedHighlight?: string;\n  id: string;\n  protein: { accession: string; length: number; sequence: string };\n};\n\nconst ProteinViewerLoaded = ({ protein, tracks, chain, id }: Props) => {\n  const protvistaEl = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (!protvistaEl.current || !protvistaEl.current.addEventListener) return;\n    const handleMouseover = (event: Event) => {\n      const {\n        detail: { eventType, highlight, feature },\n      } = event as CustomEvent;\n      if (eventType === 'mouseover' && feature.aa) {\n        protvistaEl.current?.dispatchEvent(\n          new CustomEvent('change', {\n            detail: {\n              highlight,\n              eventType: 'sequence-chain',\n              chain,\n              protein: protein.accession,\n            },\n            bubbles: true,\n            cancelable: true,\n          }),\n        );\n      }\n    };\n    protvistaEl.current.addEventListener('change', handleMouseover);\n\n    return () => {\n      if (protvistaEl.current)\n        protvistaEl.current.removeEventListener('change', handleMouseover);\n    };\n  });\n\n  const enrichedTracks = [...tracks];\n\n  return (\n    <div ref={protvistaEl}>\n      <ProteinViewer\n        protein={protein}\n        data={enrichedTracks}\n        id={id}\n        title=\"Domains in the chain\"\n      />\n    </div>\n  );\n};\n\nexport default ProteinViewerLoaded;\n","import React, { useMemo } from 'react';\n\nimport Link from 'components/generic/Link';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\n\nimport ProteinViewerForStructure from './ProteinViewerLoaded';\n\nimport cssBinder from 'styles/cssBinder';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport { orderByAccession } from 'components/Related/DomainsOnProtein';\nimport { flattenTracksObject } from 'components/Related/DomainsOnProtein/DomainsOnProteinLoaded';\n\nconst css = cssBinder(fonts);\n\nconst toArrayStructure = (locations: Array<ProtVistaLocation>) =>\n  locations.map((loc) => loc.fragments.map((fr) => [fr.start, fr.end]));\n\nexport type DataForProteinChain = {\n  protein: {\n    accession: string;\n    length: number;\n  };\n  sequence: {\n    sequence: string;\n    length: number;\n  };\n  data: {\n    [key: string]: Array<{\n      accession: string;\n      name?: string;\n      short_name?: string;\n      coordinates?: number[][][];\n      source_database: string;\n      locations: ProtVistaLocation[];\n      link?: string;\n      children?: unknown;\n      chain: string;\n      protein?: string;\n      type: string;\n    }>;\n  };\n  chain: string;\n  isChimeric?: boolean;\n};\n\nconst mergeData = (\n  secondaryData: StructureLinkedObject[],\n  secondaryStructures?: SecondaryStructure[],\n) => {\n  const out: Record<string, Record<string, DataForProteinChain>> = {};\n  for (const entry of secondaryData) {\n    if (!(entry.chain in out)) {\n      out[entry.chain] = {};\n    }\n    if (!(entry.protein in out[entry.chain])) {\n      // Merging the secondary structures data per chain\n      const secondaryStructArray = [];\n      if (secondaryStructures) {\n        for (const structure of secondaryStructures) {\n          // eslint-disable-next-line max-depth\n          if (entry.chain === structure.accession) {\n            const allFragments: Array<ProtVistaFragment> = [];\n            structure.locations.forEach((loc) => {\n              loc.fragments.forEach((f) => {\n                if (f.shape === 'helix') {\n                  f.fill = 'transparent';\n                  allFragments.push({ ...f });\n                } else {\n                  allFragments.push({ ...f });\n                }\n              });\n            });\n            const newLocations = [];\n            for (const f of allFragments) {\n              // To be consistent with the expected structure loc = [{fragments: [{}]}]\n              newLocations.push({ fragments: [{ ...f }] });\n            }\n            secondaryStructArray.push({\n              locations: newLocations,\n              type: 'secondary_structure',\n              accession: `Chain ${structure.accession}`,\n              source_database: 'PDB',\n              chain: structure.accession,\n            });\n          }\n        }\n      }\n\n      out[entry.chain][entry.protein] = {\n        protein: {\n          accession: entry.protein,\n          length: entry.protein_length,\n        },\n        sequence: {\n          sequence: entry.sequence,\n          length: entry.sequence_length,\n        },\n        data: {\n          secondary_structure: secondaryStructArray,\n        },\n        chain: entry.chain,\n      };\n    }\n\n    const dataType =\n      entry.source_database.toLowerCase() === 'interpro'\n        ? entry.type\n        : 'unintegrated';\n    if (!out[entry.chain][entry.protein].data[dataType as string]) {\n      out[entry.chain][entry.protein].data[dataType as string] = [];\n    }\n\n    out[entry.chain][entry.protein].data[dataType as string].push({\n      accession: entry.accession,\n      name: entry.name,\n      short_name: entry.short_name,\n      source_database: entry.source_database as 'interpro' | MemberDB,\n      coordinates: toArrayStructure(entry.entry_structure_locations),\n      locations: entry.entry_structure_locations,\n      link: `/entry/${entry.source_database}/${entry.accession}`,\n      children: entry.children?.map(\n        ({ entry_protein_locations, entry_structure_locations, ...child }) => ({\n          ...child,\n          locations: entry_structure_locations,\n        }),\n      ),\n      chain: entry.chain,\n      protein: entry.protein,\n      type: entry.type || entry.entry_type || '',\n    });\n  }\n\n  const entries = [];\n  const chains = Object.keys(out).sort((a, b) => (a ? a.localeCompare(b) : -1));\n  for (const chain of chains) {\n    const proteins = Object.keys(out[chain]).sort((a, b) =>\n      a ? a.localeCompare(b) : -1,\n    );\n    for (const protein of proteins) {\n      Object.values(out[chain][protein].data).forEach((g) =>\n        g.sort(orderByAccession),\n      );\n      entries.push(out[chain][protein]);\n    }\n  }\n  return entries;\n};\n\nconst tagChimericStructures = (data: DataForProteinChain[]) => {\n  const proteinsPerChain: Record<string, Array<string>> = {};\n  for (const e of data) {\n    if (!(e.chain in proteinsPerChain)) proteinsPerChain[e.chain] = [];\n    proteinsPerChain[e.chain].push(e.protein.accession);\n  }\n  for (const e of data) {\n    if (proteinsPerChain[e.chain].length > 1) e.isChimeric = true;\n  }\n};\n\nconst getRepresentativesPerChain = (\n  representativeDomains?: Record<string, unknown>[],\n) => {\n  const representativesPerChain: Record<string, Array<MinimalFeature>> = {};\n  if (representativeDomains?.length) {\n    representativeDomains.forEach((domain) => {\n      if (domain.chain) {\n        if (!representativesPerChain[domain.chain as string])\n          representativesPerChain[domain.chain as string] = [];\n        representativesPerChain[domain.chain as string].push(\n          domain as MinimalFeature,\n        );\n      }\n    });\n  }\n  return representativesPerChain;\n};\n\ntype Props = {\n  structure: string;\n  entries: StructureLinkedObject[];\n  unintegrated: StructureLinkedObject[];\n  secondaryStructures?: SecondaryStructure[];\n  representativeDomains?: Record<string, unknown>[];\n};\n\nconst EntriesOnStructure = ({\n  entries,\n  unintegrated,\n  secondaryStructures,\n  structure,\n  representativeDomains,\n}: Props) => {\n  const merged = useMemo(() => {\n    const data = mergeData(entries.concat(unintegrated), secondaryStructures);\n    tagChimericStructures(data);\n    return data;\n  }, [entries, unintegrated, secondaryStructures]);\n  const representativesPerChain = useMemo(\n    () => getRepresentativesPerChain(representativeDomains),\n    [representativeDomains],\n  );\n\n  return (\n    <>\n      <div className={css('vf-stack', 'vf-stack--400')}>\n        {merged.map((e, i) => {\n          const sequenceData = {\n            accession: `${e.chain}-${structure}`,\n            ...e.sequence,\n          };\n\n          const tracks = flattenTracksObject(e.data);\n          if (representativesPerChain[e.chain]) {\n            tracks.splice(0, 0, [\n              'representative domains',\n              representativesPerChain[e.chain],\n            ]);\n          }\n          return (\n            <div key={i} className={css('vf-stack')}>\n              <h4 id={`protvista-${e.chain}-${e.protein.accession}`}>\n                Chain {e.chain}{' '}\n                {e.protein?.accession && (\n                  <small>\n                    (\n                    <Link\n                      to={{\n                        description: {\n                          main: { key: 'protein' },\n                          protein: {\n                            db: 'uniprot',\n                            accession: e.protein.accession,\n                          },\n                        },\n                      }}\n                    >\n                      <span\n                        className={css('icon', 'icon-conceptual')}\n                        data-icon=\"&#x50;\"\n                      />{' '}\n                      {(e.protein.accession || '').toUpperCase()}\n                    </Link>\n                    )\n                  </small>\n                )}\n                {e.isChimeric && (\n                  <Tooltip title=\"This chain maps to a Chimeric protein consisting of two or more proteins\">\n                    <div className={css('tag')}>\n                      <span\n                        className={css('small', 'icon', 'icon-common')}\n                        data-icon=\"&#xf129;\"\n                        aria-label=\"This chain maps to a Chimeric protein consisting of two or more proteins\"\n                      />{' '}\n                      Chimeric\n                    </div>\n                  </Tooltip>\n                )}\n              </h4>\n              <ProteinViewerForStructure\n                tracks={\n                  tracks as Array<[string, Array<Record<string, unknown>>]>\n                }\n                chain={e.chain}\n                id={`${e.chain}-${e.protein.accession}`}\n                protein={sequenceData}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default EntriesOnStructure;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport EntriesOnStructure from 'components/Related/DomainEntriesOnStructure';\nimport { useProcessData } from 'components/ProteinViewer/utils';\n\ntype StructureWithSecondary = {\n  metadata: StructureMetadata;\n  extra_fields: { secondary_structures: Array<SecondaryStructure> };\n};\nexport interface LoadedProps\n  extends LoadDataProps<PayloadList<EndpointWithMatchesPayload<EntryMetadata>>>,\n    LoadDataProps<StructureWithSecondary, 'Secondary'> {\n  structure: string;\n}\n\nconst ProteinViewerForStructure = ({\n  structure,\n  data,\n  dataSecondary,\n}: LoadedProps) => {\n  const processedData = useProcessData(data?.payload?.results, 'structure');\n  if (!data || data.loading) return <Loading />;\n\n  let secondaryData;\n  if (dataSecondary && !dataSecondary.loading && dataSecondary.payload) {\n    if (\n      dataSecondary.payload.extra_fields &&\n      dataSecondary.payload.extra_fields.secondary_structures\n    ) {\n      secondaryData = dataSecondary.payload.extra_fields.secondary_structures;\n    }\n  }\n  if (!data.payload || !processedData) return null;\n  const { interpro, unintegrated, representativeDomains } = processedData;\n  return (\n    <div>\n      <EntriesOnStructure\n        structure={structure}\n        entries={interpro as StructureLinkedObject[]}\n        unintegrated={unintegrated as StructureLinkedObject[]}\n        secondaryStructures={secondaryData}\n        representativeDomains={representativeDomains}\n      />\n    </div>\n  );\n};\n\nexport const getURLForMatches = createSelector(\n  (state) => state.settings.api,\n  (state) => state.customLocation.description.structure,\n  ({ protocol, hostname, port, root }, { accession }) =>\n    format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}${descriptionToPath({\n        main: { key: 'entry' },\n        structure: { isFilter: true, db: 'pdb', accession },\n        entry: { db: 'all' },\n      } as InterProPartialDescription)}`,\n      query: {\n        page_size: 200,\n        extra_fields: 'short_name',\n      },\n    }),\n);\nconst getSecondaryStructureURL = createSelector(\n  (state) => state.settings.api,\n  (state) => state.customLocation.description.structure,\n  ({ protocol, hostname, port, root }, { db, accession }) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'structure' },\n      structure: { db, accession },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n      query: {\n        extra_fields: 'secondary_structures',\n      },\n    });\n  },\n);\n\nexport default loadData<StructureWithSecondary, 'Secondary'>({\n  propNamespace: 'Secondary',\n  getUrl: getSecondaryStructureURL,\n} as LoadDataParameters)(\n  loadData<PayloadList<EndpointWithMatchesPayload<EntryMetadata>>>(\n    getURLForMatches,\n  )(ProteinViewerForStructure),\n);\n","import React, { PureComponent, RefObject } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Link from 'components/generic/Link';\nimport EntrySelection from './EntrySelection';\nimport { NO_SELECTION } from './EntrySelection';\nimport { EntryColorMode, getTrackColor } from 'utils/entry-color';\n\nimport ProteinViewerForStructures from './ProteinViewerForStructures';\nimport FullScreenButton from 'components/SimpleCommonComponents/FullScreenButton';\nimport PictureInPicturePanel from 'components/SimpleCommonComponents/PictureInPicturePanel';\nimport PIPToggleButton from 'components/SimpleCommonComponents/PictureInPicturePanel/ToggleButton';\n\nimport StructureViewer from 'components/Structure/ViewerOnDemand';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport style from './style.css';\nimport buttonBar from './button-bar.css';\n\nconst css = cssBinder(style, buttonBar, fonts);\n\nconst RED = 0xff0000;\n\ntype Props = {\n  id: string;\n  matches: EndpointWithMatchesPayload<EntryMetadata, StructureLinkedObject>[];\n  highlight?: string;\n  colorDomainsBy: unknown;\n};\n\nexport type Selection = {\n  color: number;\n  start: number;\n  end: number;\n  chain: string;\n};\ntype SelectedEntry = {\n  accession?: string | null;\n  db?: string | null;\n  chain?: string | null;\n  protein?: string | null;\n};\ntype MinimalStructureFeature = MinimalFeature & {\n  chain?: string;\n  color: string;\n};\ntype EntryHit = {\n  struct_asym_id: string;\n  start_residue_number: number;\n  end_residue_number: number;\n  accession: string;\n  source_database: string;\n  color?: string;\n};\ntype State = {\n  entryMap: Record<string, Record<string, Record<string, EntryHit[]>>>;\n  selectedEntry: string;\n  selectedEntryToKeep?: SelectedEntry | null;\n  isReady: boolean;\n  isSplitScreen: boolean;\n  isSpinning: boolean;\n  shouldResetViewer: boolean;\n  selectionsInStructure?: Array<Selection> | null;\n};\n\nclass StructureView extends PureComponent<Props, State> {\n  name: string;\n  _protvista: RefObject<HTMLDivElement>;\n  _structureView: RefObject<HTMLDivElement>;\n  _splitView: RefObject<HTMLDivElement>;\n  splitViewStyle: Object;\n  handlingSequenceHighlight?: boolean;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      entryMap: {},\n      selectedEntry: '',\n      selectedEntryToKeep: null,\n      isSplitScreen: false,\n      isSpinning: false,\n      shouldResetViewer: false,\n      selectionsInStructure: null,\n      isReady: false,\n    };\n\n    this.name = `${this.props.id}`;\n\n    this._protvista = React.createRef();\n    this._splitView = React.createRef();\n    this._structureView = React.createRef();\n    this.splitViewStyle = {};\n  }\n\n  async componentDidMount() {\n    const pdbid = this.props.id;\n\n    this._protvista.current?.addEventListener('change', (event: Event) => {\n      const {\n        detail: { eventType, highlight, feature, chain },\n      } = event as CustomEvent;\n      const {\n        accession,\n        source_database: sourceDB,\n        type,\n        chain: chainF,\n        protein: proteinF,\n        parent,\n      }: {\n        accession: string;\n        source_database: string;\n        type: string;\n        chain: string;\n        protein: string;\n        parent: Record<string, unknown> & { protein: string };\n      } = feature || {};\n      let proteinD = proteinF;\n\n      switch (eventType) {\n        case 'sequence-chain':\n          if (highlight) {\n            const [start, stop] = highlight.split(':');\n            this.setState({\n              selectionsInStructure: [\n                {\n                  color: RED,\n                  start: Math.round(start),\n                  end: Math.round(stop),\n                  chain: chain,\n                },\n              ],\n            });\n            this.handlingSequenceHighlight = true;\n          } else {\n            this.setState({ selectionsInStructure: null });\n          }\n          break;\n        case 'click':\n          // bit of a hack to handle missing data in some entries\n          if (!proteinD && parent) {\n            proteinD = parent.protein;\n          }\n          this.setState({\n            selectedEntryToKeep:\n              type === 'chain'\n                ? {\n                    accession: pdbid,\n                    db: 'pdb',\n                    chain: accession,\n                    protein: proteinD,\n                  }\n                : {\n                    accession: accession,\n                    db: sourceDB,\n                    chain: chainF,\n                    protein: proteinD,\n                  },\n          });\n          break;\n        case 'mouseover':\n          if (this.handlingSequenceHighlight) {\n            this.handlingSequenceHighlight = false;\n            return;\n          }\n          if (type === 'chain')\n            this.showEntryInStructure('pdb', pdbid, accession);\n          else if (type === 'secondary_structure')\n            this.setSelectionsForSecondaryStructure(feature);\n          else if (accession && !accession.startsWith('G3D:'))\n            this.showEntryInStructure(sourceDB, accession, chainF);\n          break;\n        case 'mouseout':\n          if (type !== 'secondary_structure') this.showEntryInStructure();\n          break;\n        default:\n          break;\n      }\n    });\n  }\n  componentDidUpdate() {\n    if (this.state.shouldResetViewer) {\n      requestAnimationFrame(() => this.setState({ shouldResetViewer: false }));\n    }\n  }\n\n  setSelectionsForSecondaryStructure(feature: MinimalStructureFeature) {\n    const hits: Array<{ color: string; start: number; end: number }> = [];\n    if (feature.locations) {\n      for (const loc of feature.locations) {\n        for (const frag of loc.fragments) {\n          hits.push({\n            color: feature.color,\n            start: frag.start,\n            end: frag.end,\n          });\n        }\n      }\n    }\n\n    if (hits.length > 0) {\n      const selections: Array<Selection> = [];\n      hits.forEach((hit) => {\n        const hexColour = parseInt(hit.color.substring(1), 16);\n        selections.push({\n          color: hexColour,\n          start: hit.start,\n          end: hit.end,\n          chain: feature.chain || '',\n        });\n      });\n      this.setState({ selectionsInStructure: selections });\n    } else {\n      this.setState({ selectionsInStructure: null });\n    }\n  }\n\n  _getChainMap(chain: string, locations: ProtVistaLocation[]) {\n    const chainMap = [];\n    for (const location of locations) {\n      for (const { start, end } of location.fragments) {\n        chainMap.push({\n          struct_asym_id: chain,\n          start_residue_number: start,\n          end_residue_number: end,\n          accession: chain,\n          source_database: 'pdb',\n        });\n      }\n    }\n    return chainMap;\n  }\n\n  _mapLocations(\n    map: Record<string, Array<unknown>>,\n    {\n      chain,\n      locations,\n      entry,\n      db,\n      match,\n    }: {\n      chain: string;\n      locations: ProtVistaLocation[];\n      entry: string;\n      db: string;\n      match: { metadata: { integrated: string | null } };\n    },\n  ) {\n    for (const location of locations) {\n      for (const fragment of location.fragments) {\n        map[chain].push({\n          struct_asym_id: chain,\n          start_residue_number: Math.round(fragment.start),\n          end_residue_number: Math.round(fragment.end),\n          accession: entry,\n          source_database: db,\n          parent: match.metadata.integrated\n            ? { accession: match.metadata.integrated }\n            : null,\n        });\n      }\n    }\n  }\n\n  _collateHits(database: string, accession: string, chain?: string | null) {\n    let hits: Array<EntryHit> = [];\n    if (database && accession) {\n      if (chain) {\n        hits = hits.concat(...this.state.entryMap[database][accession][chain]);\n      } else {\n        Object.keys(this.state.entryMap[database][accession]).forEach((c) => {\n          hits = hits.concat(this.state.entryMap[database][accession][c]);\n        });\n      }\n    }\n\n    hits.forEach(\n      (hit) => (hit.color = getTrackColor(hit, this.props.colorDomainsBy)),\n    );\n    return hits;\n  }\n\n  createEntryMap() {\n    const memberDBMap: Record<\n      string,\n      Record<string, Record<string, Array<EntryHit>>>\n    > = { pdb: {} };\n\n    if (this.props.matches) {\n      // create matches in structure hierarchy\n      for (const match of this.props.matches) {\n        const entry = match.metadata.accession;\n        const db = match.metadata.source_database;\n        if (!memberDBMap[db]) memberDBMap[db] = {};\n        if (!memberDBMap[db][entry]) memberDBMap[db][entry] = {};\n\n        for (const structure of match.structures) {\n          const chain = structure.chain;\n\n          if (!memberDBMap[db][entry][chain])\n            memberDBMap[db][entry][chain] = [];\n          this._mapLocations(memberDBMap[db][entry], {\n            chain,\n            locations: structure.entry_structure_locations,\n            entry,\n            db,\n            match,\n          });\n          // create PDB chain mapping\n          if (!memberDBMap.pdb[structure.accession])\n            memberDBMap.pdb[structure.accession] = {};\n          if (!memberDBMap.pdb[structure.accession][chain]) {\n            memberDBMap.pdb[structure.accession][chain] = this._getChainMap(\n              chain,\n              structure.entry_structure_locations,\n            );\n          }\n        }\n      }\n    }\n    return memberDBMap;\n  }\n\n  showEntryInStructure = (\n    memberDB?: string | null,\n    entry?: string,\n    chain?: string,\n  ) => {\n    const keep = this.state.selectedEntryToKeep;\n    let db: null | string | undefined;\n    let acc: null | string | undefined;\n    let ch: null | string | undefined;\n\n    // reset keep when 'no entry' is selected via selection input\n    if (entry === NO_SELECTION && keep) {\n      keep.db = null;\n      keep.accession = null;\n      keep.chain = null;\n    } else if (memberDB !== undefined && entry !== undefined) {\n      db = memberDB;\n      acc = entry;\n      ch = chain;\n    } else if (\n      keep &&\n      keep.db !== null &&\n      keep.accession !== null &&\n      keep.chain !== null &&\n      keep.protein !== null\n    ) {\n      db = keep.db;\n      acc = keep.accession;\n      ch = keep.chain;\n    }\n\n    if (acc && acc.startsWith('Chain')) return; // Skip the keep procedure for secondary structure\n    const hits = this._collateHits(db || '', acc || '', ch);\n    if (hits.length > 0) {\n      const selections: Array<Selection> = [];\n      hits.forEach((hit) => {\n        const hexColour = parseInt(hit.color?.substring(1) || '', 16);\n        selections.push({\n          color: hexColour,\n          start: hit.start_residue_number,\n          end: hit.end_residue_number,\n          chain: hit.struct_asym_id,\n        });\n      });\n\n      this.setState({ selectionsInStructure: selections });\n    } else {\n      this.setState({ selectionsInStructure: null });\n    }\n\n    this.setState({ selectedEntry: acc || '' });\n  };\n\n  render() {\n    const {\n      entryMap,\n      selectedEntry,\n      isSpinning,\n      isSplitScreen,\n      shouldResetViewer,\n    } = this.state;\n    const pdbId = this.props.id;\n    const elementId = `structure-${pdbId}`;\n\n    return (\n      <div\n        ref={this._splitView}\n        className={css({ 'split-view': isSplitScreen })}\n      >\n        <PictureInPicturePanel\n          className={css('structure-viewer')}\n          OtherControls={{\n            top: this.props.matches ? (\n              <EntrySelection\n                entryMap={entryMap}\n                updateStructure={this.showEntryInStructure}\n                selectedEntry={selectedEntry}\n              />\n            ) : null,\n          }}\n          OtherButtons={\n            <div\n              style={{\n                display: isSplitScreen ? 'none' : 'block',\n              }}\n              className={css('button-bar')}\n            >\n              <Link\n                className={css('control')}\n                href={`https://www.ebi.ac.uk/pdbe/entry-files/download/pdb${pdbId}.ent`}\n                download={`${pdbId || 'download'}.model.pdb.ent`}\n              >\n                <span\n                  className={css('icon', 'icon-common', 'icon-download')}\n                  data-icon=\"&#xf019;\"\n                />\n                &nbsp;PDB file\n              </Link>\n              <Link\n                className={css('control')}\n                href={`https://www.ebi.ac.uk/pdbe/entry-files/download/${pdbId}.cif`}\n                download={`${pdbId || 'download'}.model.cif`}\n              >\n                <span\n                  className={css('icon', 'icon-common', 'icon-download')}\n                  data-icon=\"&#xf019;\"\n                />\n                &nbsp;mmCIF file\n              </Link>\n\n              <button\n                className={css('icon', 'icon-common', 'as-link')}\n                onClick={() => {\n                  this.setState({ isSpinning: !isSpinning });\n                }}\n                data-icon={isSpinning ? '' : 'v'}\n                title={isSpinning ? 'Stop spinning' : 'Spin structure'}\n              />\n              <button\n                className={css('icon', 'icon-common', 'as-link')}\n                onClick={() => this.setState({ shouldResetViewer: true })}\n                data-icon=\"}\"\n                title=\"Reset image\"\n              />\n              <FullScreenButton\n                element={this._splitView.current}\n                className={css('icon', 'icon-common', 'as-link')}\n                tooltip=\"Split full screen\"\n                dataIcon=\"icon-columns\"\n                onFullScreenHook={() => this.setState({ isSplitScreen: true })}\n                onExitFullScreenHook={() =>\n                  this.setState({ isSplitScreen: false })\n                }\n              />\n              <FullScreenButton\n                className={css('icon', 'icon-common', 'as-link')}\n                tooltip=\"View the structure in full screen mode\"\n                element={this.state.isReady ? elementId : null}\n              />\n              <PIPToggleButton\n                className={css('icon', 'icon-common', 'as-link')}\n              />\n            </div>\n          }\n        >\n          <StructureViewer\n            id={pdbId}\n            elementId={elementId}\n            onStructureLoaded={() => {\n              if (this.props.matches) {\n                const entryMap = this.createEntryMap();\n                this.setState({ entryMap, isReady: true });\n              }\n            }}\n            isSpinning={isSpinning}\n            shouldResetViewer={shouldResetViewer}\n            selections={this.state.selectionsInStructure}\n            onReset={() => {\n              this.setState({ selectionsInStructure: null });\n            }}\n          />\n        </PictureInPicturePanel>\n        <div\n          ref={this._protvista}\n          data-testid=\"structure-protvista\"\n          className={css('protvista-container')}\n        >\n          <ProteinViewerForStructures structure={pdbId} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  (ui) => ({\n    colorDomainsBy: ui.colorDomainsBy || EntryColorMode.DOMAIN_RELATIONSHIP,\n  }),\n);\n\nexport default connect(mapStateToProps)(StructureView);\n","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\n\nimport Accession from 'components/Accession';\nimport Link from 'components/generic/Link';\nimport BaseLink from 'components/ExtLink/BaseLink';\nimport ErrorBoundary from 'wrappers/ErrorBoundary';\nimport Literature from 'components/Entry/Literature';\nimport ViewerOnDemand from 'components/Structure/ViewerAndEntries';\nimport { formatExperimentType } from 'components/Structure/utils';\nimport { formatLongDate } from 'utils/date';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport summary from 'styles/summary.css';\nimport ipro from 'styles/interpro-vf.css';\n\nconst css = cssBinder(summary, ipro);\n\nconst EXTERNAL_LINKS = [\n  { pattern: 'https://www.ebi.ac.uk/pdbe/entry/pdb/{id}', label: 'PDBe' },\n  { pattern: 'https://www.rcsb.org/structure/{id}', label: 'RCSB PDB' },\n  {\n    pattern:\n      'http://www.ebi.ac.uk/thornton-srv/databases/cgi-bin/pdbsum/GetPage.pl?pdbcode={id}',\n    label: 'PDBsum',\n  },\n  { pattern: 'https://www.cathdb.info/pdb/{id}', label: 'CATH' },\n  {\n    pattern: 'http://scop.mrc-lmb.cam.ac.uk/search?t=txt;q={id}',\n    label: 'SCOP',\n  },\n  {\n    pattern: 'http://prodata.swmed.edu/ecod/complete/search?kw={id}',\n    label: 'ECOD',\n  },\n  {\n    pattern: 'https://proteopedia.org/wiki/index.php/{id}',\n    label: 'Proteopedia',\n  },\n  {\n    pattern: 'https://search.foldseek.com/search?accession={id}&source=PDB',\n    label: 'Foldseek',\n  },\n];\n\ninterface LoadedProps\n  extends LoadDataProps<{ metadata: StructureMetadata }>,\n    LoadDataProps<\n      PayloadList<\n        EndpointWithMatchesPayload<EntryMetadata, StructureLinkedObject>\n      >,\n      'Matches'\n    > {}\n\nexport const SummaryStructure = ({ data, dataMatches }: LoadedProps) => {\n  const { loading, payload } = data || {};\n  const { loading: loadingM, payload: payloadM } = dataMatches || {};\n  if (loading || loadingM || !payload) return null;\n  const metadata = payload.metadata;\n  const matches = payloadM?.results || [];\n  const chains = Array.from(new Set(metadata.chains || []));\n  const date = new Date(metadata.release_date);\n  const literature = Object.entries(metadata.literature || {}).map((item) => {\n    // DOI_URL for structure URL is not complete. It contains only the ID\n    if (\n      item.length === 2 &&\n      item[1]?.DOI_URL !== null &&\n      !item[1]?.DOI_URL?.startsWith('http')\n    ) {\n      const id = item[1].DOI_URL;\n      item[1].DOI_URL = `https://www.doi.org/${id}`;\n    }\n    return item;\n  });\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      <section className={css('vf-grid', 'summary-grid')}>\n        <div className={css('vf-stack')}>\n          {chains.length && (\n            <table className={css('vf-table', 'left-headers')}>\n              <tbody>\n                <tr>\n                  <td style={{ maxWidth: '50%' }}>Accession</td>\n                  <td>\n                    <Accession accession={metadata.accession} />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Experiment type</td>\n                  <td className={css('text-cap')}>\n                    <Link\n                      to={{\n                        description: {\n                          main: { key: 'structure' },\n                          structure: { db: 'PDB' },\n                          entry: { isFilter: true, db: 'InterPro' },\n                        },\n                        search: {\n                          experiment_type: metadata.experiment_type,\n                        },\n                      }}\n                    >\n                      {formatExperimentType(metadata.experiment_type)}\n                    </Link>\n                  </td>\n                </tr>\n                {metadata.resolution && (\n                  <tr>\n                    <td>Resolution</td>\n                    <td>{metadata.resolution} Å</td>\n                  </tr>\n                )}\n                <tr>\n                  <td>Chains</td>\n                  <td>{chains.join(', ')}</td>\n                </tr>\n                <tr>\n                  <td>Released</td>\n                  <td>{formatLongDate(date)}</td>\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </div>\n        <div className={css('vf-stack')}>\n          <section>\n            <h5>External Links</h5>\n            <ul className={css('no-bullet')}>\n              {EXTERNAL_LINKS.map(({ label, pattern }) => (\n                <li key={label}>\n                  <BaseLink\n                    id={metadata.accession}\n                    target=\"_blank\"\n                    pattern={pattern}\n                    className={css('ext')}\n                  >\n                    {label}\n                  </BaseLink>\n                </li>\n              ))}\n            </ul>\n          </section>\n        </div>\n      </section>\n      <ErrorBoundary>\n        <div>\n          <ViewerOnDemand id={metadata.accession} matches={matches} />\n        </div>\n      </ErrorBoundary>\n      <div>\n        {literature.length ? (\n          <section id=\"references\">\n            <div className={css('vf-grid')}>\n              <h4>References</h4>\n            </div>\n            <Literature extra={literature} />\n          </section>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport const getURLForMatches = createSelector(\n  (state) => state.settings.api,\n  (state) => state.customLocation.description.structure,\n  ({ protocol, hostname, port, root }, { accession }) =>\n    format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}${descriptionToPath({\n        main: { key: 'entry' },\n        structure: { isFilter: true, db: 'pdb', accession },\n        entry: { db: 'all' },\n      })}`,\n      query: {\n        page_size: 200,\n        extra_fields: 'short_name',\n      },\n    }),\n);\n\nexport default loadData({\n  getUrl: getURLForMatches,\n  propNamespace: 'Matches',\n})(loadData()(SummaryStructure));\n","import React, { FormEvent, useRef, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Link from 'components/generic/Link';\nimport LazyImage from 'components/LazyImage';\n\nimport loadable from 'higherOrder/loadable';\n\nimport isResourceRestricted from './utils/resource-restriction';\nimport { Props as ViewerProps } from '../Viewer';\nimport { changeSettingsRaw } from 'actions/creators';\n\nimport styles from './style.css';\n\nconst StructureViewAsync = loadable({\n  loader: () =>\n    import(\n      /* webpackChunkName: \"structure-viewer\" */ 'components/Structure/Viewer'\n    ),\n  loading: null,\n});\n\ntype Props = {\n  id: string;\n  userActivatedVisible: boolean;\n  changeSettingsRaw: typeof changeSettingsRaw;\n} & ViewerProps;\n\nexport const ViewerOnDemand = (props: Props) => {\n  const { id, userActivatedVisible, changeSettingsRaw } = props;\n  const [visible, setVisible] = useState(userActivatedVisible);\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    const initializeVisible = async () => {\n      setVisible(!(await isResourceRestricted()));\n    };\n    initializeVisible().catch(console.error);\n  }, []);\n\n  if (visible) {\n    return <StructureViewAsync {...props} />;\n  }\n\n  const handleCheckboxClick = (e: FormEvent) => e.stopPropagation();\n\n  const handleClick = () => {\n    if (inputRef.current?.checked) {\n      changeSettingsRaw('ui', 'structureViewer', true);\n    }\n    setVisible(true);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles['inner-wrapper']} onClick={handleClick}>\n        <div className={styles.background}>\n          <LazyImage\n            src={`//www.ebi.ac.uk/thornton-srv/databases/cgi-bin/pdbsum/getimg.pl?source=pdbsum&pdb_code=${id}&file=traces.jpg`}\n            alt={`structure with accession ${id}`}\n          />\n        </div>\n        <div className={styles.text}>\n          <p>\n            click or tap this area to display the interactive structure viewer\n          </p>\n          <p>\n            <label htmlFor=\"cb_reminder\">\n              Remember this next time?{' '}\n              <input\n                type=\"checkbox\"\n                ref={inputRef}\n                id=\"cb_reminder\"\n                onClick={handleCheckboxClick}\n              />\n            </label>\n            <small>\n              This can be reversed in the{' '}\n              <Link to={{ description: { other: ['settings'] } }}>\n                Settings\n              </Link>{' '}\n              page\n            </small>\n          </p>\n        </div>\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui.structureViewer,\n  (userActivatedVisible) => ({\n    userActivatedVisible: userActivatedVisible || false,\n  })\n);\n\nexport default connect(mapStateToProps, { changeSettingsRaw }, null, {\n  forwardRef: true,\n})(ViewerOnDemand);\n","const LOW_BATTERY_LEVEL = 0.15;\nconst SMALL_SCREEN = 650;\n\n// http://wicg.github.io/netinfo/#connection-types\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// http://wicg.github.io/netinfo/#effectiveconnectiontype-enum\ntype EffectiveConnectionType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// http://wicg.github.io/netinfo/#dom-megabit\ntype Megabit = number;\n// http://wicg.github.io/netinfo/#dom-millisecond\ntype Millisecond = number;\n\n// http://wicg.github.io/netinfo/#networkinformation-interface\ninterface NetworkInformation extends EventTarget {\n  // http://wicg.github.io/netinfo/#type-attribute\n  readonly type?: ConnectionType;\n  // http://wicg.github.io/netinfo/#effectivetype-attribute\n  readonly effectiveType?: EffectiveConnectionType;\n  // http://wicg.github.io/netinfo/#downlinkmax-attribute\n  readonly downlinkMax?: Megabit;\n  // http://wicg.github.io/netinfo/#downlink-attribute\n  readonly downlink?: Megabit;\n  // http://wicg.github.io/netinfo/#rtt-attribute\n  readonly rtt?: Millisecond;\n  // http://wicg.github.io/netinfo/#savedata-attribute\n  readonly saveData?: boolean;\n  // http://wicg.github.io/netinfo/#handling-changes-to-the-underlying-connection\n  onchange?: EventListener;\n}\n\nexport default async () => {\n  // If not in a browser, no restriction\n  if (!window.navigator) return false;\n  // If slow connection, restriction!\n  if (\n    'connection' in navigator &&\n    (navigator.connection as NetworkInformation)?.effectiveType !== '4g'\n  ) {\n    return true;\n  }\n  // If small screen, restriction!\n  if (window.innerWidth < SMALL_SCREEN) return true;\n  try {\n    if (\n      'getBattery' in navigator &&\n      typeof navigator.getBattery === 'function'\n    ) {\n      const battery = await navigator.getBattery();\n      // If low battery and discharging, restriction!\n      return !battery.isCharging && battery.level < LOW_BATTERY_LEVEL;\n    }\n  } catch {\n    /**/\n  }\n  return false;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ViewerOnDemand_style__wrapper___ae\",\"inner-wrapper\":\"ViewerOnDemand_style__inner-wrapper___c3\",\"background\":\"ViewerOnDemand_style__background___e3\",\"text\":\"ViewerOnDemand_style__text___af\"};","/* eslint-disable no-magic-numbers */\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst _getOrdinal = (d: number) => {\n  if (d > 3 && d < 21) return `${d}th`;\n  switch (d % 10) {\n    case 1:\n      return `${d}st`;\n    case 2:\n      return `${d}nd`;\n    case 3:\n      return `${d}rd`;\n    default:\n      return `${d}th`;\n  }\n};\n\nexport const formatISODate = (date: string) => {\n  const d = new Date(date);\n  return `${_getOrdinal(d.getDate())} ${\n    monthNames[d.getMonth()]\n  } ${d.getFullYear()}`;\n};\n\nexport const formatLongDate = (d: Date) =>\n  `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`;\n\nexport const formatShortDate = (d: Date) =>\n  `${(d.getDate() < 10 ? '0' : '') + d.getDate()}/${\n    (d.getMonth() + 1 < 10 ? '0' : '') + (d.getMonth() + 1)\n  }/${d.getFullYear()}`;\n\nexport const formatLongDateTime = (d: Date) =>\n  `${(d.getDate() < 10 ? '0' : '') + d.getDate()}-${\n    (d.getMonth() + 1 < 10 ? '0' : '') + (d.getMonth() + 1)\n  }-${d.getFullYear()} ${(d.getHours() < 10 ? '0' : '') + d.getHours()}:${\n    (d.getMinutes() < 10 ? '0' : '') + d.getMinutes()\n  }:${(d.getSeconds() < 10 ? '0' : '') + d.getSeconds()}`;\n","// extracted by mini-css-extract-plugin\nexport default {\"button-bar\":\"ViewerAndEntries_button-bar__button-bar___bb\",\"control\":\"ViewerAndEntries_button-bar__control___e3\"};","// extracted by mini-css-extract-plugin\nexport default {\"structure-viewer\":\"ViewerAndEntries_style__structure-viewer___f0\",\"structure-viewer-select\":\"ViewerAndEntries_style__structure-viewer-select___ca\",\"as-link\":\"ViewerAndEntries_style__as-link___ff\",\"split-view\":\"ViewerAndEntries_style__split-view___c0\",\"protvista-container\":\"ViewerAndEntries_style__protvista-container___c4\",\"wrapper\":\"ViewerAndEntries_style__wrapper___e8\"};"],"names":["f","cssBinder","_ref","withTitle","accession","title","React","className","css","fonts","element","tooltip","dataIcon","disabled","onFullScreenHook","noop","onExitFullScreenHook","elementInDOM","setElementInDom","useState","isFull","setFull","onFullscreen","document","fullscreenElement","useEffect","addEventListener","removeEventListener","getElementById","_className","icon","Tooltip","Button","type","onClick","_handleFullScreen","exitFullscreen","webkitExitFullscreen","mozExitFullScreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","requestFullScreen","then","mapStateToProps","createSelector","state","settings","ui","isPIPEnabled","connect","changeSettingsRaw","text","togglePIP","style","color","undefined","optionsForObserver","root","rootMargin","threshold","Array","from","map","_","n","hideBar","OtherControls","bottom","top","OtherButtons","onChangingMode","children","isStuck","setStuck","isMinimized","setMinimized","wrapperRef","useRef","observer","intersectionObserverPolyfill","current","IntersectionObserver","entries","_a","getBoundingClientRect","y","intersectionRatio","observe","disconnect","ref","hide","NO_SELECTION","entryMap","selectedEntry","updateStructure","selectionGroups","memberDB","push","key","value","Object","entryList","entry","keys","label","onSelectionChange","e","select","target","optGroup","options","selectedIndex","parentNode","onChange","onBlur","ProteinViewer","loadable","loader","loading","protein","tracks","chain","id","protvistaEl","handleMouseover","event","detail","eventType","highlight","feature","aa","dispatchEvent","CustomEvent","bubbles","cancelable","enrichedTracks","data","unintegrated","secondaryStructures","structure","representativeDomains","merged","useMemo","mergeData","secondaryData","locations","out","secondaryStructArray","_loop","allFragments","forEach","loc","fragments","shape","fill","assign","newLocations","source_database","length","protein_length","sequence","sequence_length","secondary_structure","dataType","toLowerCase","name","short_name","coordinates","entry_structure_locations","fr","start","end","link","entry_protein_locations","child","__rest","entry_type","chains","sort","a","b","localeCompare","proteins","values","g","orderByAccession","concat","proteinsPerChain","isChimeric","tagChimericStructures","representativesPerChain","domain","getRepresentativesPerChain","i","sequenceData","flattenTracksObject","splice","Link","to","description","main","db","toUpperCase","ProteinViewerForStructure","getURLForMatches","api","customLocation","_ref2","_ref3","protocol","hostname","port","format","pathname","descriptionToPath","isFilter","query","page_size","extra_fields","getSecondaryStructureURL","_ref4","_ref5","newDesc","loadData","propNamespace","getUrl","dataSecondary","processedData","useProcessData","payload","results","Loading","secondary_structures","interpro","EntriesOnStructure","buttonBar","StructureView","PureComponent","constructor","props","super","showEntryInStructure","acc","ch","keep","this","selectedEntryToKeep","startsWith","hits","_collateHits","selections","hit","hexColour","parseInt","substring","start_residue_number","end_residue_number","struct_asym_id","setState","selectionsInStructure","isSplitScreen","isSpinning","shouldResetViewer","isReady","_protvista","_splitView","_structureView","splitViewStyle","componentDidMount","pdbid","sourceDB","chainF","proteinF","parent","proteinD","stop","split","Math","round","handlingSequenceHighlight","setSelectionsForSecondaryStructure","componentDidUpdate","requestAnimationFrame","frag","_getChainMap","chainMap","location","_mapLocations","match","fragment","metadata","integrated","database","c","getTrackColor","colorDomainsBy","createEntryMap","memberDBMap","pdb","matches","structures","render","pdbId","elementId","PictureInPicturePanel","EntrySelection","display","href","download","FullScreenButton","PIPToggleButton","StructureViewer","onStructureLoaded","onReset","ProteinViewerForStructures","EntryColorMode","DOMAIN_RELATIONSHIP","summary","ipro","EXTERNAL_LINKS","pattern","SummaryStructure","dataMatches","loadingM","payloadM","Set","date","Date","release_date","literature","item","DOI_URL","_c","_b","maxWidth","Accession","search","experiment_type","formatExperimentType","resolution","join","formatLongDate","BaseLink","ErrorBoundary","ViewerOnDemand","Literature","extra","StructureViewAsync","structureViewer","userActivatedVisible","forwardRef","visible","setVisible","inputRef","window","navigator","connection","effectiveType","innerWidth","getBattery","battery","isCharging","level","catch","console","error","handleClick","checked","LazyImage","src","alt","htmlFor","stopPropagation","other","monthNames","formatISODate","d","_getOrdinal","getDate","getMonth","getFullYear","formatShortDate","formatLongDateTime","getHours","getMinutes","getSeconds"],"sourceRoot":""}