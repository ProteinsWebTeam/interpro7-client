{"version":3,"file":"js/6460.module.interactions-subpage.db3.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/Table/FullyLoadedTable/index.tsx","webpack://interpro7-client/./src/subPages/Interactions/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { connect, ConnectedProps } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Table, { Column, PageSizeSelector } from 'components/Table';\nimport { Renderer } from '../Column';\n\nexport const sortSubsetBy = <RowData extends Record<string, unknown>>(\n  subset: Array<RowData>,\n  search: InterProLocationSearch | undefined,\n  keys: Array<string>,\n  columnToString: Record<string, Column2StringOrNumberFn<RowData>> = {},\n) => {\n  for (const key of keys) {\n    const str = columnToString[key] || ((x) => `${x}`);\n    if (search?.sort_by === key) {\n      subset.sort((a, b) => (str(a[key]) > str(b[key]) ? 1 : -1));\n    }\n    if (search?.sort_by === `-${key}`) {\n      subset.sort((a, b) => (str(a[key]) > str(b[key]) ? -1 : 1));\n    }\n  }\n};\n\nexport const filterSubset = <RowData extends Record<string, unknown>>(\n  subset: Array<RowData>,\n  search: InterProLocationSearch | undefined,\n  keys: Array<string>,\n  columnToString: Record<string, Column2StringOrNumberFn<RowData>> = {},\n) => {\n  let filteredSubset = [...subset];\n  for (const key of keys) {\n    if (search?.[key]) {\n      const str =\n        columnToString[key] || ((x) => JSON.stringify(x).toLowerCase());\n      filteredSubset = filteredSubset.filter(\n        (row) =>\n          String(str(row[key], row))\n            .toLowerCase()\n            .indexOf((search[key] as string).toLowerCase()) !== -1,\n      );\n    }\n  }\n  return filteredSubset;\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.search,\n  (state: GlobalState) => state.settings.navigation.pageSize,\n  (search, pageSize) => ({ search, pageSize }),\n);\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport type Column2StringOrNumberFn<RowData = unknown> = (\n  cellValue: unknown,\n  row?: RowData,\n) => string | number;\n\ntype Props<RowData extends Record<string, unknown>> = {\n  data: Array<RowData>;\n  renderers?: Record<string, Renderer<unknown, RowData>>;\n  columnToString?: Record<string, Column2StringOrNumberFn<RowData>>;\n  headerStyle?: Record<string, React.CSSProperties>;\n  cellStyle?: Record<string, React.CSSProperties>;\n  headerColumns?: Record<string, string>;\n  headerClassName?: Record<string, string>;\n  cellClassName?: Record<string, string>;\n};\ntype AllProps<RowData extends Record<string, unknown>> = Props<RowData> &\n  PropsFromRedux;\n\nexport const FullyLoadedTable = <RowData extends Record<string, unknown>>({\n  data,\n  renderers = {},\n  columnToString = {},\n  headerStyle = {},\n  cellStyle = {},\n  headerColumns = {},\n  headerClassName = {},\n  cellClassName = {},\n  search,\n  pageSize,\n}: AllProps<RowData>) => {\n  const keys = Object.keys(data?.[0] || {});\n  let subset = data;\n  subset = filterSubset(subset, search, keys);\n  sortSubsetBy(subset, search, keys, columnToString);\n  const size = Number(search?.page_size) || pageSize || 20;\n  const page = Number(search?.page) || 1;\n  subset = subset.slice((page - 1) * size, page * size);\n  return (\n    <Table actualSize={data.length} dataTable={subset} query={search}>\n      <PageSizeSelector />\n      {keys.map((key) => (\n        <Column\n          key={key}\n          dataKey={key}\n          renderer={renderers[key] || ((d) => d)}\n          isSearchable={true}\n          isSortable={true}\n          headerStyle={{\n            ...(headerStyle['*'] || {}),\n            ...(headerStyle[key] || {}),\n          }}\n          cellStyle={{\n            ...(cellStyle['*'] || {}),\n            ...(cellStyle[key] || {}),\n          }}\n          headerClassName={`${headerClassName['*'] || ''} ${\n            headerClassName[key] || ''\n          }`}\n          cellClassName={`${cellClassName['*'] || ''} ${\n            cellClassName[key] || ''\n          }`}\n        >\n          {headerColumns[key] || key}\n        </Column>\n      ))}\n    </Table>\n  );\n};\n\n// Define a generic connected component\nconst ConnectedFullyLoadedTable = <RowData extends Record<string, unknown>>(\n  props: Props<RowData>,\n) => {\n  const ConnectedTable = connector(\n    FullyLoadedTable as React.ComponentType<AllProps<RowData>>,\n  );\n  return <ConnectedTable {...props} />;\n};\n\nexport default ConnectedFullyLoadedTable;\n","import React from 'react';\n\nimport FullyLoadedTable, {\n  Column2StringOrNumberFn,\n} from 'components/Table/FullyLoadedTable';\nimport loadable from 'higherOrder/loadable';\nimport Link from 'components/generic/Link';\nimport Loading from 'components/SimpleCommonComponents/Loading';\n\nimport cssBinder from 'styles/cssBinder';\nimport { Renderer } from 'src/components/Table/Column';\nimport PMCLink from 'components/ExtLink/PMCLink';\n\nconst css = cssBinder();\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\nconst schemaProcessData = (data: Interaction[]) => {\n  return {\n    '@id': '@additionalProperty',\n    '@type': 'PropertyValue',\n    name: 'Interactions',\n    value: data.map(({ molecule_1: m1, molecule_2: m2 }) => ({\n      '@type': 'CreativeWork',\n      additionalType: 'Interaction',\n      additionalProperty: {\n        '@type': 'PropertyValue',\n        additionalType: 'bio:Protein',\n        name: 'Interactors',\n        value: [\n          `https://www.ebi.ac.uk/interpro/protein/uniprot/${m1?.accession}`,\n          `https://www.ebi.ac.uk/interpro/protein/uniprot/${m2?.accession}`,\n        ],\n      },\n    })),\n  };\n};\n\nconst IntactLink: Renderer<unknown, Interaction> = (accession: unknown) => {\n  const url = `//www.ebi.ac.uk/intact/details/interaction/${\n    accession as string\n  }`;\n  return (\n    <Link className={css('ext')} href={url} target=\"_blank\">\n      {accession}\n    </Link>\n  );\n};\n\nconst EPMCLink: Renderer<unknown, Interaction> = (pubmedID: unknown) => {\n  return (\n    <PMCLink id={pubmedID as number} className={css('ext')}>\n      {pubmedID as number}\n    </PMCLink>\n  );\n};\n\nconst Molecule: Renderer<unknown, Interaction> = (molecule: unknown) => {\n  const { accession, identifier, type } = molecule as InteractionMolecule;\n  return type === 'protein' ? (\n    <Link\n      to={{\n        description: {\n          main: { key: 'protein' },\n          // The split below is in cases the accession points to an isoform e.g. O00305-2\n          // TODO: Update link to directly point to isoforms\n          protein: { db: 'uniprot', accession: accession.split('-')[0] },\n        },\n      }}\n    >\n      {identifier} ({accession})\n    </Link>\n  ) : (\n    <span>\n      {identifier} ({accession})\n    </span>\n  );\n};\nconst moleculeToString: Column2StringOrNumberFn<Interaction> = (\n  molecule: unknown,\n) => {\n  const { accession, identifier } = molecule as InteractionMolecule;\n  return `${identifier}${accession}`;\n};\n\ntype Props = {\n  data: RequestedData<InteractionsPayload>;\n};\n\nconst InteractionsSubPage = ({ data }: Props) => {\n  if (data.loading) return <Loading />;\n  const _data = data?.payload?.interactions;\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      {_data ? (\n        <>\n          <p>\n            Proteins matching this entry have been experimentally proven to be\n            involved in Protein:Protein interactions.\n          </p>\n          <SchemaOrgData data={_data} processData={schemaProcessData} />\n\n          <FullyLoadedTable\n            data={_data}\n            renderers={{\n              intact_id: IntactLink,\n              pubmed_id: EPMCLink,\n              molecule_1: Molecule,\n              molecule_2: Molecule,\n            }}\n            columnToString={{\n              molecule_1: moleculeToString,\n              molecule_2: moleculeToString,\n            }}\n            headerColumns={{\n              intact_id: 'Accession',\n              pubmed_id: 'PubMed ID',\n              molecule_1: 'Molecule A',\n              molecule_2: 'Molecule B',\n            }}\n          />\n        </>\n      ) : (\n        <p>This entry has no interactions.</p>\n      )}\n    </div>\n  );\n};\n\nexport default InteractionsSubPage;\n"],"names":["sortSubsetBy","subset","search","keys","columnToString","_loop","key","str","x","sort_by","sort","a","b","filterSubset","filteredSubset","_loop2","JSON","stringify","toLowerCase","filter","row","String","indexOf","mapStateToProps","createSelector","state","customLocation","settings","navigation","pageSize","connector","connect","FullyLoadedTable","_ref","data","renderers","headerStyle","cellStyle","headerColumns","headerClassName","cellClassName","Object","size","Number","page_size","page","slice","React","Table","actualSize","length","dataTable","query","PageSizeSelector","map","Column","dataKey","renderer","d","isSearchable","isSortable","assign","props","ConnectedTable","css","cssBinder","SchemaOrgData","loadable","loader","loading","schemaProcessData","name","value","molecule_1","m1","molecule_2","m2","additionalType","additionalProperty","accession","IntactLink","url","Link","className","href","target","EPMCLink","pubmedID","PMCLink","id","Molecule","molecule","identifier","type","to","description","main","protein","db","split","moleculeToString","_ref2","Loading","_data","_a","payload","interactions","processData","intact_id","pubmed_id"],"sourceRoot":""}