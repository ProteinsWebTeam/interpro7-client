{"version":3,"file":"js/7591.module.7591.b4a.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/AlphaFold/selectors.ts","webpack://interpro7-client/./src/components/ProteinViewer/utils.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/DomainsOnProteinLoaded/index.tsx","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/mergeExtraFeatures.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/mergeResidues.ts","webpack://interpro7-client/./src/components/Genome3D/index.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/DisProt/index.ts","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/index.tsx","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/index.tsx","webpack://interpro7-client/./src/components/Related/DomainsOnProtein/ExternalSourcesHOC/RepeatsDB/index.ts","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/ProteinViewerForAlphafold/index.tsx","webpack://interpro7-client/./node_modules/core-js/internals/does-not-exceed-safe-integer.js","webpack://interpro7-client/./node_modules/core-js/internals/flatten-into-array.js","webpack://interpro7-client/./node_modules/core-js/modules/es.array.flat.js","webpack://interpro7-client/./node_modules/core-js/modules/es.array.unscopables.flat.js"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { format } from 'url';\n\nexport const getAlphaFoldPredictionURL = createSelector(\n  (state: GlobalState) => state.settings.alphafold,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  ({ protocol, hostname, port, root, query }, accession) => {\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}api/prediction/${accession}`,\n      query: query,\n    });\n  },\n);\ntype StartsWithData = `data${string}`;\nexport const getConfidenceURLFromPayload = (namespace: string) =>\n  createSelector(\n    (\n      _: GlobalState,\n      props: { [d: StartsWithData]: RequestedData<AlphafoldPayload> },\n    ) => props[`data${namespace}`],\n    (dataPrediction: RequestedData<AlphafoldPayload>) => {\n      const cifURL = dataPrediction?.payload?.[0]?.cifUrl;\n      return cifURL?.length\n        ? cifURL.replace('-model', '-confidence').replace('.cif', '.json')\n        : null;\n    },\n  );\n","import { useMemo } from 'react';\nimport { toPlural } from 'utils/pages/toPlural';\nimport { NOT_MEMBER_DBS } from 'menuConfig';\nimport { getTrackColor, EntryColorMode } from 'utils/entry-color';\n\nexport const selectRepresentativeData = (\n  entries: Record<string, unknown>[],\n  locationKey: string,\n  type: string,\n) => {\n  const flatRepresentativeData = [];\n\n  for (const entry of entries) {\n    const { accession, short_name, name, source_database, integrated, chain } =\n      entry;\n    if (entry[locationKey] === null || entry.type !== type) {\n      continue;\n    }\n    for (const location of entry[locationKey] as Array<ProtVistaLocation>) {\n      for (const fragment of location.fragments) {\n        const { start, end } = fragment;\n        if (location.representative) {\n          flatRepresentativeData.push({\n            accession,\n            chain,\n            short_name,\n            name,\n            source_database,\n            integrated,\n            start,\n            end,\n            color: getTrackColor({ source_database }, EntryColorMode.MEMBER_DB),\n            length: end - start + 1,\n          });\n        }\n      }\n    }\n  }\n\n  return flatRepresentativeData;\n};\n\nexport const useProcessData = <M = Metadata>(\n  results: EndpointWithMatchesPayload<M, MatchI>[] | undefined,\n  endpoint: Endpoint,\n) =>\n  useMemo(() => {\n    return processData(results || [], endpoint);\n  }, [results, endpoint]);\n\nconst processData = <M = Metadata>(\n  dataResults: EndpointWithMatchesPayload<M>[],\n  endpoint: Endpoint,\n) => {\n  const results: Record<string, unknown>[] = [];\n  for (const item of dataResults) {\n    results.splice(\n      0,\n      0,\n      ...item[toPlural(endpoint)].map((match) => ({\n        ...match,\n        ...item.metadata,\n        ...(item.extra_fields || {}),\n      })),\n    );\n  }\n  const interpro = results.filter(\n    (entry) =>\n      (entry as unknown as Metadata).source_database.toLowerCase() ===\n      'interpro',\n  );\n\n  const locationKey =\n    endpoint === 'structure'\n      ? 'entry_structure_locations'\n      : 'entry_protein_locations';\n\n  const representativeData = {\n    domains: selectRepresentativeData(results, locationKey, 'domain'),\n    families: selectRepresentativeData(results, locationKey, 'family'),\n  };\n\n  const representativeDomains = representativeData['domains'];\n  const representativeFamilies = representativeData['families'];\n\n  const interproMap = new Map(\n    interpro.map((ipro) => [\n      `${ipro.accession}-${ipro.chain}-${ipro.protein}`,\n      ipro,\n    ]),\n  );\n  const integrated = results.filter((entry) => entry.integrated);\n  const unintegrated = results.filter(\n    (entry) =>\n      interpro.concat(integrated).indexOf(entry) === -1 &&\n      !NOT_MEMBER_DBS.has(\n        (entry as unknown as Metadata).source_database.toLowerCase(),\n      ),\n  );\n  integrated.forEach((entry) => {\n    const ipro: Record<string, unknown> & {\n      children?: Array<Record<string, unknown>>;\n    } =\n      interproMap.get(`${entry.integrated}-${entry.chain}-${entry.protein}`) ||\n      {};\n    if (!ipro.children) ipro.children = [];\n    if (ipro.children.indexOf(entry) === -1) ipro.children.push(entry);\n  });\n  integrated.sort((a, b) =>\n    a.chain ? (a.chain as string).localeCompare(b.chain as string) : -1,\n  );\n  return {\n    interpro,\n    unintegrated,\n    representativeDomains,\n    representativeFamilies,\n    other: [],\n  };\n};\n","import React, { PropsWithChildren } from 'react';\nimport { addConfidenceTrack } from 'components/Structure/ViewerAndEntries/ProteinViewerForAlphafold';\nimport loadable from 'higherOrder/loadable';\nimport { groupByEntryType } from 'components/Related/DomainsOnProtein';\nimport { ProteinsAPIVariation } from '@nightingale-elements/nightingale-variation/dist/proteinAPI';\nimport { ExtendedFeature } from 'components/ProteinViewer';\n\nconst ProteinViewer = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"protein-viewer\" */ 'components/ProteinViewer'),\n  loading: null,\n});\n\n// 0A017SEX7 is a good example\nconst UNDERSCORE = /_/g;\n\nconst FIRST_IN_ORDER = [\n  'alphafold_confidence',\n  'secondary_structure',\n  'spurious_proteins',\n  'representative_domains',\n  'representative_families',\n  'pathogenic_and_likely_pathogenic_variants',\n  'intrinsically_disordered_regions',\n  'residues',\n  'family',\n  'domain',\n  'homologous_superfamily',\n  'repeat',\n  'conserved_site',\n  'active_site',\n  'binding_site',\n  'ptm',\n];\n\nconst LASTS_IN_ORDER = [\n  'coiled-coils,_signal_peptides,_transmembrane_regions',\n  'short_linear_motifs',\n  'pfam-n',\n  'funfam',\n  'match_conservation',\n];\n\nexport const byEntryType = (\n  [a, _]: [string, unknown],\n  [b, __]: [string, unknown],\n) => {\n  for (const label of FIRST_IN_ORDER) {\n    if (a.toLowerCase() === label) return -1;\n    if (b.toLowerCase() === label) return 1;\n  }\n  for (const l of LASTS_IN_ORDER) {\n    if (a.toLowerCase() === l) return -1;\n    if (b.toLowerCase() === l) return 1;\n  }\n  return a > b ? 1 : 0;\n};\ntype tracksProps = {\n  interpro: Array<{ accession: string; type: string }>;\n  unintegrated: Array<MinimalFeature>;\n  other?: Array<MinimalFeature>;\n  representativeDomains?: Array<MinimalFeature>;\n  representativeFamilies?: Array<MinimalFeature>;\n  disorderedRegions?: Array<MinimalFeature>;\n};\n\nfunction getBoundaries(item: ExtendedFeature | ExtendedFeature[]) {\n  let fragment = undefined;\n  let accession = undefined;\n\n  if (Array.isArray(item)) {\n    fragment = item[0].entry_protein_locations?.[0].fragments?.[0];\n    accession = item[0].accession;\n  } else {\n    fragment = item.entry_protein_locations?.[0].fragments?.[0];\n    accession = item.accession;\n  }\n  if (fragment && accession) {\n    return [accession, fragment.start, fragment.end];\n  }\n  return [0, 0];\n}\n\nfunction sortTracks(\n  a: ExtendedFeature | ExtendedFeature[],\n  b: ExtendedFeature | ExtendedFeature[],\n) {\n  const [aAccession, aStart, aEnd] = getBoundaries(a);\n  const [bAccession, bStart, bEnd] = getBoundaries(b);\n\n  if (aStart > bStart) return 1;\n  if (aStart < bStart) return -1;\n  if (aStart == bStart) {\n    if (aEnd < bEnd) return 1;\n    if (aEnd > bEnd) return -1;\n    if (aEnd == bEnd) {\n      if (aAccession > bAccession) return 1;\n      else return -1;\n    }\n  }\n  return 0;\n}\n\nconst getMemberDBMatches = (\n  interpro: Array<MinimalFeature>,\n): Array<MinimalFeature> => {\n  const dbMatches: Array<MinimalFeature> = [];\n  interpro.forEach((entry) => {\n    if (entry.children) {\n      entry.children.forEach((memberDBMatch) => {\n        dbMatches.push(memberDBMatch);\n      });\n    }\n  });\n  return dbMatches;\n};\n\nexport const makeTracks = ({\n  interpro,\n  unintegrated,\n  other,\n  representativeDomains,\n  representativeFamilies,\n  disorderedRegions,\n}: tracksProps): ProteinViewerDataObject<MinimalFeature> => {\n  /* Logic to highlight matches from member DBs, not InterPro entries\n      1. Remove Intepro entries as the \"parent\" of matches from member DBs.\n      2. Merge unintegrated with result from (1.);\n      3. Sort matches in tracks based on their position but, if integrated,\n      maintaining grouping for the same InterPro entry.\n  */\n\n  // 1. and 2.\n  const integratedMatches = getMemberDBMatches(interpro);\n  const allMatches = integratedMatches.concat(unintegrated);\n\n  // this was const groups = groupByEntryType(interpro)\n  const groups = groupByEntryType(\n    allMatches as { accession: string; type: string }[],\n  );\n\n  /* 3.\n        Group matches of the same type (e.g domain) by IntePro accession\n        sort matches by position within the same group,\n        sort all the groups based on first fragment of group.\n  */\n\n  Object.keys(groups).map((key) => {\n    const uniqueInterproAccessions = [\n      ...new Set(groups[key].map((match: ExtendedFeature) => match.integrated)),\n    ];\n    const allMatchesGroupedByEntry = [];\n\n    for (let i = 0; i < uniqueInterproAccessions.length; i++) {\n      const groupedEntry = groups[key].filter(\n        (match: ExtendedFeature) =>\n          match.integrated == uniqueInterproAccessions[i],\n      );\n      // Sort non-integrated and those appearing just once for an Interpro accession, independently from the grouped ones\n      if (uniqueInterproAccessions[i] === null || groupedEntry.length == 1) {\n        groupedEntry.map((entry) => allMatchesGroupedByEntry.push(entry));\n      } else {\n        allMatchesGroupedByEntry.push(groupedEntry.sort(sortTracks));\n      }\n    }\n    groups[key] = allMatchesGroupedByEntry.sort(sortTracks).flat();\n  });\n\n  const mergedData: ProteinViewerDataObject<MinimalFeature> = groups;\n\n  if (other) mergedData.other_features = other;\n  if (representativeDomains?.length)\n    mergedData.representative_domains = representativeDomains;\n  if (representativeFamilies?.length)\n    mergedData.representative_families = representativeFamilies;\n  if (disorderedRegions?.length)\n    mergedData.disorderedRegions = disorderedRegions;\n  return mergedData;\n};\n\nexport const flattenTracksObject = (\n  tracksObject: ProteinViewerDataObject,\n): ProteinViewerData => {\n  return (\n    Object.entries(tracksObject)\n      .sort(byEntryType)\n      // “Binding_site” -> “Binding site”\n      .map(([key, value]) => [\n        key === 'ptm' ? 'PTM' : key.replace(UNDERSCORE, ' '),\n        value,\n      ])\n  );\n};\n\n/* Processing of the payload needs to be slightly different\nto add tracks to the dataMerged object instead of the dataSorted object */\nexport const addVariationTrack = (\n  variationPayload: ProteinsAPIVariation,\n  protein: string,\n  tracks: ProteinViewerDataObject,\n) => {\n  if (variationPayload?.features?.length) {\n    tracks['pathogenic_and_likely_pathogenic_variants'] = [];\n    tracks['pathogenic_and_likely_pathogenic_variants'][0] = {\n      accession: `variation_${protein}`,\n      data: variationPayload,\n      type: 'variation',\n      protein,\n      source_database: 'proteinsAPI',\n    };\n  }\n};\n\nexport const addPTMTrack = (\n  proteomicsPayload: ProteinsAPIProteomics,\n  protein: string,\n  tracks: ProteinViewerData,\n) => {\n  if (proteomicsPayload?.features?.length) {\n    const proteomicsTrack: [string, Array<unknown>] = [\n      'PTM Data',\n      [\n        {\n          accession: `ptm_${protein}`,\n          data: proteomicsPayload,\n          type: 'ptm',\n          protein,\n          source_database: 'proteinsAPI',\n        },\n      ],\n    ];\n    tracks.push(proteomicsTrack);\n  }\n};\n\ntype Props = PropsWithChildren<{\n  mainData:\n    | {\n        metadata: MinimalProteinMetadata;\n      }\n    | {\n        payload: {\n          metadata: MinimalProteinMetadata;\n        };\n      };\n  dataMerged: ProteinViewerDataObject;\n  dataConfidence?: RequestedData<AlphafoldConfidencePayload>;\n  dataVariation?: RequestedData<ProteinsAPIVariation>;\n  dataProteomics?: RequestedData<ProteinsAPIProteomics>;\n  conservationError?: string | null;\n  showConservationButton?: boolean;\n  handleConservationLoad?: () => void;\n  loading: boolean;\n  title?: string;\n}>;\n\nconst DomainsOnProteinLoaded = ({\n  mainData,\n  dataMerged,\n  dataConfidence,\n  dataVariation,\n  dataProteomics,\n  conservationError,\n  showConservationButton,\n  handleConservationLoad,\n  loading,\n  children,\n  title = 'Entry matches to this protein',\n}: Props) => {\n  const protein =\n    (mainData as ProteinEntryPayload).metadata ||\n    (mainData as { payload: ProteinEntryPayload }).payload.metadata;\n\n  /*\n  Special tracks are now added to the dataMerged object before being sorted based on FIRST_IN_ORDER.\n  Adding the tracks to the dataSorted object, caused the Alphafold track and variants track to be displayed always at the first/last position.\n  */\n  if (dataConfidence)\n    addConfidenceTrack(dataConfidence, protein.accession, dataMerged);\n\n  if (dataVariation?.ok && dataVariation.payload) {\n    const filteredVariationPayload = filterVariation(dataVariation.payload);\n    if (filteredVariationPayload.features.length > 0)\n      addVariationTrack(\n        filteredVariationPayload,\n        protein.accession,\n        dataMerged,\n      );\n  }\n\n  if (dataProteomics?.ok && dataProteomics.payload) {\n    if (dataProteomics.payload.features.length > 0) {\n      /*addPTMTrack(dataProteomics.payload, protein.accession, sortedData);*/\n    }\n  }\n\n  // Sort all the tracks, including the special ones (eg. alphafold, variants)\n  const sortedData = flattenTracksObject(dataMerged);\n\n  return (\n    <ProteinViewer\n      protein={protein}\n      data={sortedData}\n      title={title}\n      show\n      ervationButton={showConservationButton}\n      handleConservationLoad={handleConservationLoad}\n      conservationError={conservationError}\n      loading={loading}\n    >\n      {children}\n    </ProteinViewer>\n  );\n};\n\nexport default DomainsOnProteinLoaded;\nfunction filterVariation(payload: ProteinsAPIVariation): ProteinsAPIVariation {\n  const types = ['pathogenic', 'likely pathogenic'];\n  const features = payload.features.filter(\n    (f) =>\n      (f?.clinicalSignificances || []).filter((cs) =>\n        types.includes((cs?.type || '').toLowerCase()),\n      ).length > 0,\n    // Next line is the filter I think UniProt uses, which yields different results than the one above\n    // (f) => (f?.association || []).filter((a) => a.disease).length > 0,\n  );\n  return {\n    ...payload,\n    features,\n  };\n}\n","import { ExtendedFeature } from 'components/ProteinViewer';\nconst mobiConsensus = 'Consensus Disorder Prediction';\nconst splitMobiFeatures = (feature: ExtendedFeature) => {\n  const newFeatures: Record<string, ExtendedFeature> = {};\n  for (const loc of feature.locations || []) {\n    const key =\n      ((loc.fragments[0] as Record<string, number | string>)\n        ?.seq_feature as string) ||\n      loc.seq_feature ||\n      mobiConsensus;\n    if (newFeatures[key]) {\n      newFeatures[key].locations?.push(loc);\n    } else {\n      newFeatures[key] = {\n        ...feature,\n        accession: `Mobidblt-${key}`,\n        locations: [loc],\n      };\n    }\n  }\n\n  return Object.values(newFeatures);\n};\n\nconst mergeExtraFeatures = (\n  data: ProteinViewerDataObject,\n  extraFeatures: Record<string, ExtendedFeature>\n) => {\n  if ('mobidb-lite' in extraFeatures) {\n    data.other_features = data.other_features.concat(\n      splitMobiFeatures(extraFeatures['mobidb-lite'])\n    );\n  }\n  data.other_features = data.other_features\n    .concat(\n      Object.values(extraFeatures).filter(\n        ({ source_database: db }) => db !== 'mobidblt'\n      )\n    )\n    .sort((a, b) => {\n      const { accession: accA, source_database: dbA } = a as Record<\n        string,\n        string\n      >;\n      const { accession: accB, source_database: dbB } = b as Record<\n        string,\n        string\n      >;\n      if (dbA === dbB) {\n        if (accA.includes(mobiConsensus)) return -1;\n        if (accB.includes(mobiConsensus)) return 1;\n        return 0;\n      }\n      return dbA.localeCompare(dbB);\n    });\n  return data;\n};\nexport default mergeExtraFeatures;\n","import { ExtendedFeature } from 'src/components/ProteinViewer';\n\nconst PIRSR_ACCESSION_LENGTH = 11;\nconst PIRSF_PREFIX_LENGTH = 5;\n\ntype FeatureWithResidues = MinimalFeature & {\n  residues?: Array<ResidueMetadata>;\n};\ntype ResidueEntry = ResidueMetadata & {\n  linked?: boolean;\n  type?: string;\n};\n\n/**\n * PIRSR residues associated with the same family can come from several models\n * which accession correspond to the family followed by the model. e.g. PIRSR000001-1 and PIRSR000001-2\n * This function groups those two model into a single residue with multiple locations.\n * @param {object} residues list of residues\n * @returns {object} list of residues with the PIRSR ones grouped\n */\nconst mergePIRSFRResidues = (residues: Record<string, ResidueMetadata>) => {\n  const newResidues: Record<string, ResidueMetadata> = {};\n  Object.keys(residues).forEach((acc) => {\n    if (acc.startsWith('PIRSR')) {\n      const newAcc = acc.substring(0, PIRSR_ACCESSION_LENGTH);\n\n      if (!newResidues[newAcc]) {\n        newResidues[newAcc] = {\n          ...residues[acc],\n          accession: newAcc,\n          locations: [] as Array<ProtVistaLocation>,\n        };\n      }\n      residues[acc].locations?.forEach(\n        (location) => (location.accession = acc),\n      );\n      newResidues[newAcc].locations?.push(...(residues[acc].locations || []));\n    } else {\n      newResidues[acc] = { ...residues[acc] };\n    }\n  });\n  return newResidues;\n};\n\nconst mergeResidues = (\n  data: ProteinViewerDataObject<MinimalFeature>,\n  residuesPayload: ResiduesPayload,\n) => {\n  const residuesWithEntryDetails: Array<FeatureWithResidues> = [];\n  const residues: Record<string, ResidueEntry> =\n    mergePIRSFRResidues(residuesPayload);\n\n  const { representative_domains: _, ...otherGroups } = data;\n  Object.values(otherGroups).forEach(\n    (\n      group /*: Array<{accession:string, residues: Array<Object>, children: any}> */,\n    ) =>\n      group.forEach((entry) => {\n        const resAccession = entry.accession.startsWith('PIRSF')\n          ? `PIRSR${entry.accession.substring(\n              PIRSF_PREFIX_LENGTH,\n              PIRSR_ACCESSION_LENGTH,\n            )}`\n          : entry.accession;\n        if (residues[resAccession]) {\n          const matchedEntry: FeatureWithResidues = { ...entry };\n          matchedEntry.accession = `residue:${entry.accession}`;\n          matchedEntry.residues = [residues[resAccession]];\n          residuesWithEntryDetails.push(matchedEntry);\n          residues[resAccession].linked = true;\n        }\n\n        if (entry.children && entry.children.length)\n          entry.children.forEach((child) => {\n            const childResAccession = child.accession.startsWith('PIRSF')\n              ? `PIRSR${child.accession.substring(\n                  PIRSF_PREFIX_LENGTH,\n                  PIRSR_ACCESSION_LENGTH,\n                )}`\n              : child.accession;\n            if (residues[childResAccession]) {\n              const matchedEntry: FeatureWithResidues = { ...child };\n              matchedEntry.accession = `residue:${child.accession}`;\n              matchedEntry.residues = [residues[childResAccession]];\n              residuesWithEntryDetails.push(matchedEntry);\n              residues[childResAccession].linked = true;\n            }\n          });\n      }),\n  );\n\n  const unlinkedResidues: ResidueEntry[] = [];\n  Object.values(residues)\n    .filter(({ linked }) => !linked)\n    .forEach((residue) => {\n      residue.locations.forEach((location, i) => {\n        const residueEntry = { ...residue };\n        residueEntry.accession = `${\n          location.accession || residue.accession\n        }.${i}`;\n        residueEntry.type = 'residue';\n        residueEntry.locations = [location];\n        unlinkedResidues.push(residueEntry);\n      });\n    });\n\n  data.residues = (residuesWithEntryDetails as ResidueEntry[]).concat(\n    unlinkedResidues,\n  );\n};\n\nexport default mergeResidues;\n","// @flow\nconst HTTP_OK = 200;\n\nconst _getProtvistaTracksData = ({\n  annotations,\n  condition,\n  type,\n  protein,\n}: {\n  annotations: Array<Genome3DAnnotation>;\n  condition: (a: Genome3DAnnotation) => boolean;\n  type: string;\n  protein: string;\n}) => {\n  const models = annotations.filter(condition);\n  if (models.length) {\n    const tracks = Object.values(\n      models.reduce(\n        (agg, { metadata, locations }) => {\n          if (!(metadata.resource in agg)) {\n            agg[metadata.resource] = {\n              protein,\n              accession: `G3D:${metadata.resource}-${metadata.type}`,\n            };\n          }\n          agg[metadata.resource].type = type;\n          agg[metadata.resource].source_database = metadata.resource;\n          const addedInfoLocation = {\n            confidence: metadata.confidence,\n            fragments: locations[0].fragments,\n          };\n\n          // Saving the fragment end to sort for later\n          if (agg[metadata.resource].locationEnd) {\n            agg[metadata.resource].locationEnd =\n              (agg[metadata.resource].locationEnd as number) <\n              locations[0].fragments[0].end\n                ? locations[0].fragments[0].end\n                : agg[metadata.resource].locationEnd;\n          } else {\n            agg[metadata.resource].locationEnd = locations[0].fragments[0].end;\n          }\n\n          if (agg[metadata.resource].locations) {\n            const presentLocations = agg[metadata.resource]\n              .locations as ProtVistaLocation[];\n            presentLocations.push(addedInfoLocation);\n            agg[metadata.resource].locations = presentLocations;\n          } else {\n            agg[metadata.resource].locations = [addedInfoLocation];\n          }\n          return agg;\n        },\n        {} as Record<\n          string,\n          MinimalFeature & {\n            locationEnd?: number;\n            protein: string;\n            type?: string;\n          }\n        >\n      )\n    );\n    return tracks.sort(\n      (a: { locationEnd?: number }, b: { locationEnd?: number }) =>\n        (a.locationEnd || 0) - (b.locationEnd || 0)\n    );\n  }\n  return null;\n};\n\nexport const formatGenome3dIntoProtVistaPanels = ({\n  loading,\n  status,\n  payload,\n}: RequestedData<Genome3DProteinPayload>) => {\n  const panelsData: MinimalFeature[] = [];\n  if (!loading && status === HTTP_OK && payload?.data?.annotations?.length) {\n    const models = _getProtvistaTracksData({\n      annotations: payload.data.annotations,\n      condition: ({ metadata }) =>\n        metadata.type === 'PREDICTED_3D_STRUCTURE' &&\n        // Superfamily and gene3d have already been integrated in InterPro\n        metadata.resource.toUpperCase() !== 'SUPERFAMILY' &&\n        metadata.resource.toUpperCase() !== 'GENE3D',\n      type: 'Model',\n      protein: payload.data.uniprot_acc,\n    });\n    if (models) panelsData.push(...models);\n    const domains = _getProtvistaTracksData({\n      annotations: payload.data.annotations,\n      condition: ({ metadata }) =>\n        metadata.type !== 'PREDICTED_3D_STRUCTURE' &&\n        // Superfamily and gene3d have already been integrated in InterPro\n        metadata.resource.toUpperCase() !== 'SUPERFAMILY' &&\n        metadata.resource.toUpperCase() !== 'GENE3D',\n      type: 'Domain',\n      protein: payload.data.uniprot_acc,\n    });\n    if (domains) panelsData.push(...domains);\n  }\n  return panelsData;\n};\n","const HTTP_OK = 200;\n\nconst TYPES: { [key: string]: string } = {\n  F: 'Function region',\n  S: 'Order state',\n  D: 'Disorder state',\n  T: 'Transition',\n  I: 'Transition with interaction',\n};\n\nexport const formatDisProt = ({\n  loading,\n  status,\n  payload,\n}: RequestedData<DisProtPayload>) => {\n  const panelsData: MinimalFeature[] = [];\n  if (!loading && status === HTTP_OK && payload) {\n    let i = 1;\n    for (const region of payload.disprot_consensus.full) {\n      panelsData.push({\n        accession: `DISPROT:${i++}`,\n        protein: payload.acc,\n        source_database: 'DisProt',\n        type: TYPES[region.type] || '',\n        locations: [\n          {\n            fragments: [\n              {\n                start: region.start,\n                end: region.end,\n              },\n            ],\n          },\n        ],\n      } as MinimalFeature);\n    }\n  }\n  return panelsData;\n};\n\nexport default formatDisProt;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport { formatGenome3dIntoProtVistaPanels } from 'components/Genome3D';\nimport formatRepeatsDB from './RepeatsDB';\nimport formatDisProt from './DisProt';\n\nexport type ExtenalSourcesProps = {\n  loading: boolean;\n  externalSourcesData: MinimalFeature[];\n};\nexport function loadExternalSources<\n  T extends ExtenalSourcesProps = ExtenalSourcesProps,\n>(WrappedComponent: React.ComponentType<T>) {\n  // Try to create a nice displayName for React Dev Tools.\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n  type Props = Omit<T, keyof ExtenalSourcesProps> &\n    LoadDataProps<Genome3DProteinPayload, 'Genome3D'> &\n    LoadDataProps<DisProtPayload, 'DisProt'> &\n    LoadDataProps<RepeatsDBPayload, 'RepeatsDB'>;\n\n  const ComponentWithExternalData = (props: Props) => {\n    const {\n      dataGenome3D,\n      isStaleGenome3D: _,\n      dataRepeatsDB,\n      isStaleRepeatsDB: __,\n      dataDisProt,\n      isStaleDisProt: ___,\n      ...otherProps\n    } = props;\n\n    const genome3dFormatted = dataGenome3D\n      ? formatGenome3dIntoProtVistaPanels(dataGenome3D)\n      : [];\n    const repeatsDBFormatted = dataRepeatsDB\n      ? formatRepeatsDB(dataRepeatsDB)\n      : [];\n    const disprotFormatted = dataDisProt ? formatDisProt(dataDisProt) : [];\n\n    // TODO: Add Disprot\n\n    // Fetch the props you want to inject. This could be done with context instead.\n    const newProps = {\n      loading: !!dataGenome3D?.loading,\n      externalSourcesData: [\n        ...genome3dFormatted,\n        ...repeatsDBFormatted,\n        ...disprotFormatted,\n      ],\n    };\n\n    // props comes afterwards so the can override the default ones.\n    return <WrappedComponent {...newProps} {...(otherProps as T)} />;\n  };\n\n  ComponentWithExternalData.displayName = `loadExternalSources(${displayName})`;\n\n  return loadData<RepeatsDBPayload, 'RepeatsDB'>({\n    getUrl: getRepeatsDBURL,\n    propNamespace: 'RepeatsDB',\n  } as LoadDataParameters)(\n    loadData<DisProtPayload, 'DisProt'>({\n      getUrl: getDisProtURL,\n      propNamespace: 'DisProt',\n    } as LoadDataParameters)(\n      loadData<Genome3DProteinPayload, 'Genome3D'>({\n        getUrl: getGenome3dURL,\n        propNamespace: 'Genome3D',\n      } as LoadDataParameters)(ComponentWithExternalData),\n    ),\n  );\n}\n\nconst getGenome3dURL = createSelector(\n  (state: GlobalState) => state.settings.genome3d,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    if (!accession) return null;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}uniprot/${accession}`,\n      query: {\n        protvista: true,\n      },\n    });\n  },\n);\n\nconst getRepeatsDBURL = createSelector(\n  (state: GlobalState) => state.settings.repeatsDB,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    if (!accession) return null;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}`,\n      query: {\n        query: `uniprot_id:${accession}`,\n      },\n    });\n  },\n);\nconst getDisProtURL = createSelector(\n  (state: GlobalState) => state.settings.disprot,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    if (!accession) return null;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: `${root}/${accession}`,\n      query: {\n        format: 'json',\n      },\n    });\n  },\n);\n\nexport default loadExternalSources;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { edgeCases, STATUS_TIMEOUT } from 'utils/server-message';\n\nimport {\n  getAlphaFoldPredictionURL,\n  getConfidenceURLFromPayload,\n} from 'components/AlphaFold/selectors';\nimport { useProcessData } from 'components/ProteinViewer/utils';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\nimport EdgeCase from 'components/EdgeCase';\n\n// import ConservationProvider, {\n//   mergeConservationData,\n//   // Disabling Conservation until hmmer is working\n//   // isConservationDataAvailable,\n// } from './ConservationProvider';\nimport mergeExtraFeatures from './mergeExtraFeatures';\nimport mergeResidues from './mergeResidues';\nimport DomainsOnProteinLoaded, { makeTracks } from './DomainsOnProteinLoaded';\nimport loadExternalSources, { ExtenalSourcesProps } from './ExternalSourcesHOC';\nimport { ProteinsAPIVariation } from '@nightingale-elements/nightingale-variation/dist/proteinAPI';\nimport { ExtendedFeature } from 'src/components/ProteinViewer';\n\nexport const orderByAccession = (\n  a: { accession: string },\n  b: { accession: string },\n) => (a.accession > b.accession ? 1 : -1);\n\nexport const groupByEntryType = (\n  interpro: Array<{\n    accession: string;\n    type: string;\n  }>,\n) => {\n  const groups: Record<\n    string,\n    Array<{\n      accession: string;\n      type: string;\n    }>\n  > = {};\n  for (const entry of interpro) {\n    if (!groups[entry.type]) groups[entry.type] = [];\n    groups[entry.type].push(entry);\n  }\n  Object.values(groups).forEach((g) => g.sort(orderByAccession));\n  return groups;\n};\n\ntype Props = PropsWithChildren<{\n  mainData: { metadata: ProteinMetadata };\n  onMatchesLoaded?: (\n    results: EndpointWithMatchesPayload<EntryMetadata, MatchI>[],\n  ) => void;\n  onFamiliesFound?: (families: Record<string, unknown>[]) => void;\n  title?: string;\n}>;\ninterface LoadedProps\n  extends Props,\n    ExtenalSourcesProps,\n    LoadDataProps<ExtraFeaturesPayload, 'Features'>,\n    LoadDataProps<ResiduesPayload, 'Residues'>,\n    LoadDataProps<ProteinsAPIVariation, 'Variation'>,\n    LoadDataProps<AlphafoldConfidencePayload, 'Confidence'>,\n    LoadDataProps<ProteinsAPIProteomics, 'Proteomics'>,\n    LoadDataProps<AlphafoldPayload, 'Prediction'>,\n    LoadDataProps<\n      PayloadList<EndpointWithMatchesPayload<EntryMetadata>> | ErrorPayload\n    > {}\n\nconst DomainOnProteinWithoutData = ({\n  data,\n  mainData,\n  dataResidues,\n  dataFeatures,\n  dataConfidence,\n  dataVariation,\n  dataProteomics,\n  onMatchesLoaded,\n  onFamiliesFound,\n  children,\n  externalSourcesData,\n  title,\n}: LoadedProps) => {\n  // const [conservation, setConservation] = useState<{\n  //   generateData: boolean;\n  //   showButton: boolean;\n  //   data: ConservationPayload | null;\n  //   error: string | null;\n  // }>({\n  //   generateData: false,\n  //   showButton: false,\n  //   data: null,\n  //   error: null,\n  // });\n  const [processedData, setProcessedData] = useState<{\n    interpro: Record<string, unknown>[];\n    representativeDomains?: Record<string, unknown>[];\n    representativeFamilies?: Record<string, unknown>[];\n    unintegrated: Record<string, unknown>[];\n    other: Array<MinimalFeature>;\n  } | null>(null);\n  const processData = useProcessData<EntryMetadata>(\n    (\n      data?.payload as PayloadList<\n        EndpointWithMatchesPayload<EntryMetadata, MatchI>\n      >\n    )?.results,\n    'protein',\n  );\n  useEffect(() => {\n    const payload = data?.payload as PayloadList<\n      EndpointWithMatchesPayload<EntryMetadata>\n    >;\n    if (data && !data.loading) {\n      if (processData) {\n        onMatchesLoaded?.(payload?.results || []);\n        const {\n          interpro,\n          unintegrated,\n          representativeDomains,\n          representativeFamilies,\n          other,\n        } = processData;\n        setProcessedData({\n          interpro,\n          unintegrated,\n          representativeDomains,\n          representativeFamilies,\n          other,\n        });\n        onFamiliesFound?.(interpro.filter((entry) => entry.type === 'family'));\n      }\n    }\n  }, [data, processData]);\n\n  if (data?.loading && dataFeatures?.loading) return <Loading />;\n  const payload = data?.payload as PayloadList<\n    EndpointWithMatchesPayload<EntryMetadata>\n  >;\n  if (!payload?.results) {\n    const edgeCaseText = edgeCases.get(STATUS_TIMEOUT);\n    if ((data?.payload as ErrorPayload)?.detail === 'Query timed out')\n      return <EdgeCase text={edgeCaseText || ''} status={STATUS_TIMEOUT} />;\n  }\n  if (!processedData) return null;\n  const {\n    interpro,\n    unintegrated,\n    other,\n    representativeDomains,\n    representativeFamilies,\n  } = processedData;\n  const mergedData = makeTracks({\n    interpro: interpro as Array<{ accession: string; type: string }>,\n    unintegrated: unintegrated as Array<{ accession: string; type: string }>,\n    other: other as Array<MinimalFeature>,\n    representativeDomains: representativeDomains as Array<MinimalFeature>,\n    representativeFamilies: representativeFamilies as Array<MinimalFeature>,\n  });\n  if (externalSourcesData.length) {\n    mergedData.external_sources = externalSourcesData;\n  }\n\n  if (dataResidues && !dataResidues.loading && dataResidues.payload) {\n    mergeResidues(mergedData, dataResidues.payload);\n  }\n\n  const getFeature = (\n    filter: string | string[],\n    mergedData: ProteinViewerDataObject,\n  ): ExtendedFeature[] => {\n    if (mergedData['other_features']) {\n      return (mergedData['other_features'] as ExtendedFeature[]).filter(\n        (entry) => {\n          const entryDB = entry.source_database;\n          if (entryDB) {\n            if (Array.isArray(filter))\n              return filter.some((item) => entryDB.includes(item));\n            else return filter.includes(entryDB);\n          }\n        },\n      );\n    }\n    return [];\n  };\n\n  const filterMobiDBLiteFeatures = (\n    mergedData: ProteinViewerDataObject,\n  ): ExtendedFeature[] => {\n    const mobiDBLiteEntries: ExtendedFeature[] = (\n      mergedData['other_features'] as ExtendedFeature[]\n    ).filter((k) => (k as ExtendedFeature).accession.includes('Mobidblt'));\n\n    const mobiDBLiteConsensusWithChildren: ExtendedFeature[] =\n      mobiDBLiteEntries.filter((entry) =>\n        entry.accession.includes('Consensus'),\n      );\n    const mobiDBLiteChildren: ExtendedFeature[] = mobiDBLiteEntries.filter(\n      (entry) => !entry.accession.includes('Consensus'),\n    );\n\n    if (mobiDBLiteConsensusWithChildren.length > 0) {\n      mobiDBLiteChildren.map((child) => {\n        child.protein = child.accession;\n      });\n      mobiDBLiteConsensusWithChildren[0].children = mobiDBLiteChildren;\n    }\n\n    return mobiDBLiteConsensusWithChildren;\n  };\n\n  if (dataFeatures && !dataFeatures.loading && dataFeatures.payload) {\n    mergeExtraFeatures(mergedData, dataFeatures?.payload);\n    mergedData['intrinsically_disordered_regions'] = filterMobiDBLiteFeatures(\n      mergedData,\n    ) as MinimalFeature[];\n\n    /* Splitting the \"other features\" section in mulitple subsets.\n       Using this logic we can go back to having the \"other_features\" section again.\n    */\n\n    // Create a section for each of the following types\n    const CPST = ['coils', 'phobius', 'signalp', 'tmhmm'];\n    mergedData['coiled-coils,_signal_peptides,_transmembrane_regions'] =\n      getFeature(CPST, mergedData) as MinimalFeature[];\n    mergedData['pfam-n'] = getFeature('pfam-n', mergedData) as MinimalFeature[];\n    mergedData['short_linear_motifs'] = getFeature(\n      'elm',\n      mergedData,\n    ) as MinimalFeature[];\n    mergedData['funfam'] = getFeature('funfam', mergedData) as MinimalFeature[];\n\n    if (Object.keys(mergedData).includes('region')) {\n      mergedData['spurious_proteins'] = mergedData['region'];\n      delete mergedData['region'];\n    }\n\n    //\n\n    // Filter the types above out of the \"other_features\" section\n    const toRemove = CPST.concat([\n      'pfam-n',\n      'short_linear_motifs',\n      'mobidblt',\n      'funfam',\n    ]);\n    mergedData['other_features'] = mergedData['other_features'].filter(\n      (entry) => {\n        return !toRemove.some((item) => entry.source_database?.includes(item));\n      },\n    );\n\n    /* End of logic for splitting \"other_features\" */\n  }\n  // if (conservation.data) {\n  //   mergeConservationData(mergedData, conservation.data);\n  // }\n  // Disabling Conservation until hmmer is working\n  // const fetchConservationData = () => {\n  //   setConservation({ ...conservation, generateData: true });\n  // };\n\n  if (\n    (!Object.keys(mergedData).length ||\n      !Object.values(mergedData)\n        .map((x) => x.length)\n        .reduce((agg, v) => agg + v, 0)) &&\n    !data?.loading &&\n    !dataFeatures?.loading &&\n    !dataResidues?.loading\n  ) {\n    return <Callout type=\"info\">No entries match this protein.</Callout>;\n  }\n  // Disabling Conservation until hmmer is working\n  // const showConservationButton =\n  //   // check if conservation data has already been generated\n  //   !conservation.data &&\n  //   // or if the conditions to calculate conservation are met.\n  //   isConservationDataAvailable(mergedData, mainData.metadata.source_database);\n\n  return (\n    <>\n      {/* <ConservationProvider\n        generateData={conservation.generateData}\n        handleLoaded={(data) =>\n          setConservation({\n            ...conservation,\n            data: data,\n            error: null,\n          })\n        }\n        handleError={(payload) => {\n          let message = 'Unknown issue fetching the data.';\n          if (payload.status) {\n            message =\n              payload.status === HTTP_OK\n                ? 'The server responded OK, however the payload is empty'\n                : `Server code - ${payload.status}`;\n          }\n          setConservation({\n            ...conservation,\n            data: null,\n            error: `ERROR: ${message}`,\n          });\n        }}\n      />\n*/}\n      <DomainsOnProteinLoaded\n        title={title}\n        mainData={mainData}\n        dataMerged={mergedData}\n        dataConfidence={dataConfidence}\n        dataVariation={dataVariation}\n        dataProteomics={dataProteomics}\n        loading={\n          data?.loading ||\n          dataFeatures?.loading ||\n          dataResidues?.loading ||\n          false\n        }\n        // Disabling Conservation until hmmer is working\n        // conservationError={conservation.error}\n        // showConservationButton={showConservationButton}\n        // handleConservationLoad={fetchConservationData}\n      >\n        {children}\n      </DomainsOnProteinLoaded>\n    </>\n  );\n};\n\nconst getRelatedEntriesURL = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (state: GlobalState) => state.customLocation.description.protein.accession,\n  (\n    { protocol, hostname, port, root }: ParsedURLServer,\n    accession: string | null,\n  ) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'entry' },\n      protein: { isFilter: true, db: 'uniprot', accession },\n      entry: { db: 'all' },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n      query: {\n        page_size: 200,\n        extra_fields: 'hierarchy,short_name',\n      },\n    });\n  },\n);\n\nconst getExtraURL = (query: string) =>\n  createSelector(\n    (state: GlobalState) => state.settings.api,\n    (state: GlobalState) => state.customLocation.description,\n    (\n      { protocol, hostname, port, root }: ParsedURLServer,\n      description: InterProDescription,\n    ) => {\n      const url = format({\n        protocol,\n        hostname,\n        port,\n        pathname: root + descriptionToPath(description),\n        query: {\n          [query]: null,\n        },\n      });\n      return url;\n    },\n  );\n\nconst getVariationURL = createSelector(\n  (state: GlobalState) => state.settings.proteinsAPI,\n  (state: GlobalState) =>\n    state.customLocation.description.protein?.accession || '',\n  ({ protocol, hostname, port, root }: ParsedURLServer, accession: string) => {\n    const url = format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + 'variation/' + accession,\n    });\n    return url;\n  },\n);\n\n/*const getPTMPayload = createSelector(\n  (state: GlobalState) => state.settings.proteinsAPI,\n  (state: GlobalState) =>\n    state.customLocation.description.protein?.accession || '',\n  ({ protocol, hostname, port, root }: ParsedURLServer, accession: string) => {\n    const url = format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + 'proteomics-ptm/' + accession,\n    });\n    return url;\n  },\n);*/\n\n/* To add then PTM data is complete\n* as LoadDataParameters)(\nloadData<ProteinsAPIProteomics, 'Proteomics'>({\n  getUrl: getPTMPayload,\n  propNamespace: 'Proteomics', \n} */\n\nexport default loadExternalSources(\n  loadData<AlphafoldPayload, 'Prediction'>({\n    getUrl: getAlphaFoldPredictionURL,\n    propNamespace: 'Prediction',\n  } as LoadDataParameters)(\n    loadData<AlphafoldConfidencePayload, 'Confidence'>({\n      getUrl: getConfidenceURLFromPayload('Prediction'),\n      propNamespace: 'Confidence',\n    } as LoadDataParameters)(\n      loadData<ExtraFeaturesPayload, 'Features'>({\n        getUrl: getExtraURL('extra_features'),\n        propNamespace: 'Features',\n      } as LoadDataParameters)(\n        loadData<ResiduesPayload, 'Residues'>({\n          getUrl: getExtraURL('residues'),\n          propNamespace: 'Residues',\n        } as LoadDataParameters)(\n          loadData<ProteinsAPIVariation, 'Variation'>({\n            getUrl: getVariationURL,\n            propNamespace: 'Variation',\n          } as LoadDataParameters)(\n            loadData(getRelatedEntriesURL as LoadDataParameters)(\n              DomainOnProteinWithoutData,\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n","const HTTP_OK = 200;\n\nexport const formatRepeatsDB = ({\n  loading,\n  status,\n  payload,\n}: RequestedData<RepeatsDBPayload>) => {\n  const panelsData: MinimalFeature[] = [];\n  if (!loading && status === HTTP_OK && payload) {\n    for (const repeatDatum of payload || []) {\n      for (const feature of repeatDatum.repeatsdb_consensus_majority || []) {\n        panelsData.push({\n          accession: `REPEAT:${repeatDatum.uniprot_id}:${feature.start}-${feature.end}`,\n          protein: repeatDatum.uniprot_id,\n          source_database: 'RepeatsDB',\n          type: 'Consensus',\n          locations: [\n            {\n              fragments: [\n                {\n                  start: feature.start,\n                  end: feature.end,\n                },\n              ],\n            },\n          ],\n        } as MinimalFeature);\n      }\n    }\n  }\n  return panelsData;\n};\n\nexport default formatRepeatsDB;\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport loadable from 'higherOrder/loadable';\nimport { createSelector } from 'reselect';\n\nimport { format } from 'url';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport { useProcessData } from 'components/ProteinViewer/utils';\nimport {\n  getAlphaFoldPredictionURL,\n  getConfidenceURLFromPayload,\n} from 'components/AlphaFold/selectors';\nimport { Selection } from 'components/Structure/ViewerAndEntries';\n\nimport Loading from 'components/SimpleCommonComponents/Loading';\n\nimport {\n  flattenTracksObject,\n  makeTracks,\n} from 'components/Related/DomainsOnProtein/DomainsOnProteinLoaded';\n\nconst ProteinViewer = loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"protein-viewer\" */ 'components/ProteinViewer'),\n  loading: null,\n});\n\n/* Processing of the payload needs to be slightly different \nto add tracks to the dataMerged object instead of the dataSorted object */\nexport const addConfidenceTrack = (\n  dataConfidence: RequestedData<AlphafoldConfidencePayload>,\n  protein: string,\n  tracks: ProteinViewerDataObject,\n) => {\n  if (dataConfidence?.payload?.confidenceCategory?.length) {\n    tracks['alphafold_confidence'] = [];\n    tracks['alphafold_confidence'][0] = {\n      accession: `confidence_af_${protein}`,\n      data: dataConfidence.payload.confidenceCategory.join(''),\n      type: 'confidence',\n      protein,\n      source_database: 'alphafold',\n    };\n  }\n};\n\ntype Props = {\n  protein: string;\n  onChangeSelection: (s: Selection[] | null) => void;\n  isSplitScreen: boolean;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<{ metadata: ProteinMetadata }, 'Protein'>,\n    LoadDataProps<AlphafoldConfidencePayload, 'Confidence'>,\n    LoadDataProps<AlphafoldPayload, 'Prediction'>,\n    LoadDataProps<PayloadList<EndpointWithMatchesPayload<EntryMetadata>>> {}\nconst ProteinViewerForAlphafold = ({\n  data,\n  protein,\n  dataProtein,\n  dataConfidence,\n  onChangeSelection,\n  isSplitScreen = false,\n}: LoadedProps) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const [fixedSelection, _setFixedSelection] = useState<Selection[]>([]);\n  const [hoverSelection, _setHoverSelection] = useState<Selection[]>([]);\n  const hoverSelectionRef = useRef(hoverSelection);\n  const fixedSelectionRef = useRef(fixedSelection);\n  const processedData = useProcessData(data?.payload?.results, 'protein');\n  const setFixedSelection = (data: Selection[]) => {\n    fixedSelectionRef.current = data;\n    _setFixedSelection(data);\n  };\n  const setHoverSelection = (data: Selection[]) => {\n    hoverSelectionRef.current = data;\n    _setHoverSelection(data);\n  };\n  useEffect(() => {\n    const selection = [...hoverSelection, ...fixedSelection];\n    onChangeSelection(selection.length ? selection : null);\n  }, [fixedSelection, hoverSelection]);\n  useEffect(() => {\n    containerRef.current?.addEventListener('change', (rawEvent: Event) => {\n      const event = rawEvent as CustomEvent;\n      if (!event.detail) return;\n      const { eventType, highlight } = event.detail;\n      switch (eventType) {\n        case 'click':\n          if (fixedSelectionRef.current.length) {\n            setFixedSelection([]);\n          } else {\n            setFixedSelection(hoverSelectionRef.current);\n          }\n          break;\n        case 'mouseover': {\n          const colour =\n            parseInt(event?.detail?.feature?.color?.substring(1), 16) || 0;\n\n          const selection =\n            highlight?.split(',').map((block: string) => {\n              const parts = block.split(':');\n              const start = Number(parts?.[0]) || 1;\n              const end = Number(parts?.[1]) || 1;\n              return { chain: 'A', start, end, colour };\n            }) || [];\n          setHoverSelection(selection);\n          break;\n        }\n        case 'mouseout':\n          setHoverSelection([]);\n          break;\n        default:\n          break;\n      }\n    });\n  }, [containerRef.current]);\n  if (\n    !data ||\n    data.loading ||\n    !dataProtein ||\n    dataProtein.loading ||\n    !processedData\n  )\n    return <Loading />;\n  const { interpro, unintegrated, representativeDomains } = processedData;\n  const groups = makeTracks({\n    interpro: interpro as Array<{ accession: string; type: string }>,\n    unintegrated: unintegrated as Array<MinimalFeature>,\n    representativeDomains: representativeDomains as Array<MinimalFeature>,\n  });\n  if (dataConfidence) addConfidenceTrack(dataConfidence, protein, groups);\n  const tracks = flattenTracksObject(groups);\n  if (!dataProtein.payload?.metadata) return null;\n  return (\n    <div ref={containerRef}>\n      <ProteinViewer\n        protein={dataProtein.payload.metadata}\n        data={tracks}\n        title=\"Protein domains\"\n        showOptions={!isSplitScreen}\n      />\n    </div>\n  );\n};\n\nconst getProteinURL = createSelector(\n  (state) => state.settings.api,\n  (_, props) => props.protein,\n  ({ protocol, hostname, port, root }, accession) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'protein' },\n      protein: { db: 'uniprot', accession },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n    });\n  },\n);\nconst getInterproRelatedEntriesURL = createSelector(\n  (state) => state.settings.api,\n  (_, props) => props.protein,\n  ({ protocol, hostname, port, root }, protein) => {\n    const newDesc: InterProPartialDescription = {\n      main: { key: 'entry' },\n      entry: { db: 'all' },\n      protein: { isFilter: true, db: 'uniprot', accession: protein },\n    };\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname: root + descriptionToPath(newDesc),\n      query: {\n        page_size: 200,\n        extra_fields: 'short_name',\n      },\n    });\n  },\n);\n\nexport default loadData<AlphafoldPayload, 'Prediction'>({\n  getUrl: getAlphaFoldPredictionURL,\n  propNamespace: 'Prediction',\n} as LoadDataParameters)(\n  loadData<AlphafoldConfidencePayload, 'Confidence'>({\n    getUrl: getConfidenceURLFromPayload('Prediction'),\n    propNamespace: 'Confidence',\n  } as LoadDataParameters)(\n    loadData<{ metadata: ProteinMetadata }, 'Protein'>({\n      getUrl: getProteinURL,\n      propNamespace: 'Protein',\n    } as LoadDataParameters)(\n      loadData(getInterproRelatedEntriesURL as LoadDataParameters)(\n        ProteinViewerForAlphafold,\n      ),\n    ),\n  ),\n);\n","'use strict';\nvar $TypeError = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nmodule.exports = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');\n  return it;\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        doesNotExceedSafeInteger(targetIndex + 1);\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));\n    return A;\n  }\n});\n","'use strict';\n// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n"],"names":["getAlphaFoldPredictionURL","createSelector","state","settings","alphafold","customLocation","description","protein","accession","_ref","protocol","hostname","port","root","query","format","pathname","getConfidenceURLFromPayload","namespace","_","props","dataPrediction","cifURL","_b","_a","payload","cifUrl","length","replace","selectRepresentativeData","entries","locationKey","type","flatRepresentativeData","entry","short_name","name","source_database","integrated","chain","location","fragment","fragments","start","end","representative","push","color","getTrackColor","EntryColorMode","MEMBER_DB","useProcessData","results","endpoint","useMemo","processData","dataResults","_loop","item","splice","toPlural","map","match","Object","assign","metadata","extra_fields","interpro","filter","toLowerCase","representativeData","domains","families","representativeDomains","representativeFamilies","interproMap","Map","ipro","unintegrated","concat","indexOf","NOT_MEMBER_DBS","has","forEach","get","children","sort","a","b","localeCompare","other","ProteinViewer","loadable","loader","loading","UNDERSCORE","FIRST_IN_ORDER","LASTS_IN_ORDER","byEntryType","_ref2","__","label","l","getBoundaries","undefined","Array","isArray","entry_protein_locations","_d","_c","sortTracks","aAccession","aStart","aEnd","bAccession","bStart","bEnd","makeTracks","_ref3","disorderedRegions","integratedMatches","dbMatches","memberDBMatch","getMemberDBMatches","allMatches","groups","groupByEntryType","keys","key","uniqueInterproAccessions","Set","allMatchesGroupedByEntry","i","groupedEntry","flat","mergedData","other_features","representative_domains","representative_families","flattenTracksObject","tracksObject","_ref4","value","_ref5","types","features","mainData","dataMerged","dataConfidence","dataVariation","dataProteomics","conservationError","showConservationButton","handleConservationLoad","title","addConfidenceTrack","ok","filteredVariationPayload","f","clinicalSignificances","cs","includes","addVariationTrack","variationPayload","tracks","data","sortedData","React","show","ervationButton","mobiConsensus","mergeResidues","residuesPayload","residuesWithEntryDetails","residues","newResidues","acc","startsWith","newAcc","substring","locations","mergePIRSFRResidues","otherGroups","__rest","values","group","resAccession","matchedEntry","linked","child","childResAccession","unlinkedResidues","residue","residueEntry","_getProtvistaTracksData","annotations","condition","models","reduce","agg","resource","addedInfoLocation","confidence","locationEnd","presentLocations","TYPES","F","S","D","T","I","getGenome3dURL","genome3d","protvista","getRepeatsDBURL","repeatsDB","getDisProtURL","disprot","orderByAccession","g","getRelatedEntriesURL","api","newDesc","main","isFilter","db","descriptionToPath","page_size","getExtraURL","getVariationURL","proteinsAPI","WrappedComponent","loadData","getUrl","propNamespace","dataResidues","dataFeatures","onMatchesLoaded","onFamiliesFound","externalSourcesData","processedData","setProcessedData","useState","useEffect","Loading","edgeCaseText","edgeCases","STATUS_TIMEOUT","detail","EdgeCase","text","status","external_sources","getFeature","entryDB","some","mergeExtraFeatures","extraFeatures","feature","newFeatures","loc","seq_feature","splitMobiFeatures","accA","dbA","accB","dbB","mobiDBLiteEntries","k","mobiDBLiteConsensusWithChildren","mobiDBLiteChildren","filterMobiDBLiteFeatures","CPST","toRemove","x","v","DomainsOnProteinLoaded","Callout","displayName","ComponentWithExternalData","dataGenome3D","isStaleGenome3D","dataRepeatsDB","isStaleRepeatsDB","dataDisProt","isStaleDisProt","___","otherProps","genome3dFormatted","panelsData","toUpperCase","uniprot_acc","formatGenome3dIntoProtVistaPanels","repeatsDBFormatted","repeatDatum","repeatsdb_consensus_majority","uniprot_id","formatRepeatsDB","disprotFormatted","region","disprot_consensus","full","formatDisProt","newProps","confidenceCategory","join","getProteinURL","getInterproRelatedEntriesURL","dataProtein","onChangeSelection","isSplitScreen","containerRef","useRef","fixedSelection","_setFixedSelection","hoverSelection","_setHoverSelection","hoverSelectionRef","fixedSelectionRef","setFixedSelection","current","setHoverSelection","selection","addEventListener","rawEvent","event","eventType","highlight","colour","parseInt","split","block","parts","Number","ref","showOptions","$TypeError","TypeError","module","exports","it","lengthOfArrayLike","doesNotExceedSafeInteger","bind","flattenIntoArray","target","original","source","sourceLen","depth","mapper","thisArg","element","elementLen","targetIndex","sourceIndex","mapFn","$","toObject","toIntegerOrInfinity","arraySpeciesCreate","proto","depthArg","arguments","O","this","A","addToUnscopables"],"sourceRoot":""}