{"version":3,"file":"js/6643.module.pathways-subpage.652.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/Table/FullyLoadedTable/index.tsx","webpack://interpro7-client/./src/subPages/Pathways/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { connect, ConnectedProps } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Table, { Column, PageSizeSelector } from 'components/Table';\nimport { Renderer } from '../Column';\n\nexport const sortSubsetBy = <RowData extends Record<string, unknown>>(\n  subset: Array<RowData>,\n  search: InterProLocationSearch | undefined,\n  keys: Array<string>,\n  columnToString: Record<string, Column2StringOrNumberFn<RowData>> = {},\n) => {\n  for (const key of keys) {\n    const str = columnToString[key] || ((x) => `${x}`);\n    if (search?.sort_by === key) {\n      subset.sort((a, b) => (str(a[key]) > str(b[key]) ? 1 : -1));\n    }\n    if (search?.sort_by === `-${key}`) {\n      subset.sort((a, b) => (str(a[key]) > str(b[key]) ? -1 : 1));\n    }\n  }\n};\n\nexport const filterSubset = <RowData extends Record<string, unknown>>(\n  subset: Array<RowData>,\n  search: InterProLocationSearch | undefined,\n  keys: Array<string>,\n  columnToString: Record<string, Column2StringOrNumberFn<RowData>> = {},\n) => {\n  let filteredSubset = [...subset];\n  for (const key of keys) {\n    if (search?.[key]) {\n      const str =\n        columnToString[key] || ((x) => JSON.stringify(x).toLowerCase());\n      filteredSubset = filteredSubset.filter(\n        (row) =>\n          String(str(row[key], row))\n            .toLowerCase()\n            .indexOf((search[key] as string).toLowerCase()) !== -1,\n      );\n    }\n  }\n  return filteredSubset;\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.customLocation.search,\n  (state: GlobalState) => state.settings.navigation.pageSize,\n  (search, pageSize) => ({ search, pageSize }),\n);\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport type Column2StringOrNumberFn<RowData = unknown> = (\n  cellValue: unknown,\n  row?: RowData,\n) => string | number;\n\ntype Props<RowData extends Record<string, unknown>> = {\n  data: Array<RowData>;\n  renderers?: Record<string, Renderer<unknown, RowData>>;\n  columnToString?: Record<string, Column2StringOrNumberFn<RowData>>;\n  headerStyle?: Record<string, React.CSSProperties>;\n  cellStyle?: Record<string, React.CSSProperties>;\n  headerColumns?: Record<string, string>;\n  headerClassName?: Record<string, string>;\n  cellClassName?: Record<string, string>;\n};\ntype AllProps<RowData extends Record<string, unknown>> = Props<RowData> &\n  PropsFromRedux;\n\nexport const FullyLoadedTable = <RowData extends Record<string, unknown>>({\n  data,\n  renderers = {},\n  columnToString = {},\n  headerStyle = {},\n  cellStyle = {},\n  headerColumns = {},\n  headerClassName = {},\n  cellClassName = {},\n  search,\n  pageSize,\n}: AllProps<RowData>) => {\n  const keys = Object.keys(data?.[0] || {});\n  let subset = data;\n  subset = filterSubset(subset, search, keys);\n  sortSubsetBy(subset, search, keys, columnToString);\n  const size = Number(search?.page_size) || pageSize || 20;\n  const page = Number(search?.page) || 1;\n  subset = subset.slice((page - 1) * size, page * size);\n  return (\n    <Table actualSize={data.length} dataTable={subset} query={search}>\n      <PageSizeSelector />\n      {keys.map((key) => (\n        <Column\n          key={key}\n          dataKey={key}\n          renderer={renderers[key] || ((d) => d)}\n          isSearchable={true}\n          isSortable={true}\n          headerStyle={{\n            ...(headerStyle['*'] || {}),\n            ...(headerStyle[key] || {}),\n          }}\n          cellStyle={{\n            ...(cellStyle['*'] || {}),\n            ...(cellStyle[key] || {}),\n          }}\n          headerClassName={`${headerClassName['*'] || ''} ${\n            headerClassName[key] || ''\n          }`}\n          cellClassName={`${cellClassName['*'] || ''} ${\n            cellClassName[key] || ''\n          }`}\n        >\n          {headerColumns[key] || key}\n        </Column>\n      ))}\n    </Table>\n  );\n};\n\n// Define a generic connected component\nconst ConnectedFullyLoadedTable = <RowData extends Record<string, unknown>>(\n  props: Props<RowData>,\n) => {\n  const ConnectedTable = connector(\n    FullyLoadedTable as React.ComponentType<AllProps<RowData>>,\n  );\n  return <ConnectedTable {...props} />;\n};\n\nexport default ConnectedFullyLoadedTable;\n","import React from 'react';\n\nimport FullyLoadedTable from 'components/Table/FullyLoadedTable';\nimport loadable from 'higherOrder/loadable';\nimport Link from 'components/generic/Link';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport { Renderer } from 'src/components/Table/Column';\n\nimport cssBinder from 'styles/cssBinder';\n\nconst css = cssBinder();\n\nconst SchemaOrgData = loadable({\n  loader: () => import(/* webpackChunkName: \"schemaOrg\" */ 'schema_org'),\n  loading: () => null,\n});\nconst links: Record<string, string> = {\n  reactome: 'https://reactome.org/content/schema/instance/browser/<id>',\n  kegg: 'https://www.genome.jp/dbget-bin/www_bget?map<id>',\n  metacyc: 'https://metacyc.org/META/NEW-IMAGE?type=NIL&object=<id>&redirect=T',\n};\n\nconst schemaProcessData = (data: Array<Pathway>) => {\n  return {\n    '@id': '@additionalProperty',\n    '@type': 'PropertyValue',\n    name: 'Pathways',\n    value: data.map(({ database, id }) => links[database].replace('<id>', id)),\n  };\n};\n\nconst PathwayLink: Renderer<unknown, Pathway> = (\n  id: unknown,\n  { database }: Pathway,\n) => {\n  if (links[database]) {\n    return (\n      <Link\n        target=\"_blank\"\n        className={css('ext')}\n        href={links[database].replace('<id>', String(id))}\n      >\n        {id}\n      </Link>\n    );\n  }\n  return <span>{String(id)}</span>;\n};\ntype Props = {\n  data: RequestedData<{\n    pathways: Record<string, Array<{ id: string; name: string }>>;\n  }>;\n};\ntype Pathway = { id: string; name: string; database: string };\n\nconst InteractionsAndPathwaysSubPage = ({ data }: Props) => {\n  if (data.loading) return <Loading />;\n  if (!data.payload) return null;\n  const _data: Array<Pathway> = [];\n  for (const [database, pathways] of Object.entries(data.payload.pathways)) {\n    _data.push(...pathways.map(({ id, name }) => ({ id, name, database })));\n  }\n\n  return (\n    <div className={css('vf-stack', 'vf-stack--400')}>\n      {_data ? (\n        <>\n          <p>\n            Proteins matching this entry have been linked to these pathways.\n          </p>\n          <SchemaOrgData data={_data} processData={schemaProcessData} />\n          <FullyLoadedTable\n            data={_data}\n            renderers={{\n              id: PathwayLink,\n            }}\n          />\n        </>\n      ) : (\n        <p>This entry has no pathways.</p>\n      )}\n    </div>\n  );\n};\n\nexport default InteractionsAndPathwaysSubPage;\n"],"names":["sortSubsetBy","subset","search","keys","columnToString","_loop","key","str","x","sort_by","sort","a","b","filterSubset","filteredSubset","_loop2","JSON","stringify","toLowerCase","filter","row","String","indexOf","mapStateToProps","createSelector","state","customLocation","settings","navigation","pageSize","connector","connect","FullyLoadedTable","_ref","data","renderers","headerStyle","cellStyle","headerColumns","headerClassName","cellClassName","Object","size","Number","page_size","page","slice","React","Table","actualSize","length","dataTable","query","PageSizeSelector","map","Column","dataKey","renderer","d","isSearchable","isSortable","assign","props","ConnectedTable","css","cssBinder","SchemaOrgData","loadable","loader","loading","links","reactome","kegg","metacyc","schemaProcessData","name","value","database","id","replace","PathwayLink","_ref2","Link","target","className","href","_ref3","Loading","payload","_data","push","pathways","_ref4","entries","processData"],"sourceRoot":""}