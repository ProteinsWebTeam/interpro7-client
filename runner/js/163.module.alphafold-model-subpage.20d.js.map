{"version":3,"file":"js/163.module.alphafold-model-subpage.20d.js","mappings":"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","sources":["webpack://interpro7-client/./src/components/SimpleCommonComponents/FullScreenButton/index.tsx","webpack://interpro7-client/./src/utils/fullscreen/index.js","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/ToggleButton/index.tsx","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/index.tsx","webpack://interpro7-client/./src/components/SimpleCommonComponents/PictureInPicturePanel/style.css?e289","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/utils/resource-restriction/index.ts","webpack://interpro7-client/./src/components/Structure/ViewerOnDemand/style.css?39be","webpack://interpro7-client/./src/components/AlphaFold/Model/SequenceCheck/index.tsx","webpack://interpro7-client/./src/components/AlphaFold/Model/index.tsx","webpack://interpro7-client/./src/components/AlphaFold/Model/style.css?bef2","webpack://interpro7-client/./src/components/AlphaFold/ProteinTable/index.tsx","webpack://interpro7-client/./src/subPages/AlphaFoldModelSubPage/index.tsx","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/button-bar.css?ba9b","webpack://interpro7-client/./src/components/Structure/ViewerAndEntries/style.css?b122"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { noop } from 'lodash-es';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Button from 'components/SimpleCommonComponents/Button';\n\nimport { requestFullScreen, exitFullScreen } from 'utils/fullscreen';\nimport cssBinder from 'styles/cssBinder';\n\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(fonts);\n\ntype Props = {\n  /**\n   * Hook that is call when the full screen action gets trigger\n   * @returns void\n   */\n  onFullScreenHook?: () => void;\n  /**\n   * Hook that is call when exiting the full screen action\n   * @returns void\n   */\n  onExitFullScreenHook?: () => void;\n  /**\n   * Either the id, or directly the DOM element to be send to full screen\n   */\n  element?: string | HTMLElement | null;\n  /**\n   * Content of the tooltip that appears when hovering this button\n   */\n  tooltip: string;\n  /**\n   * Extra CSS classes to add\n   */\n  className?: string;\n  /**\n   * Should we change the icon for one from https://www.ebi.ac.uk/style-lab/general/fonts/v1.3/\n   */\n  dataIcon?: string;\n  /**\n   * To disable the component\n   */\n  disabled?: boolean;\n};\nconst FullScreenButton = ({\n  element,\n  tooltip,\n  className,\n  dataIcon,\n  disabled = false,\n  onFullScreenHook = noop,\n  onExitFullScreenHook = noop,\n}: Props) => {\n  const [elementInDOM, setElementInDom] = useState<\n    HTMLElement | null | undefined\n  >(null);\n  const [isFull, setFull] = useState(false);\n  const onFullscreen = () => {\n    if (document.fullscreenElement === null) {\n      setFull(false);\n      onExitFullScreenHook();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', onFullscreen);\n    return () => document.removeEventListener('fullscreenchange', onFullscreen);\n  }, []);\n  useEffect(() => {\n    setElementInDom(\n      typeof element === 'string' ? document.getElementById(element) : element,\n    );\n  }, [element]);\n\n  if (!elementInDOM) return null;\n  const _handleFullScreen = () => {\n    if (isFull) {\n      exitFullScreen();\n      onExitFullScreenHook();\n    } else {\n      requestFullScreen(elementInDOM).then(() => onFullScreenHook());\n    }\n    setFull(!isFull);\n  };\n  const _className =\n    className || css('margin-bottom-none', 'icon', 'icon-common');\n  const icon =\n    dataIcon || (isFull ? 'icon-fullscreen-collapse' : 'icon-fullscreen');\n  return (\n    <Tooltip title={tooltip}>\n      <Button\n        type=\"inline\"\n        onClick={_handleFullScreen}\n        icon={icon}\n        title={tooltip}\n        className={_className}\n        disabled={disabled}\n      />\n    </Tooltip>\n  );\n};\n\nexport default FullScreenButton;\n","export const requestFullScreen = (element) => {\n  if ('requestFullscreen' in element) {\n    return element.requestFullscreen();\n  } else if ('webkitRequestFullscreen' in element) {\n    return element.webkitRequestFullscreen();\n  } else if ('mozRequestFullScreen' in element) {\n    return element.mozRequestFullScreen();\n  } else if ('msRequestFullscreen' in element) {\n    return element.msRequestFullscreen();\n  }\n};\n\nexport const exitFullScreen = () => {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  } else if ('mozExitFullScreen' in document) {\n    return document.mozExitFullScreen();\n  } else if ('msExitFullscreen' in document) {\n    return document.msExitFullscreen();\n  }\n};\n\nexport const onFullScreenChange = (element, callback) => {\n  if ('onfullscreenchange' in element) {\n    element.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in element) {\n    element.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in element) {\n    element.onmozfullscreenchange = callback;\n  } else if ('onfullscreenchange' in document) {\n    document.onfullscreenchange = callback;\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.onwebkitfullscreenchange = callback;\n  } else if ('onmozfullscreenchange' in document) {\n    document.onmozfullscreenchange = callback;\n  } else if ('onMSFullscreenChange' in document) {\n    document.onMSFullscreenChange = callback;\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { changeSettingsRaw } from 'actions/creators';\n\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\ntype Props = {\n  isPIPEnabled: boolean;\n  changeSettingsRaw: typeof changeSettingsRaw;\n  className?: string;\n};\nconst PIPToggleButton = ({\n  isPIPEnabled,\n  changeSettingsRaw,\n  className,\n}: Props) => {\n  const togglePIP = () => {\n    changeSettingsRaw('ui', 'isPIPEnabled', !isPIPEnabled);\n  };\n  const text = `${\n    isPIPEnabled ? 'Disable' : 'Enable'\n  } The Picture In Picture functionality`;\n  return (\n    <Tooltip title={text}>\n      <button\n        className={className}\n        onClick={togglePIP}\n        data-icon=\"&#xf247;\"\n        title={text}\n        style={{\n          color: isPIPEnabled ? undefined : '#bbb',\n        }}\n      />\n    </Tooltip>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  (ui) => ({\n    isPIPEnabled: !!ui.isPIPEnabled,\n  })\n);\n\nexport default connect(mapStateToProps, { changeSettingsRaw })(PIPToggleButton);\n","import React, {\n  useState,\n  useEffect,\n  useRef,\n  ReactNode,\n  PropsWithChildren,\n} from 'react';\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { intersectionObserver as intersectionObserverPolyfill } from 'utils/polyfills';\n\nimport cssBinder from 'styles/cssBinder';\nimport style from './style.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(style, fonts);\n\nconst NUMBER_OF_CHECKS = 10;\nconst optionsForObserver = {\n  root: null,\n  rootMargin: '0px',\n  threshold: Array.from(Array(NUMBER_OF_CHECKS)).map(\n    (_, n) => (n + 1) / NUMBER_OF_CHECKS\n  ),\n};\ntype Props = {\n  className: string;\n  hideBar?: boolean;\n  OtherControls?: {\n    bottom?: ReactNode | null;\n    top?: ReactNode | null;\n  };\n  OtherButtons?: ReactNode | null;\n  onChangingMode?: () => void;\n  isPIPEnabled?: boolean;\n} & PropsWithChildren;\n\nconst PictureInPicturePanel = ({\n  className,\n  hideBar = false,\n  OtherControls = { bottom: null, top: null },\n  OtherButtons = null,\n  onChangingMode = () => null,\n  isPIPEnabled = true,\n  children,\n}: Props) => {\n  const [isStuck, setStuck] = useState(false);\n  const [isMinimized, setMinimized] = useState(false);\n  const wrapperRef /*: { current: null | React$ElementRef<'div'> } */ =\n    useRef(null);\n  let observer: IntersectionObserver | null = null;\n  const threshold = 0.4;\n  useEffect(() => {\n    const asynLoadPolyfill = async () => await intersectionObserverPolyfill();\n    asynLoadPolyfill();\n  }, []);\n  useEffect(() => {\n    if (wrapperRef?.current) {\n      const current = wrapperRef.current;\n      observer = new IntersectionObserver((entries) => {\n        setStuck(\n          ((current as HTMLElement)?.getBoundingClientRect()?.y || 0) < 0 &&\n            entries[0].intersectionRatio < threshold\n        );\n        onChangingMode();\n      }, optionsForObserver);\n      observer.observe(current);\n    }\n    return () => {\n      if (observer) observer.disconnect();\n    };\n  }, [wrapperRef]);\n  return (\n    <div ref={wrapperRef} className={css('wrapper')}>\n      <div\n        className={css(className, 'content', {\n          'is-stuck': isStuck && isPIPEnabled,\n          'is-minimized': isMinimized,\n        })}\n      >\n        {!isStuck && <div className={css('controls')}>{OtherControls.top}</div>}\n        {children}\n        <div\n          className={css('control-bar', {\n            hide: hideBar,\n          })}\n        >\n          {OtherControls.bottom}\n          <div className={css('controls')}>\n            {isStuck && isPIPEnabled && OtherControls.top}\n            {OtherButtons}\n            {isStuck && isPIPEnabled && (\n              <button\n                data-icon={isMinimized ? '\\uF2D0' : '\\uF2D1'}\n                title={'Minimize'}\n                onClick={() => setMinimized(!isMinimized)}\n                className={css('control-icon', 'icon', 'icon-common')}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui,\n  (ui: { isPIPEnabled?: boolean }) => ({\n    isPIPEnabled: !!ui.isPIPEnabled,\n  })\n);\n\nexport default connect(mapStateToProps)(PictureInPicturePanel);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PictureInPicturePanel_style__wrapper___c5\",\"content\":\"PictureInPicturePanel_style__content___e7\",\"control-bar\":\"PictureInPicturePanel_style__control-bar___c7\",\"controls\":\"PictureInPicturePanel_style__controls___b2\",\"is-stuck\":\"PictureInPicturePanel_style__is-stuck___c4\",\"structure-viewer-select\":\"PictureInPicturePanel_style__structure-viewer-select___f5\",\"structure-icon\":\"PictureInPicturePanel_style__structure-icon___fe\",\"is-minimized\":\"PictureInPicturePanel_style__is-minimized___b9\",\"structure-viewer-ref\":\"PictureInPicturePanel_style__structure-viewer-ref___be\"};","import React, { FormEvent, useRef, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Link from 'components/generic/Link';\nimport LazyImage from 'components/LazyImage';\n\nimport loadable from 'higherOrder/loadable';\n\nimport isResourceRestricted from './utils/resource-restriction';\nimport { Props as ViewerProps } from '../Viewer';\nimport { changeSettingsRaw } from 'actions/creators';\n\nimport styles from './style.css';\n\nconst StructureViewAsync = loadable({\n  loader: () =>\n    import(\n      /* webpackChunkName: \"structure-viewer\" */ 'components/Structure/Viewer'\n    ),\n  loading: null,\n});\n\ntype Props = {\n  id: string;\n  userActivatedVisible: boolean;\n  changeSettingsRaw: typeof changeSettingsRaw;\n} & ViewerProps;\n\nexport const ViewerOnDemand = (props: Props) => {\n  const { id, userActivatedVisible, changeSettingsRaw } = props;\n  const [visible, setVisible] = useState(userActivatedVisible);\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    const initializeVisible = async () => {\n      setVisible(!(await isResourceRestricted()));\n    };\n    initializeVisible().catch(console.error);\n  }, []);\n\n  if (visible) {\n    return <StructureViewAsync {...props} />;\n  }\n\n  const handleCheckboxClick = (e: FormEvent) => e.stopPropagation();\n\n  const handleClick = () => {\n    if (inputRef.current?.checked) {\n      changeSettingsRaw('ui', 'structureViewer', true);\n    }\n    setVisible(true);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles['inner-wrapper']} onClick={handleClick}>\n        <div className={styles.background}>\n          <LazyImage\n            src={`//www.ebi.ac.uk/thornton-srv/databases/cgi-bin/pdbsum/getimg.pl?source=pdbsum&pdb_code=${id}&file=traces.jpg`}\n            alt={`structure with accession ${id}`}\n          />\n        </div>\n        <div className={styles.text}>\n          <p>\n            click or tap this area to display the interactive structure viewer\n          </p>\n          <p>\n            <label htmlFor=\"cb_reminder\">\n              Remember this next time?{' '}\n              <input\n                type=\"checkbox\"\n                ref={inputRef}\n                id=\"cb_reminder\"\n                onClick={handleCheckboxClick}\n              />\n            </label>\n            <small>\n              This can be reversed in the{' '}\n              <Link to={{ description: { other: ['settings'] } }}>\n                Settings\n              </Link>{' '}\n              page\n            </small>\n          </p>\n        </div>\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = createSelector(\n  (state: GlobalState) => state.settings.ui.structureViewer,\n  (userActivatedVisible) => ({\n    userActivatedVisible: userActivatedVisible || false,\n  })\n);\n\nexport default connect(mapStateToProps, { changeSettingsRaw }, null, {\n  forwardRef: true,\n})(ViewerOnDemand);\n","const LOW_BATTERY_LEVEL = 0.15;\nconst SMALL_SCREEN = 650;\n\n// http://wicg.github.io/netinfo/#connection-types\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// http://wicg.github.io/netinfo/#effectiveconnectiontype-enum\ntype EffectiveConnectionType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// http://wicg.github.io/netinfo/#dom-megabit\ntype Megabit = number;\n// http://wicg.github.io/netinfo/#dom-millisecond\ntype Millisecond = number;\n\n// http://wicg.github.io/netinfo/#networkinformation-interface\ninterface NetworkInformation extends EventTarget {\n  // http://wicg.github.io/netinfo/#type-attribute\n  readonly type?: ConnectionType;\n  // http://wicg.github.io/netinfo/#effectivetype-attribute\n  readonly effectiveType?: EffectiveConnectionType;\n  // http://wicg.github.io/netinfo/#downlinkmax-attribute\n  readonly downlinkMax?: Megabit;\n  // http://wicg.github.io/netinfo/#downlink-attribute\n  readonly downlink?: Megabit;\n  // http://wicg.github.io/netinfo/#rtt-attribute\n  readonly rtt?: Millisecond;\n  // http://wicg.github.io/netinfo/#savedata-attribute\n  readonly saveData?: boolean;\n  // http://wicg.github.io/netinfo/#handling-changes-to-the-underlying-connection\n  onchange?: EventListener;\n}\n\nexport default async () => {\n  // If not in a browser, no restriction\n  if (!window.navigator) return false;\n  // If slow connection, restriction!\n  if (\n    'connection' in navigator &&\n    (navigator.connection as NetworkInformation)?.effectiveType !== '4g'\n  ) {\n    return true;\n  }\n  // If small screen, restriction!\n  if (window.innerWidth < SMALL_SCREEN) return true;\n  try {\n    if (\n      'getBattery' in navigator &&\n      typeof navigator.getBattery === 'function'\n    ) {\n      const battery = await navigator.getBattery();\n      // If low battery and discharging, restriction!\n      return !battery.isCharging && battery.level < LOW_BATTERY_LEVEL;\n    }\n  } catch {\n    /**/\n  }\n  return false;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ViewerOnDemand_style__wrapper___ae\",\"inner-wrapper\":\"ViewerOnDemand_style__inner-wrapper___c3\",\"background\":\"ViewerOnDemand_style__background___e3\",\"text\":\"ViewerOnDemand_style__text___af\"};","import React, { useState } from 'react';\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\n\nimport { Button } from 'components/SimpleCommonComponents/Button';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\n\ntype Props = {\n  proteinAccession: string;\n  alphaFoldSequence?: string;\n  alphaFoldCreationDate?: string;\n};\n\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<{ metadata: ProteinMetadata }> {}\n\nconst SequenceCheck = ({\n  alphaFoldSequence,\n  alphaFoldCreationDate,\n  data,\n}: LoadedProps) => {\n  const { loading, payload } = data || {};\n  const [showDiff, setShowDiff] = useState(false);\n  if (!alphaFoldSequence || loading) return <Loading inline />;\n  const uniprotSequence = payload?.metadata?.sequence || '';\n  if (alphaFoldSequence === uniprotSequence) return null;\n  return (\n    <Callout type=\"warning\">\n      <div>\n        <b>AlphaFold Prediction Mismatch</b>\n        <p>\n          The AlphaFold prediction displayed below was generated on{' '}\n          {new Date(alphaFoldCreationDate || '').toLocaleDateString()} using a\n          sequence that has since been updated in the UniProt database. Please\n          note that the displayed prediction may not accurately represent the\n          current structure of the protein due to the sequence mismatch.\n        </p>\n        <Button\n          type=\"secondary\"\n          onClick={() => setShowDiff(!showDiff)}\n          style={{ width: '10rem' }}\n        >\n          {showDiff ? 'Hide' : 'Show'} Diff\n        </Button>\n        {showDiff && (\n          <div style={{ overflow: 'scroll', maxWidth: 'min(65vw,60em)' }}>\n            <ReactDiffViewer\n              oldValue={alphaFoldSequence}\n              newValue={uniprotSequence}\n              splitView={false}\n              leftTitle={'AlphaFold / Uniprot'}\n              hideLineNumbers={true}\n            />\n          </div>\n        )}\n      </div>\n    </Callout>\n  );\n};\n\nconst getUrlForProtein = createSelector(\n  (state: GlobalState) => state.settings.api,\n  (_state: GlobalState, props?: Props) => props?.proteinAccession || '',\n  (server: ParsedURLServer, accession: string) => {\n    if (!accession) return null;\n    const { protocol, hostname, port, root } = server;\n    return format({\n      protocol,\n      hostname,\n      port,\n      pathname:\n        root +\n        descriptionToPath({\n          main: { key: 'protein' },\n          protein: { db: 'uniprot', accession },\n        }),\n    });\n  },\n);\n\nexport default loadData(getUrlForProtein as LoadDataParameters)(SequenceCheck);\n","import React, { useEffect, useState } from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\nimport loadData from 'higherOrder/loadData/ts';\n\nimport Link from 'components/generic/Link';\nimport { UniProtLink } from 'components/ExtLink/patternLinkWrapper';\nimport FullScreenButton from 'components/SimpleCommonComponents/FullScreenButton';\nimport PictureInPicturePanel from 'components/SimpleCommonComponents/PictureInPicturePanel';\nimport PIPToggleButton from 'components/SimpleCommonComponents/PictureInPicturePanel/ToggleButton';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Callout from 'components/SimpleCommonComponents/Callout';\nimport Button from 'components/SimpleCommonComponents/Button';\n\nimport StructureViewer from 'components/Structure/ViewerOnDemand';\nimport { Selection } from 'components/Structure/ViewerAndEntries';\n\nimport SequenceCheck from './SequenceCheck';\n\nimport cssBinder from 'styles/cssBinder';\nimport ipro from 'styles/interpro-vf.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport style from './style.css';\nimport buttonBar from 'components/Structure/ViewerAndEntries/button-bar.css';\n\nconst css = cssBinder(style, buttonBar, ipro, fonts);\n\nconst confidenceColors = [\n  {\n    category: 'Very High',\n    range: 'pLDDT > 90',\n    color: '#0053d6',\n  },\n  {\n    category: 'Confident',\n    range: '90 > pLDDT > 70',\n    color: '#65cbf3',\n  },\n  {\n    category: 'Low',\n    range: '70 > pLDDT > 50',\n    color: '#ffdb13',\n  },\n  {\n    category: 'Very Low',\n    range: 'pLDDT < 50',\n    color: '#ff7d45',\n  },\n];\n\ntype Props = {\n  proteinAcc: string;\n  hasMultipleProteins: boolean;\n  onModelChange: (value: string) => void;\n  modelId: string | null;\n  modelUrl?: string;\n  selections: Selection[] | null;\n  parentElement?: HTMLElement | null;\n  isSplitScreen: boolean;\n  onSplitScreenChange?: (v: boolean) => void;\n};\ninterface LoadedProps extends Props, LoadDataProps<AlphafoldPayload> {}\n\nconst AlphaFoldModel = ({\n  proteinAcc,\n  hasMultipleProteins,\n  onModelChange,\n  modelId,\n  modelUrl,\n  data,\n  selections,\n  parentElement,\n  isSplitScreen,\n  onSplitScreenChange,\n}: LoadedProps) => {\n  const [shouldResetViewer, setShouldResetViewer] = useState(false);\n  const [isReady, setReady] = useState(false);\n  useEffect(() => {\n    if (shouldResetViewer) {\n      requestAnimationFrame(() => setShouldResetViewer(false));\n    }\n  }, [shouldResetViewer]);\n  useEffect(() => {\n    if (!selections) setShouldResetViewer(true);\n  }, [selections]);\n  if (data?.loading) return <Loading />;\n  if ((data?.payload || []).length === 0) {\n    return (\n      <div>\n        <h3>Structure prediction</h3>\n        <p>There is no structural model associated to {proteinAcc}.</p>\n      </div>\n    );\n  }\n\n  const models = data?.payload || [];\n  const [modelInfo] =\n    modelId === null\n      ? models.slice(0, 1)\n      : models.filter((x) => x.entryId === modelId);\n  const elementId = 'new-structure-model-viewer';\n  return (\n    <div className={css('alphafold-model')}>\n      {!isSplitScreen && (\n        <>\n          <h3>\n            AlphaFold structure prediction\n            {models.length > 1 || hasMultipleProteins ? 's' : ''}\n          </h3>\n          <p>\n            The protein structure below has been predicted by{' '}\n            <Link href={'//deepmind.com/'}>DeepMind</Link> with AlphaFold (\n            <Link href={'//www.nature.com/articles/s41586-021-03819-2'}>\n              Jumper, J et al. 2021\n            </Link>\n            ). For more information and additional features, please visit this\n            sequence&apos;s page at <Link href={modelUrl}>AlphaFold DB</Link>.\n          </p>\n        </>\n      )}\n      {hasMultipleProteins && !isSplitScreen ? (\n        <Callout type=\"info\">\n          This entry matches several proteins with structure predictions. Use\n          the table below the structure viewer to select another protein.\n        </Callout>\n      ) : null}\n      <SequenceCheck\n        proteinAccession={proteinAcc}\n        alphaFoldSequence={models?.[0]?.uniprotSequence}\n        alphaFoldCreationDate={models?.[0]?.modelCreatedDate}\n      />\n\n      <div className={css('af-container')}>\n        {!isSplitScreen && (\n          <div className={css('panel-legends')}>\n            <h5>Information</h5>\n            <ul className={css('information')}>\n              <li>\n                <span className={css('header')}>Protein</span>\n                <Link\n                  to={{\n                    description: {\n                      main: { key: 'protein' },\n                      protein: {\n                        db: 'uniprot',\n                        accession: modelInfo.uniprotAccession,\n                      },\n                    },\n                  }}\n                >\n                  {modelInfo.uniprotAccession}\n                </Link>\n                <span className={css('footer')}>\n                  View on{' '}\n                  <Link href={modelUrl} className={css('ext')} target=\"_blank\">\n                    AlphaFold DB\n                  </Link>{' '}\n                  or{' '}\n                  <UniProtLink\n                    id={modelInfo.uniprotAccession}\n                    className={css('ext')}\n                    target=\"_blank\"\n                  >\n                    UniProtKB\n                  </UniProtLink>\n                  <br />\n                  Find similar structures with{' '}\n                  <Link\n                    href={`https://search.foldseek.com/search?accession=${modelInfo.uniprotAccession}&source=AlphaFoldDB`}\n                    className={css('ext')}\n                    target=\"_blank\"\n                  >\n                    Foldseek\n                  </Link>\n                </span>\n              </li>\n              <li>\n                <span className={css('header')}>Organism</span>\n                <i>{modelInfo.organismScientificName}</i>\n              </li>\n              {models.length > 1 ? (\n                <li>\n                  <span className={css('header')}>Prediction</span>\n                  <select\n                    value={modelId || ''}\n                    className={css('protein-list')}\n                    onChange={(event) => onModelChange(event.target.value)}\n                    onBlur={(event) => onModelChange(event.target.value)}\n                  >\n                    {models.map((model) => (\n                      <option key={model.entryId}>{model.entryId}</option>\n                    ))}\n                  </select>\n                </li>\n              ) : (\n                ''\n              )}\n            </ul>\n            <h5>Model confidence</h5>\n            <ul className={css('legend')}>\n              {confidenceColors.map((item) => (\n                <li key={item.category}>\n                  <span style={{ backgroundColor: item.color }}>&nbsp;</span>{' '}\n                  {item.category} ({item.range})\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        <div className={css('panel-component')}>\n          <PictureInPicturePanel\n            className={css({ 'structure-viewer-split': isSplitScreen })}\n            data-testid=\"structure-3d-viewer\"\n            OtherButtons={\n              <div\n                style={{\n                  display: isSplitScreen ? 'none' : 'block',\n                }}\n                className={css('button-bar')}\n              >\n                <Link\n                  className={css('control')}\n                  href={modelInfo.pdbUrl}\n                  download={`${proteinAcc || 'download'}.model.pdb`}\n                >\n                  <span\n                    className={css('icon', 'icon-common', 'icon-download')}\n                    data-icon=\"&#xf019;\"\n                  />\n                  &nbsp;PDB file\n                </Link>\n                <Link\n                  className={css('control')}\n                  href={modelInfo.cifUrl}\n                  download={`${proteinAcc || 'download'}.model.cif`}\n                >\n                  <span\n                    className={css('icon', 'icon-common', 'icon-download')}\n                    data-icon=\"&#xf019;\"\n                  />\n                  &nbsp;mmCIF file\n                </Link>\n                <Button\n                  type=\"inline\"\n                  icon=\"icon-redo\"\n                  className={css('control')}\n                  onClick={() => setShouldResetViewer(true)}\n                  title=\"Reset image\"\n                />\n                <FullScreenButton\n                  className={css('icon', 'icon-common', 'control')}\n                  tooltip=\"Split full screen\"\n                  dataIcon=\"icon-columns\"\n                  element={parentElement}\n                  onFullScreenHook={() => onSplitScreenChange?.(true)}\n                  onExitFullScreenHook={() => onSplitScreenChange?.(false)}\n                />{' '}\n                <FullScreenButton\n                  className={css('icon', 'icon-common', 'control')}\n                  tooltip=\"View the structure in full screen mode\"\n                  element={isReady ? elementId : null}\n                />{' '}\n                <PIPToggleButton\n                  className={css('icon', 'icon-common', 'control')}\n                />\n              </div>\n            }\n          >\n            <StructureViewer\n              id={'fullSequence'}\n              url={modelInfo.cifUrl}\n              elementId={elementId}\n              ext=\"mmcif\"\n              theme={'af'}\n              shouldResetViewer={shouldResetViewer}\n              selections={selections}\n              onStructureLoaded={() => {\n                setReady(true);\n              }}\n            />\n          </PictureInPicturePanel>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst getModelInfoUrl = (isUrlToApi: boolean) =>\n  createSelector(\n    (state: GlobalState) => state.settings.alphafold,\n    (_: GlobalState, props?: Props) => {\n      const proteinFromPayload =\n        (props as LoadedProps)?.data?.payload?.[0]?.uniprotAccession || '';\n      return props?.proteinAcc || proteinFromPayload;\n    },\n    (\n      { protocol, hostname, port, root, query }: ParsedURLServer,\n      accession: string,\n    ) => {\n      const modelUrl = format({\n        protocol,\n        hostname,\n        port,\n        pathname: isUrlToApi\n          ? `${root}api/prediction/${accession}`\n          : `${root}entry/${accession}`,\n        query: query,\n      });\n      if (isUrlToApi) return modelUrl;\n      return { modelUrl };\n    },\n  );\n\nexport default loadData({\n  getUrl: getModelInfoUrl(true),\n  mapStateToProps: getModelInfoUrl(false),\n} as LoadDataParameters)(AlphaFoldModel);\n","// extracted by mini-css-extract-plugin\nexport default {\"af-container\":\"Model_style__af-container___e6\",\"panel-component\":\"Model_style__panel-component___f0\",\"panel-legends\":\"Model_style__panel-legends___ed\",\"protein-list\":\"Model_style__protein-list___b7\",\"information\":\"Model_style__information___b2\",\"legend\":\"Model_style__legend___fd\",\"header\":\"Model_style__header___a0\",\"footer\":\"Model_style__footer___c5\",\"alphafold-model\":\"Model_style__alphafold-model___ec\",\"structure-viewer-split\":\"Model_style__structure-viewer-split___ee\"};","import React from 'react';\n\nimport { createSelector } from 'reselect';\nimport { format } from 'url';\n\nimport descriptionToPath from 'utils/processDescription/descriptionToPath';\nimport loadData from 'higherOrder/loadData/ts';\n\nimport Link from 'components/generic/Link';\nimport { Button } from 'components/SimpleCommonComponents/Button';\nimport Loading from 'components/SimpleCommonComponents/Loading';\nimport Tooltip from 'components/SimpleCommonComponents/Tooltip';\nimport Table, { Column, PageSizeSelector, SearchBox } from 'components/Table';\n\nimport cssBinder from 'styles/cssBinder';\n\nimport ipro from 'styles/interpro-vf.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\n\nconst css = cssBinder(ipro, fonts);\n\ntype Props = {\n  search?: Record<string, string>;\n  onProteinChange: (acc: string) => void;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<PayloadList<ProteinEntryPayload>> {}\n\nconst ProteinTable = ({\n  data,\n  isStale,\n  search,\n  onProteinChange,\n}: LoadedProps) => {\n  if (data?.loading) return <Loading />;\n\n  return (\n    <div>\n      <Table\n        dataTable={data?.payload?.results.map((e) => e.metadata) || []}\n        contentType=\"protein\"\n        loading={data?.loading}\n        ok={data?.ok}\n        status={data?.status}\n        actualSize={data?.payload?.count || 0}\n        query={search}\n        nextAPICall={data?.payload?.next}\n        previousAPICall={data?.payload?.previous}\n        currentAPICall={data?.url}\n        isStale={isStale}\n      >\n        <PageSizeSelector />\n        <SearchBox loading={data?.loading}>Search proteins</SearchBox>\n        <Column\n          dataKey=\"accession\"\n          cellClassName={'nowrap'}\n          renderer={(accession: string, row: Record<string, string>) => (\n            <>\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'protein' },\n                    protein: {\n                      db: row.source_database,\n                      accession,\n                    },\n                  },\n                  search: {},\n                }}\n                className={css('acc-row')}\n              >\n                {accession}\n              </Link>\n              {row.source_database === 'reviewed' ? (\n                <>\n                  {'\\u00A0' /* non-breakable space */}\n                  <Tooltip title=\"Reviewed by UniProtKB curators\">\n                    <span\n                      className={css('icon', 'icon-common')}\n                      data-icon=\"&#xf2f0;\"\n                      aria-label=\"reviewed\"\n                    />\n                  </Tooltip>\n                </>\n              ) : null}\n            </>\n          )}\n        />\n        <Column\n          dataKey=\"name\"\n          renderer={(name: string, row: Record<string, string>) => {\n            return (\n              <Link\n                to={{\n                  description: {\n                    main: { key: 'protein' },\n                    protein: {\n                      db: row.source_database,\n                      accession: row.accession,\n                    },\n                  },\n                  search: {},\n                }}\n                className={css('acc-row')}\n              >\n                {name}\n              </Link>\n            );\n          }}\n        >\n          Name\n        </Column>\n        <Column\n          dataKey=\"source_organism\"\n          renderer={({\n            fullName,\n            taxId,\n          }: {\n            fullName: string;\n            taxId: number;\n          }) => (\n            <Link\n              to={{\n                description: {\n                  main: { key: 'taxonomy' },\n                  taxonomy: {\n                    db: 'uniprot',\n                    accession: `${taxId}`,\n                  },\n                },\n              }}\n            >\n              {fullName}\n            </Link>\n          )}\n        >\n          Species\n        </Column>\n        <Column\n          dataKey=\"length\"\n          headerClassName={css('text-right')}\n          cellClassName={css('text-right')}\n          renderer={(length: number) => length.toLocaleString()}\n        >\n          Length\n        </Column>\n        <Column\n          dataKey={''}\n          headerClassName={css('text-right')}\n          cellClassName={css('text-right')}\n          renderer={(_: string, row: Record<string, string>) => {\n            return (\n              <Button\n                type=\"secondary\"\n                onClick={() => onProteinChange(row.accession)}\n              >\n                Show prediction\n              </Button>\n            );\n          }}\n        />\n      </Table>\n    </div>\n  );\n};\n\nexport const getUrl = (includeSearch: boolean) =>\n  createSelector(\n    (state: GlobalState) => state.settings.api,\n    (state: GlobalState) => state.customLocation.description,\n    (state: GlobalState) => state.customLocation.search,\n    (\n      { protocol, hostname, port, root }: ParsedURLServer,\n      description,\n      search,\n    ) => {\n      if (description.main.key === 'entry') {\n        const _description: InterProPartialDescription = {\n          main: {\n            key: 'protein',\n            numberOfFilters: 1,\n          },\n          protein: { db: description.protein.db || 'UniProt' },\n          entry: {\n            isFilter: true,\n            db: description.entry.db,\n            accession: description.entry.accession,\n          },\n        };\n        let query;\n        if (includeSearch) query = { ...search, has_model: true };\n        else query = { has_model: true };\n        return format({\n          protocol,\n          hostname,\n          port,\n          pathname: root + descriptionToPath(_description),\n          query: query,\n        });\n      }\n      return null;\n      // This below was to support the idea of multiple models for the same protein, which is unnecessary at the moment\n      // return {\n      //   accession: description[description.main.key].accession,\n      // };\n    },\n  );\n\nexport const mapStateToPropsForModels = createSelector(\n  (state: GlobalState) => state.customLocation.description,\n  (state: GlobalState) => state.customLocation.search,\n  (description, search) => ({\n    description,\n    search,\n  }),\n);\n\nexport default loadData({\n  getUrl: getUrl(true),\n  mapStateToProps: mapStateToPropsForModels,\n} as LoadDataParameters)(ProteinTable);\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport loadData from 'higherOrder/loadData/ts';\nimport AlphaFoldModel from 'components/AlphaFold/Model';\nimport ProteinTable, {\n  getUrl,\n  mapStateToPropsForModels,\n} from 'components/AlphaFold/ProteinTable';\nimport ProteinViewerForAlphafold from 'components/Structure/ViewerAndEntries/ProteinViewerForAlphafold';\nimport { Selection } from 'components/Structure/ViewerAndEntries';\nimport Loading from 'components/SimpleCommonComponents/Loading';\n\nimport cssBinder from 'styles/cssBinder';\nimport ipro from 'styles/interpro-vf.css';\nimport fonts from 'EBI-Icon-fonts/fonts.css';\nimport forSplit from 'components/Structure/ViewerAndEntries/style.css';\n\nconst css = cssBinder(ipro, fonts, forSplit);\n\ntype Props = {\n  description: InterProDescription;\n};\ninterface LoadedProps\n  extends Props,\n    LoadDataProps<PayloadList<ProteinEntryPayload>> {}\n\nconst AlphaFoldModelSubPage = ({ data, description }: LoadedProps) => {\n  const mainAccession = description[description.main.key as Endpoint].accession;\n  const mainType = description.main.key!.toLowerCase();\n  const container = useRef<HTMLDivElement>(null);\n  const [selectionsInModel, setSelectionsInModel] =\n    useState<Array<Selection> | null>(null);\n  const [proteinAcc, setProteinAcc] = useState('');\n  const [modelId, setModelId] = useState<string | null>(null);\n  const [isSplitScreen, setSplitScreen] = useState(false);\n  const handleProteinChange = (value: string) => {\n    setProteinAcc(value);\n    setModelId(null);\n    container.current?.scrollIntoView();\n  };\n  const handleModelChange = (value: string) => {\n    setModelId(value);\n  };\n\n  useEffect(() => {\n    if (mainType === 'entry') {\n      // Take the list of matched UniProt matches and assign the first one to protein accession\n      if ((data?.payload?.count || 0) > 0)\n        setProteinAcc(data?.payload?.results[0].metadata.accession || '');\n    } else setProteinAcc(mainAccession as string);\n  }, [mainAccession, data]);\n\n  if (data?.loading) return <Loading />;\n  const hasMultipleProteins =\n    mainType === 'entry' && (data?.payload?.count || 0) > 1;\n  return (\n    <div\n      className={css('vf-stack', 'vf-stack-400', {\n        'split-view': isSplitScreen,\n      })}\n      ref={container}\n    >\n      {proteinAcc && (\n        <AlphaFoldModel\n          proteinAcc={proteinAcc}\n          hasMultipleProteins={hasMultipleProteins}\n          onModelChange={handleModelChange}\n          modelId={modelId}\n          selections={selectionsInModel}\n          parentElement={container.current}\n          isSplitScreen={isSplitScreen}\n          onSplitScreenChange={(value: boolean) => setSplitScreen(value)}\n        />\n      )}\n      {mainType === 'entry' ? (\n        <ProteinTable onProteinChange={handleProteinChange} />\n      ) : (\n        <div\n          data-testid=\"alphafold-protvista\"\n          className={css('protvista-container')}\n        >\n          <ProteinViewerForAlphafold\n            protein={proteinAcc}\n            onChangeSelection={(selection: null | Array<Selection>) => {\n              setSelectionsInModel(selection);\n            }}\n            isSplitScreen={isSplitScreen}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default loadData({\n  getUrl: getUrl(false),\n  mapStateToProps: mapStateToPropsForModels,\n} as LoadDataParameters)(AlphaFoldModelSubPage);\n","// extracted by mini-css-extract-plugin\nexport default {\"button-bar\":\"ViewerAndEntries_button-bar__button-bar___bb\",\"control\":\"ViewerAndEntries_button-bar__control___e3\"};","// extracted by mini-css-extract-plugin\nexport default {\"structure-viewer\":\"ViewerAndEntries_style__structure-viewer___f0\",\"structure-viewer-select\":\"ViewerAndEntries_style__structure-viewer-select___ca\",\"as-link\":\"ViewerAndEntries_style__as-link___ff\",\"split-view\":\"ViewerAndEntries_style__split-view___c0\",\"protvista-container\":\"ViewerAndEntries_style__protvista-container___c4\",\"wrapper\":\"ViewerAndEntries_style__wrapper___e8\"};"],"names":["css","cssBinder","fonts","_ref","element","tooltip","className","dataIcon","disabled","onFullScreenHook","noop","onExitFullScreenHook","elementInDOM","setElementInDom","useState","isFull","setFull","onFullscreen","document","fullscreenElement","useEffect","addEventListener","removeEventListener","getElementById","_className","icon","React","Tooltip","title","Button","type","onClick","_handleFullScreen","exitFullscreen","webkitExitFullscreen","mozExitFullScreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","requestFullScreen","then","mapStateToProps","createSelector","state","settings","ui","isPIPEnabled","connect","changeSettingsRaw","text","togglePIP","style","color","undefined","optionsForObserver","root","rootMargin","threshold","Array","from","map","_","n","hideBar","OtherControls","bottom","top","OtherButtons","onChangingMode","children","isStuck","setStuck","isMinimized","setMinimized","wrapperRef","useRef","observer","intersectionObserverPolyfill","current","IntersectionObserver","entries","_a","getBoundingClientRect","y","intersectionRatio","observe","disconnect","ref","hide","StructureViewAsync","loadable","loader","loading","structureViewer","userActivatedVisible","forwardRef","props","id","visible","setVisible","inputRef","window","navigator","connection","effectiveType","innerWidth","getBattery","battery","isCharging","level","_b","catch","console","error","Object","assign","handleClick","checked","LazyImage","src","alt","htmlFor","e","stopPropagation","Link","to","description","other","getUrlForProtein","api","_state","proteinAccession","server","accession","protocol","hostname","port","format","pathname","descriptionToPath","main","key","protein","db","loadData","alphaFoldSequence","alphaFoldCreationDate","data","payload","showDiff","setShowDiff","Loading","inline","uniprotSequence","metadata","sequence","Callout","Date","toLocaleDateString","width","overflow","maxWidth","ReactDiffViewer","oldValue","newValue","splitView","leftTitle","hideLineNumbers","buttonBar","ipro","confidenceColors","category","range","getModelInfoUrl","isUrlToApi","alphafold","proteinFromPayload","_c","uniprotAccession","proteinAcc","_ref2","query","modelUrl","getUrl","hasMultipleProteins","onModelChange","modelId","selections","parentElement","isSplitScreen","onSplitScreenChange","shouldResetViewer","setShouldResetViewer","isReady","setReady","requestAnimationFrame","length","models","modelInfo","slice","filter","x","entryId","elementId","href","SequenceCheck","modelCreatedDate","target","UniProtLink","organismScientificName","value","onChange","event","onBlur","model","item","backgroundColor","PictureInPicturePanel","display","pdbUrl","download","cifUrl","FullScreenButton","PIPToggleButton","StructureViewer","url","ext","theme","onStructureLoaded","includeSearch","customLocation","search","_ref3","_description","numberOfFilters","entry","isFilter","has_model","mapStateToPropsForModels","isStale","onProteinChange","Table","dataTable","results","contentType","ok","status","actualSize","count","nextAPICall","next","previousAPICall","_d","previous","currentAPICall","PageSizeSelector","SearchBox","Column","dataKey","cellClassName","renderer","row","source_database","name","fullName","taxId","taxonomy","headerClassName","toLocaleString","forSplit","mainAccession","mainType","toLowerCase","container","selectionsInModel","setSelectionsInModel","setProteinAcc","setModelId","setSplitScreen","AlphaFoldModel","ProteinTable","scrollIntoView","ProteinViewerForAlphafold","onChangeSelection","selection"],"sourceRoot":""}